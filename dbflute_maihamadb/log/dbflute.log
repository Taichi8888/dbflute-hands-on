2025-10-07 17:58:56,819 [main] INFO  (DfReplaceSchemaTask#begin():94) - +------------------------------------------+
2025-10-07 17:58:56,820 [main] INFO  (DfReplaceSchemaTask#begin():95) - |                                          |
2025-10-07 17:58:56,820 [main] INFO  (DfReplaceSchemaTask#begin():96) - |              ReplaceSchema               |
2025-10-07 17:58:56,822 [main] INFO  (DfReplaceSchemaTask#begin():104) - |                                          |
2025-10-07 17:58:56,822 [main] INFO  (DfReplaceSchemaTask#begin():105) - +------------------------------------------+
2025-10-07 17:58:56,822 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():423) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2025-10-07 17:59:00,201 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2025-10-07 17:59:00,202 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2025-10-07 17:59:00,202 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
2025-10-07 17:59:00,202 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2025-10-07 17:59:00,209 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2025-10-07 17:59:00,494 [main] INFO  (DfReplaceSchemaTask#setupLazyConnection():146) - ...Being a lazy connection: Failed to connect: url=jdbc:mysql://localhost:4...
2025-10-07 17:59:00,498 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():253) - 
2025-10-07 17:59:00,499 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():254) - * * * * * * * * * * *
2025-10-07 17:59:00,499 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():255) - *                   *
2025-10-07 17:59:00,499 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():256) - * Initialize Schema *
2025-10-07 17:59:00,499 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():257) - *                   *
2025-10-07 17:59:00,499 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():258) - * * * * * * * * * * *
2025-10-07 17:59:00,499 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():260) - *Passed because it's a lazy connection
2025-10-07 17:59:00,500 [main] INFO  (DfCreateSchemaProcess#createSchema():293) - 
2025-10-07 17:59:00,500 [main] INFO  (DfCreateSchemaProcess#createSchema():294) - * * * * * * * * *
2025-10-07 17:59:00,500 [main] INFO  (DfCreateSchemaProcess#createSchema():295) - *               *
2025-10-07 17:59:00,500 [main] INFO  (DfCreateSchemaProcess#createSchema():296) - * Create Schema *
2025-10-07 17:59:00,500 [main] INFO  (DfCreateSchemaProcess#createSchema():297) - *               *
2025-10-07 17:59:00,500 [main] INFO  (DfCreateSchemaProcess#createSchema():298) - * * * * * * * * *
2025-10-07 17:59:00,501 [main] INFO  (DfSqlFileFireMan#fire():68) - ...Firing: replace-schema-00-system.sql
2025-10-07 17:59:00,502 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2025-10-07 17:59:00,502 [main] INFO  (DfCreateSchemaProcess$1#dispatch():325) - ...Creating a connection to system
2025-10-07 17:59:00,502 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():539) - ...Creating a connection for additional user: root
2025-10-07 17:59:00,547 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
create user maihamadb@localhost identified by 'maihamadb'
2025-10-07 17:59:00,565 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.* to maihamadb@localhost
2025-10-07 17:59:00,567 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2025-10-07 17:59:00,570 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=4 failure=0
2025-10-07 17:59:00,570 [main] INFO  (DfSqlFileFireMan#fire():68) - ...Firing: replace-schema-10-basic.sql
2025-10-07 17:59:00,570 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():411) - ...Coming back to the main user from the user 'system'
2025-10-07 17:59:00,575 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table `MEMBER`(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2025-10-07 17:59:00,576 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#lazyConnectIfNeeds():496) - ...Connecting by main user lazily
2025-10-07 17:59:00,576 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2025-10-07 17:59:00,576 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2025-10-07 17:59:00,577 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
2025-10-07 17:59:00,577 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2025-10-07 17:59:00,577 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2025-10-07 17:59:00,595 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 8.0.43
2025-10-07 17:59:00,595 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.49 ( Revision: ad86f36e100e104cd926c6b81c8cab9565750116 ) for JDBC 4.0
2025-10-07 17:59:00,609 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2025-10-07 17:59:00,615 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2025-10-07 17:59:00,620 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2025-10-07 17:59:00,625 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    AKIRAKANI_OKASHII_KARAMU_MEI INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2025-10-07 17:59:00,629 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2025-10-07 17:59:00,634 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2025-10-07 17:59:00,641 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2025-10-07 17:59:00,646 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2025-10-07 17:59:00,651 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2025-10-07 17:59:00,655 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2025-10-07 17:59:00,659 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2025-10-07 17:59:00,662 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2025-10-07 17:59:00,668 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2025-10-07 17:59:00,672 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2025-10-07 17:59:00,676 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table `MEMBER` add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2025-10-07 17:59:00,691 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-07 17:59:00,702 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2025-10-07 17:59:00,714 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2025-10-07 17:59:00,725 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-07 17:59:00,735 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-07 17:59:00,746 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2025-10-07 17:59:00,757 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-07 17:59:00,766 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-07 17:59:00,775 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2025-10-07 17:59:00,785 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-07 17:59:00,798 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2025-10-07 17:59:00,810 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2025-10-07 17:59:00,822 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2025-10-07 17:59:00,835 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2025-10-07 17:59:00,848 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2025-10-07 17:59:00,859 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on `MEMBER`(MEMBER_NAME)
2025-10-07 17:59:00,871 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on `MEMBER`(FORMALIZED_DATETIME)
2025-10-07 17:59:00,884 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2025-10-07 17:59:00,889 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(AKIRAKANI_OKASHII_KARAMU_MEI)
2025-10-07 17:59:00,895 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2025-10-07 17:59:00,903 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2025-10-07 17:59:00,909 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2025-10-07 17:59:00,916 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2025-10-07 17:59:00,921 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2025-10-07 17:59:00,929 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=40 failure=0
2025-10-07 17:59:00,929 [main] INFO  (DfSqlFileFireMan#fire():93) - Create Schema: success=44, failure=0 (in 2 files)
2025-10-07 17:59:00,929 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():594) - ...Closing connections to change-users: [system]
2025-10-07 17:59:00,945 [main] INFO  (DfLoadDataProcess#execute():133) - 
2025-10-07 17:59:00,945 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2025-10-07 17:59:00,945 [main] INFO  (DfLoadDataProcess#execute():135) - *                   *
2025-10-07 17:59:00,945 [main] INFO  (DfLoadDataProcess#execute():136) - * Load Data         *
2025-10-07 17:59:00,945 [main] INFO  (DfLoadDataProcess#execute():137) - *                   *
2025-10-07 17:59:00,945 [main] INFO  (DfLoadDataProcess#execute():138) - * * * * * * * * * * *
2025-10-07 17:59:00,953 [main] INFO  (DfTakeFinallyProcess#takeFinally():244) - 
2025-10-07 17:59:00,953 [main] INFO  (DfTakeFinallyProcess#takeFinally():245) - * * * * * * * **
2025-10-07 17:59:00,953 [main] INFO  (DfTakeFinallyProcess#takeFinally():246) - *              *
2025-10-07 17:59:00,953 [main] INFO  (DfTakeFinallyProcess#takeFinally():247) - * Take Finally *
2025-10-07 17:59:00,953 [main] INFO  (DfTakeFinallyProcess#takeFinally():248) - *              *
2025-10-07 17:59:00,954 [main] INFO  (DfTakeFinallyProcess#takeFinally():249) - * * * * * * * **
2025-10-07 17:59:00,955 [main] INFO  (DfSqlFileFireMan#fire():68) - ...Firing: take-finally.sql
2025-10-07 17:59:00,956 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=0 failure=0
2025-10-07 17:59:00,956 [main] INFO  (DfSqlFileFireMan#fire():93) - Take Finally: success=0, failure=0 (in 1 files)
2025-10-07 17:59:00,957 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2025-10-07 17:59:00,961 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m04s145ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 8.0.43)
    language  = java
    container = spring
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {password=, user=root}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 Create Schema: success=44, failure=0 (in 2 files) - 00m00s432ms
  (Create Schema) - 00m00s429ms
  o replace-schema-00-system.sql
  o replace-schema-10-basic.sql

 Load Data: *empty loading - 00m00s007ms
  - (no data file)

 Take Finally: success=0, failure=0 (in 1 files) - 00m00s004ms
  o take-finally.sql
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2025-10-07 18:10:02,662 [main] INFO  (TorqueJDBCTransformTask#begin():104) - +------------------------------------------+
2025-10-07 18:10:02,663 [main] INFO  (TorqueJDBCTransformTask#begin():105) - |                                          |
2025-10-07 18:10:02,663 [main] INFO  (TorqueJDBCTransformTask#begin():106) - |                   JDBC                   |
2025-10-07 18:10:02,663 [main] INFO  (TorqueJDBCTransformTask#begin():107) - |                                          |
2025-10-07 18:10:02,663 [main] INFO  (TorqueJDBCTransformTask#begin():108) - +------------------------------------------+
2025-10-07 18:10:02,673 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2025-10-07 18:10:02,673 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2025-10-07 18:10:02,673 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
2025-10-07 18:10:02,673 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2025-10-07 18:10:02,686 [main] INFO  (DfSchemaXmlSerializer#serialize():305) - 
2025-10-07 18:10:02,686 [main] INFO  (DfSchemaXmlSerializer#serialize():306) - ...Starting to process JDBC to SchemaXML
2025-10-07 18:10:02,687 [main] INFO  (DfSchemaXmlSerializer#doLoadPreviousSchema():1559) - ...Loading previous schema (schema diff process)
2025-10-07 18:10:02,690 [main] INFO  (DfSchemaXmlSerializer#doLoadPreviousSchema():1562) -  -> no previous (first time)
2025-10-07 18:10:02,695 [main] INFO  (DfSchemaXmlSerializer#generateXML():379) - ...Getting DB connection
2025-10-07 18:10:02,699 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2025-10-07 18:10:02,970 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 8.0.43
2025-10-07 18:10:02,970 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.49 ( Revision: ad86f36e100e104cd926c6b81c8cab9565750116 ) for JDBC 4.0
2025-10-07 18:10:02,971 [main] INFO  (DfSchemaXmlSerializer#generateXML():382) - ...Getting DB meta data
2025-10-07 18:10:02,972 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-07 18:10:02,972 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-07 18:10:02,972 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-07 18:10:02,985 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2025-10-07 18:10:02,990 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2025-10-07 18:10:03,001 [main] INFO  (DfDatetimePrecisionExtractorMySQL#extractDatetimePrecisionMap():59) - select TABLE_NAME, COLUMN_NAME, DATETIME_PRECISION from INFORMATION_SCHEMA.COLUMNS where TABLE_SCHEMA = 'maihamadb' and DATA_TYPE = 'datetime'
2025-10-07 18:10:03,010 [main] INFO  (DfSchemaXmlSerializer#processTable():438) - 
2025-10-07 18:10:03,010 [main] INFO  (DfSchemaXmlSerializer#processTable():439) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2025-10-07 18:10:03,010 [main] INFO  (DfSchemaXmlSerializer#processTable():440) - $ [Table List]
2025-10-07 18:10:03,011 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2025-10-07 18:10:03,043 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2025-10-07 18:10:03,063 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2025-10-07 18:10:03,078 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2025-10-07 18:10:03,095 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2025-10-07 18:10:03,115 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_status(TABLE) // 会員ステータス
2025-10-07 18:10:03,129 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2025-10-07 18:10:03,145 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.product(TABLE) // 商品
2025-10-07 18:10:03,163 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2025-10-07 18:10:03,174 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.product_status(TABLE) // 商品ステータス
2025-10-07 18:10:03,196 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2025-10-07 18:10:03,209 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2025-10-07 18:10:03,215 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2025-10-07 18:10:03,221 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2025-10-07 18:10:03,227 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2025-10-07 18:10:03,233 [main] INFO  (DfSchemaXmlSerializer#processTable():452) - $ 
2025-10-07 18:10:03,233 [main] INFO  (DfSchemaXmlSerializer#processTable():453) - $ [Table Count]
2025-10-07 18:10:03,233 [main] INFO  (DfSchemaXmlSerializer#processTable():454) - $ 15
2025-10-07 18:10:03,233 [main] INFO  (DfSchemaXmlSerializer#processTable():455) - $ = = = = = = = = = =/
2025-10-07 18:10:03,233 [main] INFO  (DfSchemaXmlSerializer#processTable():456) - 
2025-10-07 18:10:03,234 [main] INFO  (DfSchemaXmlSerializer#processSequence():823) - ...Getting sequences
2025-10-07 18:10:03,235 [main] INFO  (DfSchemaXmlSerializer#serialize():320) - ...Serializing XML:
2025-10-07 18:10:03,235 [main] INFO  (DfSchemaXmlSerializer#serialize():321) -   filePath = ./schema/project-schema-maihamadb.xml
2025-10-07 18:10:03,235 [main] INFO  (DfSchemaXmlSerializer#serialize():322) -   encoding = UTF-8
2025-10-07 18:10:03,245 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1570) - ...Loading next schema (schema diff process)
2025-10-07 18:10:03,249 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2025-10-07 18:10:03,479 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1575) -  -> different from previous (schema diff)
2025-10-07 18:10:03,480 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1577) - ...Serializing schema-diff:
2025-10-07 18:10:03,480 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1578) -   filePath = ./schema/project-history-maihamadb.diffmap
2025-10-07 18:10:03,486 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2025-10-07 18:10:03,490 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s831ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 8.0.43)
    language  = java
    container = spring
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {JDBC}
2025-10-07 18:11:01,504 [main] INFO  (TorqueDocumentationTask#begin():193) - +------------------------------------------+
2025-10-07 18:11:01,505 [main] INFO  (TorqueDocumentationTask#begin():194) - |                                          |
2025-10-07 18:11:01,506 [main] INFO  (TorqueDocumentationTask#begin():195) - |                   Doc                    |
2025-10-07 18:11:01,506 [main] INFO  (TorqueDocumentationTask#begin():203) - |                                          |
2025-10-07 18:11:01,506 [main] INFO  (TorqueDocumentationTask#begin():204) - +------------------------------------------+
2025-10-07 18:11:01,517 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2025-10-07 18:11:01,517 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2025-10-07 18:11:01,517 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
2025-10-07 18:11:01,517 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2025-10-07 18:11:01,518 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():265) - 
2025-10-07 18:11:01,518 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():266) - * * * * * * * * * * *
2025-10-07 18:11:01,518 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():267) - *                   *
2025-10-07 18:11:01,518 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():268) - *    Schema HTML    *
2025-10-07 18:11:01,518 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():269) - *                   *
2025-10-07 18:11:01,519 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():270) - * * * * * * * * * * *
2025-10-07 18:11:01,538 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2025-10-07 18:11:01,574 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2025-10-07 18:11:01,574 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2025-10-07 18:11:01,576 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2025-10-07 18:11:01,576 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2025-10-07 18:11:01,576 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2025-10-07 18:11:01,576 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2025-10-07 18:11:01,577 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2025-10-07 18:11:01,577 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2025-10-07 18:11:01,578 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2025-10-07 18:11:01,583 [main] INFO  (DfClsDeploymentInitializer#initializeClassificationDeployment():67) - ...Initializing ClassificationDeployment: project=maihamadb
2025-10-07 18:11:01,606 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("doc/ControlDocument.vm", ctx);
2025-10-07 18:11:01,610 [main] INFO  (DfFlutistLog4JLogSystem#init():45) - ...Suppressing velocity.log, which is unneeded for also debug
2025-10-07 18:11:01,652 [main] INFO  (Database#doEnableDocumentOutputDirectory():1241) - ...Setting up documentOutputDirectory: ./output/doc
2025-10-07 18:11:01,655 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():242) - ...Loading schema history
2025-10-07 18:11:01,664 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():246) -  -> found history: count=1
2025-10-07 18:11:01,684 [main] INFO  (DfSchemaHtmlDataArrangeQuery#getArrangeQueryTableMap():50) -  
2025-10-07 18:11:01,684 [main] INFO  (DfSchemaHtmlDataArrangeQuery#getArrangeQueryTableMap():51) - ...Setting up arrange queries for documents (ArrangeQueryDoc)
2025-10-07 18:11:01,694 [main] INFO  (DfArrangeQueryDocSetupper#doExtractArrangeQuery():106) -  -> no arrange query
2025-10-07 18:11:01,805 [main] INFO  (DfRefreshResourceProcess#show():295) - /===========================================================================
2025-10-07 18:11:01,805 [main] INFO  (DfRefreshResourceProcess#show():295) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2025-10-07 18:11:01,821 [main] INFO  (DfRefreshResourceProcess#show():295) - ...Retrying refreshing by default secondary URL http://localhost:8387/
2025-10-07 18:11:01,822 [main] INFO  (DfRefreshResourceProcess#show():295) - Failed to refresh the resources (continued): url=http://localhost:8386/, cause=ConnectException(Connection refused)
2025-10-07 18:11:01,822 [main] INFO  (DfRefreshResourceProcess#show():295) - ==========/
2025-10-07 18:11:01,823 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s324ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = spring
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Doc}
2025-10-07 18:11:47,343 [main] INFO  (TorqueDataModelTask#begin():110) - +------------------------------------------+
2025-10-07 18:11:47,344 [main] INFO  (TorqueDataModelTask#begin():111) - |                                          |
2025-10-07 18:11:47,344 [main] INFO  (TorqueDataModelTask#begin():112) - |                 Generate                 |
2025-10-07 18:11:47,344 [main] INFO  (TorqueDataModelTask#begin():113) - |                                          |
2025-10-07 18:11:47,344 [main] INFO  (TorqueDataModelTask#begin():114) - +------------------------------------------+
2025-10-07 18:11:47,352 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2025-10-07 18:11:47,352 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2025-10-07 18:11:47,352 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
2025-10-07 18:11:47,352 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2025-10-07 18:11:47,357 [main] INFO  (TorqueDataModelTask#setupControlTemplate():166) - 
2025-10-07 18:11:47,358 [main] INFO  (TorqueDataModelTask#setupControlTemplate():167) - ...Using Java control: om/ControlGenerateJava.vm
2025-10-07 18:11:47,369 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2025-10-07 18:11:47,404 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlGenerateJava.vm", ctx);
2025-10-07 18:11:47,407 [main] INFO  (DfFlutistLog4JLogSystem#init():45) - ...Suppressing velocity.log, which is unneeded for also debug
2025-10-07 18:11:47,469 [main] INFO  (Database#doEnableGenerateOutputDirectory():1209) - ...Setting up generateOutputDirectory: ../src/main/java
2025-10-07 18:11:47,470 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2025-10-07 18:11:47,470 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2025-10-07 18:11:47,470 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2025-10-07 18:11:47,471 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2025-10-07 18:11:47,471 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2025-10-07 18:11:47,471 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2025-10-07 18:11:47,471 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2025-10-07 18:11:47,472 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2025-10-07 18:11:47,472 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2025-10-07 18:11:47,477 [main] INFO  (DfClsDeploymentInitializer#initializeClassificationDeployment():67) - ...Initializing ClassificationDeployment: project=maihamadb
2025-10-07 18:11:47,478 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():58) - /=============================
2025-10-07 18:11:47,479 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():59) - ...Initializing include query.
2025-10-07 18:11:47,479 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - String
2025-10-07 18:11:47,479 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Number
2025-10-07 18:11:47,479 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Date
2025-10-07 18:11:47,479 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotEqual -> []
2025-10-07 18:11:47,479 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   InScope -> []
2025-10-07 18:11:47,479 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotInScope -> []
2025-10-07 18:11:47,479 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - OrderBy
2025-10-07 18:11:47,479 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():61) - ========/
2025-10-07 18:11:47,483 [main] INFO  (Database#info():2872) - public void parseAllCommon() {
2025-10-07 18:11:47,484 [main] INFO  (Database#info():2872) -     parse('DBCurrent');
2025-10-07 18:11:47,487 [main] INFO  (Database#info():2872) -     parse('DBFluteConfig');
2025-10-07 18:11:47,493 [main] INFO  (Database#info():2872) -     parse('DBFluteInitializer');
2025-10-07 18:11:47,495 [main] INFO  (Database#info():2872) -     parse('DBMetaInstanceHandler');
2025-10-07 18:11:47,504 [main] INFO  (Database#info():2872) -     parse('EntityDefinedCommonColumn');
2025-10-07 18:11:47,506 [main] INFO  (Database#info():2872) -     parse('ImplementedBehaviorSelector');
2025-10-07 18:11:47,508 [main] INFO  (Database#info():2872) -     parse('ImplementedCommonColumnAutoSetupper');
2025-10-07 18:11:47,510 [main] INFO  (Database#info():2872) -     parse('ImplementedInvokerAssistant');
2025-10-07 18:11:47,513 [main] INFO  (Database#info():2872) -     parse('ImplementedSqlClauseCreator');
2025-10-07 18:11:47,517 [main] INFO  (Database#info():2872) - }
2025-10-07 18:11:47,517 [main] INFO  (Database#info():2872) - public void parseContainerConfig() {
2025-10-07 18:11:47,517 [main] INFO  (Database#info():2872) -     parse('org/docksidestage/handson/dbflute/allcommon/DBFluteBeansJavaConfig.java')
2025-10-07 18:11:47,521 [main] INFO  (Database#info():2872) - }
2025-10-07 18:11:47,524 [main] INFO  (DfOldClassHandler#info():1045) - public void deleteOldTableClass() {
2025-10-07 18:11:47,532 [main] INFO  (DfOldClassHandler#info():1045) - }
2025-10-07 18:11:47,532 [main] INFO  (Database#info():2872) - public void parseTableClass() {
2025-10-07 18:11:47,532 [main] INFO  (Database#info():2872) -     parse('member');
2025-10-07 18:11:47,661 [main] INFO  (Database#info():2872) -     parse('member_address');
2025-10-07 18:11:47,731 [main] INFO  (Database#info():2872) -     parse('member_login');
2025-10-07 18:11:47,785 [main] INFO  (Database#info():2872) -     parse('member_security');
2025-10-07 18:11:47,829 [main] INFO  (Database#info():2872) -     parse('member_service');
2025-10-07 18:11:47,878 [main] INFO  (Database#info():2872) -     parse('member_status');
2025-10-07 18:11:47,920 [main] INFO  (Database#info():2872) -     parse('member_withdrawal');
2025-10-07 18:11:47,966 [main] INFO  (Database#info():2872) -     parse('product');
2025-10-07 18:11:48,017 [main] INFO  (Database#info():2872) -     parse('product_category');
2025-10-07 18:11:48,063 [main] INFO  (Database#info():2872) -     parse('product_status');
2025-10-07 18:11:48,095 [main] INFO  (Database#info():2872) -     parse('purchase');
2025-10-07 18:11:48,139 [main] INFO  (Database#info():2872) -     parse('purchase_payment');
2025-10-07 18:11:48,172 [main] INFO  (Database#info():2872) -     parse('region');
2025-10-07 18:11:48,201 [main] INFO  (Database#info():2872) -     parse('service_rank');
2025-10-07 18:11:48,234 [main] INFO  (Database#info():2872) -     parse('withdrawal_reason');
2025-10-07 18:11:48,266 [main] INFO  (Database#info():2872) - }
2025-10-07 18:11:48,266 [main] INFO  (Database#info():2872) -  
2025-10-07 18:11:48,290 [main] INFO  (DfRefreshResourceProcess#show():295) - /===========================================================================
2025-10-07 18:11:48,291 [main] INFO  (DfRefreshResourceProcess#show():295) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2025-10-07 18:11:48,303 [main] INFO  (DfRefreshResourceProcess#show():295) - ...Retrying refreshing by default secondary URL http://localhost:8387/
2025-10-07 18:11:48,303 [main] INFO  (DfRefreshResourceProcess#show():295) - Failed to refresh the resources (continued): url=http://localhost:8386/, cause=ConnectException(Connection refused)
2025-10-07 18:11:48,304 [main] INFO  (DfRefreshResourceProcess#show():295) - ==========/
2025-10-07 18:11:48,305 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s968ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = spring
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Generate}
2025-10-07 19:52:43,955 [main] INFO  (DfReplaceSchemaTask#begin():94) - +------------------------------------------+
2025-10-07 19:52:43,956 [main] INFO  (DfReplaceSchemaTask#begin():95) - |                                          |
2025-10-07 19:52:43,956 [main] INFO  (DfReplaceSchemaTask#begin():96) - |              ReplaceSchema               |
2025-10-07 19:52:43,958 [main] INFO  (DfReplaceSchemaTask#begin():104) - |                                          |
2025-10-07 19:52:43,958 [main] INFO  (DfReplaceSchemaTask#begin():105) - +------------------------------------------+
2025-10-07 19:52:43,958 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():423) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2025-10-07 19:52:46,023 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2025-10-07 19:52:46,023 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2025-10-07 19:52:46,023 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
2025-10-07 19:52:46,023 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2025-10-07 19:52:46,030 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2025-10-07 19:52:46,319 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 8.0.43
2025-10-07 19:52:46,319 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.49 ( Revision: ad86f36e100e104cd926c6b81c8cab9565750116 ) for JDBC 4.0
2025-10-07 19:52:46,326 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():253) - 
2025-10-07 19:52:46,326 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():254) - * * * * * * * * * * *
2025-10-07 19:52:46,326 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():255) - *                   *
2025-10-07 19:52:46,326 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():256) - * Initialize Schema *
2025-10-07 19:52:46,326 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():257) - *                   *
2025-10-07 19:52:46,326 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():258) - * * * * * * * * * * *
2025-10-07 19:52:46,330 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-07 19:52:46,331 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-07 19:52:46,331 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-07 19:52:46,375 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_address
2025-10-07 19:52:46,388 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_login
2025-10-07 19:52:46,392 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_security
2025-10-07 19:52:46,398 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_service
2025-10-07 19:52:46,404 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_withdrawal
2025-10-07 19:52:46,412 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table purchase_payment
2025-10-07 19:52:46,422 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table `member` drop foreign key FK_MEMBER_MEMBER_STATUS
2025-10-07 19:52:46,440 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2025-10-07 19:52:46,446 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2025-10-07 19:52:46,452 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2025-10-07 19:52:46,457 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2025-10-07 19:52:46,463 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2025-10-07 19:52:46,471 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2025-10-07 19:52:46,476 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2025-10-07 19:52:46,483 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2025-10-07 19:52:46,487 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2025-10-07 19:52:46,493 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2025-10-07 19:52:46,500 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2025-10-07 19:52:46,507 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2025-10-07 19:52:46,513 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2025-10-07 19:52:46,520 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2025-10-07 19:52:46,528 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2025-10-07 19:52:46,535 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table `member`
2025-10-07 19:52:46,538 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_address
2025-10-07 19:52:46,541 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_login
2025-10-07 19:52:46,543 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_security
2025-10-07 19:52:46,546 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_service
2025-10-07 19:52:46,549 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_status
2025-10-07 19:52:46,552 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_withdrawal
2025-10-07 19:52:46,555 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table product
2025-10-07 19:52:46,558 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table product_category
2025-10-07 19:52:46,561 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table product_status
2025-10-07 19:52:46,563 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table purchase
2025-10-07 19:52:46,566 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table purchase_payment
2025-10-07 19:52:46,569 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table region
2025-10-07 19:52:46,572 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table service_rank
2025-10-07 19:52:46,575 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table withdrawal_reason
2025-10-07 19:52:46,589 [main] INFO  (DfCreateSchemaProcess#createSchema():293) - 
2025-10-07 19:52:46,589 [main] INFO  (DfCreateSchemaProcess#createSchema():294) - * * * * * * * * *
2025-10-07 19:52:46,589 [main] INFO  (DfCreateSchemaProcess#createSchema():295) - *               *
2025-10-07 19:52:46,590 [main] INFO  (DfCreateSchemaProcess#createSchema():296) - * Create Schema *
2025-10-07 19:52:46,590 [main] INFO  (DfCreateSchemaProcess#createSchema():297) - *               *
2025-10-07 19:52:46,590 [main] INFO  (DfCreateSchemaProcess#createSchema():298) - * * * * * * * * *
2025-10-07 19:52:46,592 [main] INFO  (DfSqlFileFireMan#fire():68) - ...Firing: replace-schema-00-system.sql
2025-10-07 19:52:46,593 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2025-10-07 19:52:46,593 [main] INFO  (DfCreateSchemaProcess$1#dispatch():325) - ...Creating a connection to system
2025-10-07 19:52:46,593 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():539) - ...Creating a connection for additional user: root
2025-10-07 19:52:46,612 [main] INFO  (DfCreateSchemaProcess$1#dispatch():351) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2025-10-07 19:52:46,613 [main] INFO  (DfCreateSchemaProcess$1#dispatch():353) -  -> Can't create database 'maihamadb'; database exists
2025-10-07 19:52:46,613 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():463) - ...Reviving the user 'system' until the end of this SQL file
2025-10-07 19:52:46,613 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
create user maihamadb@localhost identified by 'maihamadb'
2025-10-07 19:52:46,617 [main] INFO  (DfCreateSchemaProcess$1#dispatch():351) - ...Saying good-bye to the user 'system' because of checked: [mainUser, grant]
2025-10-07 19:52:46,617 [main] INFO  (DfCreateSchemaProcess$1#dispatch():353) -  -> Operation CREATE USER failed for 'maihamadb'@'localhost'
2025-10-07 19:52:46,617 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():463) - ...Reviving the user 'system' until the end of this SQL file
2025-10-07 19:52:46,617 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.* to maihamadb@localhost
2025-10-07 19:52:46,618 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2025-10-07 19:52:46,620 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2025-10-07 19:52:46,620 [main] INFO  (DfSqlFileFireMan#fire():68) - ...Firing: replace-schema-10-basic.sql
2025-10-07 19:52:46,620 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():400) - ...Saying good-bye to the user 'system' again
2025-10-07 19:52:46,621 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():404) - ...Clearing revived users
2025-10-07 19:52:46,621 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():411) - ...Coming back to the main user from the user 'system'
2025-10-07 19:52:46,623 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table `MEMBER`(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2025-10-07 19:52:46,630 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2025-10-07 19:52:46,635 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2025-10-07 19:52:46,640 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2025-10-07 19:52:46,644 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    AKIRAKANI_OKASHII_KARAMU_MEI INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2025-10-07 19:52:46,648 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2025-10-07 19:52:46,652 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2025-10-07 19:52:46,658 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2025-10-07 19:52:46,663 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2025-10-07 19:52:46,668 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2025-10-07 19:52:46,671 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2025-10-07 19:52:46,675 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2025-10-07 19:52:46,680 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2025-10-07 19:52:46,684 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2025-10-07 19:52:46,688 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2025-10-07 19:52:46,691 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table `MEMBER` add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2025-10-07 19:52:46,702 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-07 19:52:46,712 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2025-10-07 19:52:46,723 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2025-10-07 19:52:46,734 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-07 19:52:46,746 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-07 19:52:46,759 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2025-10-07 19:52:46,770 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-07 19:52:46,781 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-07 19:52:46,792 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2025-10-07 19:52:46,803 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-07 19:52:46,815 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2025-10-07 19:52:46,827 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2025-10-07 19:52:46,838 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2025-10-07 19:52:46,851 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2025-10-07 19:52:46,864 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2025-10-07 19:52:46,873 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on `MEMBER`(MEMBER_NAME)
2025-10-07 19:52:46,885 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on `MEMBER`(FORMALIZED_DATETIME)
2025-10-07 19:52:46,898 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2025-10-07 19:52:46,902 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(AKIRAKANI_OKASHII_KARAMU_MEI)
2025-10-07 19:52:46,906 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2025-10-07 19:52:46,913 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2025-10-07 19:52:46,921 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2025-10-07 19:52:46,928 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2025-10-07 19:52:46,932 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2025-10-07 19:52:46,940 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=40 failure=0
2025-10-07 19:52:46,940 [main] INFO  (DfSqlFileFireMan#fire():93) - Create Schema: success=42, failure=0 (in 2 files)
2025-10-07 19:52:46,940 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():594) - ...Closing connections to change-users: [system]
2025-10-07 19:52:46,957 [main] INFO  (DfLoadDataProcess#execute():133) - 
2025-10-07 19:52:46,957 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2025-10-07 19:52:46,957 [main] INFO  (DfLoadDataProcess#execute():135) - *                   *
2025-10-07 19:52:46,957 [main] INFO  (DfLoadDataProcess#execute():136) - * Load Data         *
2025-10-07 19:52:46,957 [main] INFO  (DfLoadDataProcess#execute():137) - *                   *
2025-10-07 19:52:46,957 [main] INFO  (DfLoadDataProcess#execute():138) - * * * * * * * * * * *
2025-10-07 19:52:46,964 [main] INFO  (DfTakeFinallyProcess#takeFinally():244) - 
2025-10-07 19:52:46,965 [main] INFO  (DfTakeFinallyProcess#takeFinally():245) - * * * * * * * **
2025-10-07 19:52:46,965 [main] INFO  (DfTakeFinallyProcess#takeFinally():246) - *              *
2025-10-07 19:52:46,965 [main] INFO  (DfTakeFinallyProcess#takeFinally():247) - * Take Finally *
2025-10-07 19:52:46,965 [main] INFO  (DfTakeFinallyProcess#takeFinally():248) - *              *
2025-10-07 19:52:46,965 [main] INFO  (DfTakeFinallyProcess#takeFinally():249) - * * * * * * * **
2025-10-07 19:52:46,966 [main] INFO  (DfSqlFileFireMan#fire():68) - ...Firing: take-finally.sql
2025-10-07 19:52:46,967 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=0 failure=0
2025-10-07 19:52:46,967 [main] INFO  (DfSqlFileFireMan#fire():93) - Take Finally: success=0, failure=0 (in 1 files)
2025-10-07 19:52:46,968 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2025-10-07 19:52:46,970 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m03s021ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 8.0.43)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {password=, user=root}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 Create Schema: success=42, failure=0 (in 2 files) - 00m00s618ms
  (Initialize Schema) - 00m00s263ms
  (Create Schema) - 00m00s353ms
  o replace-schema-00-system.sql
  o replace-schema-10-basic.sql

 Load Data: *empty loading - 00m00s007ms
  - (no data file)

 Take Finally: success=0, failure=0 (in 1 files) - 00m00s004ms
  o take-finally.sql
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2025-10-07 19:53:07,989 [main] INFO  (TorqueJDBCTransformTask#begin():104) - +------------------------------------------+
2025-10-07 19:53:07,990 [main] INFO  (TorqueJDBCTransformTask#begin():105) - |                                          |
2025-10-07 19:53:07,991 [main] INFO  (TorqueJDBCTransformTask#begin():106) - |                   JDBC                   |
2025-10-07 19:53:07,991 [main] INFO  (TorqueJDBCTransformTask#begin():107) - |                                          |
2025-10-07 19:53:07,991 [main] INFO  (TorqueJDBCTransformTask#begin():108) - +------------------------------------------+
2025-10-07 19:53:08,000 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2025-10-07 19:53:08,000 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2025-10-07 19:53:08,000 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
2025-10-07 19:53:08,000 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2025-10-07 19:53:08,015 [main] INFO  (DfSchemaXmlSerializer#serialize():305) - 
2025-10-07 19:53:08,015 [main] INFO  (DfSchemaXmlSerializer#serialize():306) - ...Starting to process JDBC to SchemaXML
2025-10-07 19:53:08,015 [main] INFO  (DfSchemaXmlSerializer#doLoadPreviousSchema():1559) - ...Loading previous schema (schema diff process)
2025-10-07 19:53:08,019 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2025-10-07 19:53:08,060 [main] INFO  (DfSchemaXmlSerializer#generateXML():379) - ...Getting DB connection
2025-10-07 19:53:08,064 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2025-10-07 19:53:08,342 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 8.0.43
2025-10-07 19:53:08,342 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.49 ( Revision: ad86f36e100e104cd926c6b81c8cab9565750116 ) for JDBC 4.0
2025-10-07 19:53:08,342 [main] INFO  (DfSchemaXmlSerializer#generateXML():382) - ...Getting DB meta data
2025-10-07 19:53:08,344 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-07 19:53:08,344 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-07 19:53:08,344 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-07 19:53:08,352 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2025-10-07 19:53:08,356 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2025-10-07 19:53:08,364 [main] INFO  (DfDatetimePrecisionExtractorMySQL#extractDatetimePrecisionMap():59) - select TABLE_NAME, COLUMN_NAME, DATETIME_PRECISION from INFORMATION_SCHEMA.COLUMNS where TABLE_SCHEMA = 'maihamadb' and DATA_TYPE = 'datetime'
2025-10-07 19:53:08,373 [main] INFO  (DfSchemaXmlSerializer#processTable():438) - 
2025-10-07 19:53:08,373 [main] INFO  (DfSchemaXmlSerializer#processTable():439) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2025-10-07 19:53:08,373 [main] INFO  (DfSchemaXmlSerializer#processTable():440) - $ [Table List]
2025-10-07 19:53:08,373 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2025-10-07 19:53:08,411 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2025-10-07 19:53:08,441 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2025-10-07 19:53:08,461 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2025-10-07 19:53:08,486 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2025-10-07 19:53:08,504 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_status(TABLE) // 会員ステータス
2025-10-07 19:53:08,519 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2025-10-07 19:53:08,533 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.product(TABLE) // 商品
2025-10-07 19:53:08,548 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2025-10-07 19:53:08,556 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.product_status(TABLE) // 商品ステータス
2025-10-07 19:53:08,570 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2025-10-07 19:53:08,578 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2025-10-07 19:53:08,585 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2025-10-07 19:53:08,591 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2025-10-07 19:53:08,599 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2025-10-07 19:53:08,606 [main] INFO  (DfSchemaXmlSerializer#processTable():452) - $ 
2025-10-07 19:53:08,606 [main] INFO  (DfSchemaXmlSerializer#processTable():453) - $ [Table Count]
2025-10-07 19:53:08,606 [main] INFO  (DfSchemaXmlSerializer#processTable():454) - $ 15
2025-10-07 19:53:08,606 [main] INFO  (DfSchemaXmlSerializer#processTable():455) - $ = = = = = = = = = =/
2025-10-07 19:53:08,606 [main] INFO  (DfSchemaXmlSerializer#processTable():456) - 
2025-10-07 19:53:08,607 [main] INFO  (DfSchemaXmlSerializer#processSequence():823) - ...Getting sequences
2025-10-07 19:53:08,608 [main] INFO  (DfSchemaXmlSerializer#serialize():320) - ...Serializing XML:
2025-10-07 19:53:08,609 [main] INFO  (DfSchemaXmlSerializer#serialize():321) -   filePath = ./schema/project-schema-maihamadb.xml
2025-10-07 19:53:08,609 [main] INFO  (DfSchemaXmlSerializer#serialize():322) -   encoding = UTF-8
2025-10-07 19:53:08,620 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1570) - ...Loading next schema (schema diff process)
2025-10-07 19:53:08,621 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2025-10-07 19:53:08,660 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1585) -  -> same as previous (schema diff)
2025-10-07 19:53:08,661 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2025-10-07 19:53:08,666 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s679ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 8.0.43)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {JDBC}
2025-10-07 19:53:12,451 [main] INFO  (TorqueDocumentationTask#begin():193) - +------------------------------------------+
2025-10-07 19:53:12,452 [main] INFO  (TorqueDocumentationTask#begin():194) - |                                          |
2025-10-07 19:53:12,452 [main] INFO  (TorqueDocumentationTask#begin():195) - |                   Doc                    |
2025-10-07 19:53:12,452 [main] INFO  (TorqueDocumentationTask#begin():203) - |                                          |
2025-10-07 19:53:12,452 [main] INFO  (TorqueDocumentationTask#begin():204) - +------------------------------------------+
2025-10-07 19:53:12,460 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2025-10-07 19:53:12,460 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2025-10-07 19:53:12,460 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
2025-10-07 19:53:12,460 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2025-10-07 19:53:12,461 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():265) - 
2025-10-07 19:53:12,461 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():266) - * * * * * * * * * * *
2025-10-07 19:53:12,461 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():267) - *                   *
2025-10-07 19:53:12,461 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():268) - *    Schema HTML    *
2025-10-07 19:53:12,461 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():269) - *                   *
2025-10-07 19:53:12,461 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():270) - * * * * * * * * * * *
2025-10-07 19:53:12,479 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2025-10-07 19:53:12,511 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2025-10-07 19:53:12,511 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2025-10-07 19:53:12,513 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2025-10-07 19:53:12,513 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2025-10-07 19:53:12,514 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2025-10-07 19:53:12,514 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2025-10-07 19:53:12,514 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2025-10-07 19:53:12,515 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2025-10-07 19:53:12,516 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2025-10-07 19:53:12,521 [main] INFO  (DfClsDeploymentInitializer#initializeClassificationDeployment():67) - ...Initializing ClassificationDeployment: project=maihamadb
2025-10-07 19:53:12,539 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("doc/ControlDocument.vm", ctx);
2025-10-07 19:53:12,543 [main] INFO  (DfFlutistLog4JLogSystem#init():45) - ...Suppressing velocity.log, which is unneeded for also debug
2025-10-07 19:53:12,584 [main] INFO  (Database#doEnableDocumentOutputDirectory():1241) - ...Setting up documentOutputDirectory: ./output/doc
2025-10-07 19:53:12,586 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():242) - ...Loading schema history
2025-10-07 19:53:12,594 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():246) -  -> found history: count=1
2025-10-07 19:53:12,614 [main] INFO  (DfSchemaHtmlDataArrangeQuery#getArrangeQueryTableMap():50) -  
2025-10-07 19:53:12,614 [main] INFO  (DfSchemaHtmlDataArrangeQuery#getArrangeQueryTableMap():51) - ...Setting up arrange queries for documents (ArrangeQueryDoc)
2025-10-07 19:53:12,631 [main] INFO  (DfArrangeQueryDocSetupper#doExtractArrangeQuery():106) -  -> no arrange query
2025-10-07 19:53:12,744 [main] INFO  (DfRefreshResourceProcess#show():295) - /===========================================================================
2025-10-07 19:53:12,744 [main] INFO  (DfRefreshResourceProcess#show():295) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2025-10-07 19:53:12,756 [main] INFO  (DfRefreshResourceProcess#show():295) - ...Retrying refreshing by default secondary URL http://localhost:8387/
2025-10-07 19:53:12,756 [main] INFO  (DfRefreshResourceProcess#show():295) - Failed to refresh the resources (continued): url=http://localhost:8386/, cause=ConnectException(Connection refused)
2025-10-07 19:53:12,756 [main] INFO  (DfRefreshResourceProcess#show():295) - ==========/
2025-10-07 19:53:12,757 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s310ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Doc}
2025-10-07 19:53:16,787 [main] INFO  (TorqueDataModelTask#begin():110) - +------------------------------------------+
2025-10-07 19:53:16,788 [main] INFO  (TorqueDataModelTask#begin():111) - |                                          |
2025-10-07 19:53:16,788 [main] INFO  (TorqueDataModelTask#begin():112) - |                 Generate                 |
2025-10-07 19:53:16,788 [main] INFO  (TorqueDataModelTask#begin():113) - |                                          |
2025-10-07 19:53:16,788 [main] INFO  (TorqueDataModelTask#begin():114) - +------------------------------------------+
2025-10-07 19:53:16,800 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2025-10-07 19:53:16,800 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2025-10-07 19:53:16,800 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
2025-10-07 19:53:16,801 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2025-10-07 19:53:16,805 [main] INFO  (TorqueDataModelTask#setupControlTemplate():166) - 
2025-10-07 19:53:16,805 [main] INFO  (TorqueDataModelTask#setupControlTemplate():167) - ...Using Java control: om/ControlGenerateJava.vm
2025-10-07 19:53:16,816 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2025-10-07 19:53:16,849 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlGenerateJava.vm", ctx);
2025-10-07 19:53:16,853 [main] INFO  (DfFlutistLog4JLogSystem#init():45) - ...Suppressing velocity.log, which is unneeded for also debug
2025-10-07 19:53:16,914 [main] INFO  (Database#doEnableGenerateOutputDirectory():1209) - ...Setting up generateOutputDirectory: ../src/main/java
2025-10-07 19:53:16,915 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2025-10-07 19:53:16,915 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2025-10-07 19:53:16,916 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2025-10-07 19:53:16,916 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2025-10-07 19:53:16,916 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2025-10-07 19:53:16,917 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2025-10-07 19:53:16,917 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2025-10-07 19:53:16,917 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2025-10-07 19:53:16,918 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2025-10-07 19:53:16,923 [main] INFO  (DfClsDeploymentInitializer#initializeClassificationDeployment():67) - ...Initializing ClassificationDeployment: project=maihamadb
2025-10-07 19:53:16,925 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():58) - /=============================
2025-10-07 19:53:16,925 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():59) - ...Initializing include query.
2025-10-07 19:53:16,925 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - String
2025-10-07 19:53:16,925 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Number
2025-10-07 19:53:16,925 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Date
2025-10-07 19:53:16,925 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotEqual -> []
2025-10-07 19:53:16,925 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   InScope -> []
2025-10-07 19:53:16,925 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotInScope -> []
2025-10-07 19:53:16,925 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - OrderBy
2025-10-07 19:53:16,925 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():61) - ========/
2025-10-07 19:53:16,930 [main] INFO  (Database#info():2872) - public void parseAllCommon() {
2025-10-07 19:53:16,930 [main] INFO  (Database#info():2872) -     parse('DBCurrent');
2025-10-07 19:53:16,933 [main] INFO  (Database#info():2872) -     parse('DBFluteConfig');
2025-10-07 19:53:16,941 [main] INFO  (Database#info():2872) -     parse('DBFluteInitializer');
2025-10-07 19:53:16,944 [main] INFO  (Database#info():2872) -     parse('DBMetaInstanceHandler');
2025-10-07 19:53:16,952 [main] INFO  (Database#info():2872) -     parse('EntityDefinedCommonColumn');
2025-10-07 19:53:16,954 [main] INFO  (Database#info():2872) -     parse('ImplementedBehaviorSelector');
2025-10-07 19:53:16,957 [main] INFO  (Database#info():2872) -     parse('ImplementedCommonColumnAutoSetupper');
2025-10-07 19:53:16,959 [main] INFO  (Database#info():2872) -     parse('ImplementedInvokerAssistant');
2025-10-07 19:53:16,963 [main] INFO  (Database#info():2872) -     parse('ImplementedSqlClauseCreator');
2025-10-07 19:53:16,964 [main] INFO  (Database#info():2872) - }
2025-10-07 19:53:16,965 [main] INFO  (Database#info():2872) - public void parseContainerConfig() {
2025-10-07 19:53:16,965 [main] INFO  (Database#info():2872) -     parse('../resources/dbflute.xml')
2025-10-07 19:53:16,970 [main] INFO  (Database#info():2872) - }
2025-10-07 19:53:16,971 [main] INFO  (DfOldClassHandler#info():1045) - public void deleteOldTableClass() {
2025-10-07 19:53:16,980 [main] INFO  (DfOldClassHandler#info():1045) - }
2025-10-07 19:53:16,980 [main] INFO  (Database#info():2872) - public void parseTableClass() {
2025-10-07 19:53:16,981 [main] INFO  (Database#info():2872) -     parse('member');
2025-10-07 19:53:17,113 [main] INFO  (Database#info():2872) -     parse('member_address');
2025-10-07 19:53:17,177 [main] INFO  (Database#info():2872) -     parse('member_login');
2025-10-07 19:53:17,231 [main] INFO  (Database#info():2872) -     parse('member_security');
2025-10-07 19:53:17,275 [main] INFO  (Database#info():2872) -     parse('member_service');
2025-10-07 19:53:17,321 [main] INFO  (Database#info():2872) -     parse('member_status');
2025-10-07 19:53:17,365 [main] INFO  (Database#info():2872) -     parse('member_withdrawal');
2025-10-07 19:53:17,408 [main] INFO  (Database#info():2872) -     parse('product');
2025-10-07 19:53:17,458 [main] INFO  (Database#info():2872) -     parse('product_category');
2025-10-07 19:53:17,505 [main] INFO  (Database#info():2872) -     parse('product_status');
2025-10-07 19:53:17,536 [main] INFO  (Database#info():2872) -     parse('purchase');
2025-10-07 19:53:17,584 [main] INFO  (Database#info():2872) -     parse('purchase_payment');
2025-10-07 19:53:17,620 [main] INFO  (Database#info():2872) -     parse('region');
2025-10-07 19:53:17,651 [main] INFO  (Database#info():2872) -     parse('service_rank');
2025-10-07 19:53:17,684 [main] INFO  (Database#info():2872) -     parse('withdrawal_reason');
2025-10-07 19:53:17,716 [main] INFO  (Database#info():2872) - }
2025-10-07 19:53:17,716 [main] INFO  (Database#info():2872) -  
2025-10-07 19:53:17,730 [main] INFO  (DfRefreshResourceProcess#show():295) - /===========================================================================
2025-10-07 19:53:17,730 [main] INFO  (DfRefreshResourceProcess#show():295) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2025-10-07 19:53:17,743 [main] INFO  (DfRefreshResourceProcess#show():295) - ...Retrying refreshing by default secondary URL http://localhost:8387/
2025-10-07 19:53:17,744 [main] INFO  (DfRefreshResourceProcess#show():295) - Failed to refresh the resources (continued): url=http://localhost:8386/, cause=ConnectException(Connection refused)
2025-10-07 19:53:17,744 [main] INFO  (DfRefreshResourceProcess#show():295) - ==========/
2025-10-07 19:53:17,746 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s963ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Generate}
2025-10-07 19:57:36,961 [main] INFO  (DfReplaceSchemaTask#begin():94) - +------------------------------------------+
2025-10-07 19:57:36,962 [main] INFO  (DfReplaceSchemaTask#begin():95) - |                                          |
2025-10-07 19:57:36,962 [main] INFO  (DfReplaceSchemaTask#begin():96) - |              ReplaceSchema               |
2025-10-07 19:57:36,964 [main] INFO  (DfReplaceSchemaTask#begin():104) - |                                          |
2025-10-07 19:57:36,964 [main] INFO  (DfReplaceSchemaTask#begin():105) - +------------------------------------------+
2025-10-07 19:57:36,965 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():423) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2025-10-07 19:57:38,652 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2025-10-07 19:57:38,653 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2025-10-07 19:57:38,653 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
2025-10-07 19:57:38,653 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2025-10-07 19:57:38,657 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2025-10-07 19:57:38,942 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 8.0.43
2025-10-07 19:57:38,943 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.49 ( Revision: ad86f36e100e104cd926c6b81c8cab9565750116 ) for JDBC 4.0
2025-10-07 19:57:38,949 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():253) - 
2025-10-07 19:57:38,949 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():254) - * * * * * * * * * * *
2025-10-07 19:57:38,949 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():255) - *                   *
2025-10-07 19:57:38,949 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():256) - * Initialize Schema *
2025-10-07 19:57:38,949 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():257) - *                   *
2025-10-07 19:57:38,950 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():258) - * * * * * * * * * * *
2025-10-07 19:57:38,954 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-07 19:57:38,954 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-07 19:57:38,954 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-07 19:57:38,992 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_address
2025-10-07 19:57:39,002 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_login
2025-10-07 19:57:39,006 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_security
2025-10-07 19:57:39,011 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_service
2025-10-07 19:57:39,016 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_withdrawal
2025-10-07 19:57:39,025 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table purchase_payment
2025-10-07 19:57:39,032 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table `member` drop foreign key FK_MEMBER_MEMBER_STATUS
2025-10-07 19:57:39,048 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2025-10-07 19:57:39,052 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2025-10-07 19:57:39,059 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2025-10-07 19:57:39,064 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2025-10-07 19:57:39,071 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2025-10-07 19:57:39,077 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2025-10-07 19:57:39,084 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2025-10-07 19:57:39,091 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2025-10-07 19:57:39,095 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2025-10-07 19:57:39,101 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2025-10-07 19:57:39,107 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2025-10-07 19:57:39,116 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2025-10-07 19:57:39,122 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2025-10-07 19:57:39,129 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2025-10-07 19:57:39,138 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2025-10-07 19:57:39,146 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table `member`
2025-10-07 19:57:39,150 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_address
2025-10-07 19:57:39,153 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_login
2025-10-07 19:57:39,155 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_security
2025-10-07 19:57:39,158 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_service
2025-10-07 19:57:39,161 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_status
2025-10-07 19:57:39,163 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_withdrawal
2025-10-07 19:57:39,166 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table product
2025-10-07 19:57:39,169 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table product_category
2025-10-07 19:57:39,172 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table product_status
2025-10-07 19:57:39,175 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table purchase
2025-10-07 19:57:39,179 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table purchase_payment
2025-10-07 19:57:39,181 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table region
2025-10-07 19:57:39,184 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table service_rank
2025-10-07 19:57:39,187 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table withdrawal_reason
2025-10-07 19:57:39,202 [main] INFO  (DfCreateSchemaProcess#createSchema():293) - 
2025-10-07 19:57:39,202 [main] INFO  (DfCreateSchemaProcess#createSchema():294) - * * * * * * * * *
2025-10-07 19:57:39,202 [main] INFO  (DfCreateSchemaProcess#createSchema():295) - *               *
2025-10-07 19:57:39,202 [main] INFO  (DfCreateSchemaProcess#createSchema():296) - * Create Schema *
2025-10-07 19:57:39,202 [main] INFO  (DfCreateSchemaProcess#createSchema():297) - *               *
2025-10-07 19:57:39,203 [main] INFO  (DfCreateSchemaProcess#createSchema():298) - * * * * * * * * *
2025-10-07 19:57:39,204 [main] INFO  (DfSqlFileFireMan#fire():68) - ...Firing: replace-schema-00-system.sql
2025-10-07 19:57:39,205 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2025-10-07 19:57:39,206 [main] INFO  (DfCreateSchemaProcess$1#dispatch():325) - ...Creating a connection to system
2025-10-07 19:57:39,206 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():539) - ...Creating a connection for additional user: root
2025-10-07 19:57:39,224 [main] INFO  (DfCreateSchemaProcess$1#dispatch():351) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2025-10-07 19:57:39,224 [main] INFO  (DfCreateSchemaProcess$1#dispatch():353) -  -> Can't create database 'maihamadb'; database exists
2025-10-07 19:57:39,224 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():463) - ...Reviving the user 'system' until the end of this SQL file
2025-10-07 19:57:39,224 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
create user maihamadb@localhost identified by 'maihamadb'
2025-10-07 19:57:39,228 [main] INFO  (DfCreateSchemaProcess$1#dispatch():351) - ...Saying good-bye to the user 'system' because of checked: [mainUser, grant]
2025-10-07 19:57:39,228 [main] INFO  (DfCreateSchemaProcess$1#dispatch():353) -  -> Operation CREATE USER failed for 'maihamadb'@'localhost'
2025-10-07 19:57:39,229 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():463) - ...Reviving the user 'system' until the end of this SQL file
2025-10-07 19:57:39,229 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.* to maihamadb@localhost
2025-10-07 19:57:39,230 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2025-10-07 19:57:39,232 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2025-10-07 19:57:39,233 [main] INFO  (DfSqlFileFireMan#fire():68) - ...Firing: replace-schema-10-basic.sql
2025-10-07 19:57:39,233 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():400) - ...Saying good-bye to the user 'system' again
2025-10-07 19:57:39,233 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():404) - ...Clearing revived users
2025-10-07 19:57:39,233 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():411) - ...Coming back to the main user from the user 'system'
2025-10-07 19:57:39,236 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table `MEMBER`(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2025-10-07 19:57:39,242 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2025-10-07 19:57:39,247 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2025-10-07 19:57:39,251 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2025-10-07 19:57:39,256 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    AKIRAKANI_OKASHII_KARAMU_MEI INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2025-10-07 19:57:39,260 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2025-10-07 19:57:39,264 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2025-10-07 19:57:39,270 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2025-10-07 19:57:39,275 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2025-10-07 19:57:39,280 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2025-10-07 19:57:39,283 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2025-10-07 19:57:39,288 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2025-10-07 19:57:39,293 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2025-10-07 19:57:39,297 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2025-10-07 19:57:39,300 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2025-10-07 19:57:39,304 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table `MEMBER` add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2025-10-07 19:57:39,315 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-07 19:57:39,324 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2025-10-07 19:57:39,335 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2025-10-07 19:57:39,345 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-07 19:57:39,355 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-07 19:57:39,364 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2025-10-07 19:57:39,375 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-07 19:57:39,384 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-07 19:57:39,394 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2025-10-07 19:57:39,404 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-07 19:57:39,415 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2025-10-07 19:57:39,427 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2025-10-07 19:57:39,438 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2025-10-07 19:57:39,450 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2025-10-07 19:57:39,464 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2025-10-07 19:57:39,474 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on `MEMBER`(MEMBER_NAME)
2025-10-07 19:57:39,486 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on `MEMBER`(FORMALIZED_DATETIME)
2025-10-07 19:57:39,499 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2025-10-07 19:57:39,505 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(AKIRAKANI_OKASHII_KARAMU_MEI)
2025-10-07 19:57:39,510 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2025-10-07 19:57:39,518 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2025-10-07 19:57:39,526 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2025-10-07 19:57:39,538 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2025-10-07 19:57:39,543 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2025-10-07 19:57:39,550 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=40 failure=0
2025-10-07 19:57:39,551 [main] INFO  (DfSqlFileFireMan#fire():93) - Create Schema: success=42, failure=0 (in 2 files)
2025-10-07 19:57:39,551 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():594) - ...Closing connections to change-users: [system]
2025-10-07 19:57:39,566 [main] INFO  (DfLoadDataProcess#execute():133) - 
2025-10-07 19:57:39,566 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2025-10-07 19:57:39,566 [main] INFO  (DfLoadDataProcess#execute():135) - *                   *
2025-10-07 19:57:39,566 [main] INFO  (DfLoadDataProcess#execute():136) - * Load Data         *
2025-10-07 19:57:39,566 [main] INFO  (DfLoadDataProcess#execute():137) - *                   *
2025-10-07 19:57:39,566 [main] INFO  (DfLoadDataProcess#execute():138) - * * * * * * * * * * *
2025-10-07 19:57:39,573 [main] INFO  (DfTakeFinallyProcess#takeFinally():244) - 
2025-10-07 19:57:39,574 [main] INFO  (DfTakeFinallyProcess#takeFinally():245) - * * * * * * * **
2025-10-07 19:57:39,574 [main] INFO  (DfTakeFinallyProcess#takeFinally():246) - *              *
2025-10-07 19:57:39,574 [main] INFO  (DfTakeFinallyProcess#takeFinally():247) - * Take Finally *
2025-10-07 19:57:39,574 [main] INFO  (DfTakeFinallyProcess#takeFinally():248) - *              *
2025-10-07 19:57:39,574 [main] INFO  (DfTakeFinallyProcess#takeFinally():249) - * * * * * * * **
2025-10-07 19:57:39,575 [main] INFO  (DfSqlFileFireMan#fire():68) - ...Firing: take-finally.sql
2025-10-07 19:57:39,576 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=0 failure=0
2025-10-07 19:57:39,576 [main] INFO  (DfSqlFileFireMan#fire():93) - Take Finally: success=0, failure=0 (in 1 files)
2025-10-07 19:57:39,576 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2025-10-07 19:57:39,578 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m02s622ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 8.0.43)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {password=, user=root}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 Create Schema: success=42, failure=0 (in 2 files) - 00m00s604ms
  (Initialize Schema) - 00m00s252ms
  (Create Schema) - 00m00s349ms
  o replace-schema-00-system.sql
  o replace-schema-10-basic.sql

 Load Data: *empty loading - 00m00s007ms
  - (no data file)

 Take Finally: success=0, failure=0 (in 1 files) - 00m00s003ms
  o take-finally.sql
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2025-10-07 19:57:43,338 [main] INFO  (TorqueJDBCTransformTask#begin():104) - +------------------------------------------+
2025-10-07 19:57:43,339 [main] INFO  (TorqueJDBCTransformTask#begin():105) - |                                          |
2025-10-07 19:57:43,339 [main] INFO  (TorqueJDBCTransformTask#begin():106) - |                   JDBC                   |
2025-10-07 19:57:43,339 [main] INFO  (TorqueJDBCTransformTask#begin():107) - |                                          |
2025-10-07 19:57:43,339 [main] INFO  (TorqueJDBCTransformTask#begin():108) - +------------------------------------------+
2025-10-07 19:57:43,348 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2025-10-07 19:57:43,348 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2025-10-07 19:57:43,348 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
2025-10-07 19:57:43,348 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2025-10-07 19:57:43,362 [main] INFO  (DfSchemaXmlSerializer#serialize():305) - 
2025-10-07 19:57:43,362 [main] INFO  (DfSchemaXmlSerializer#serialize():306) - ...Starting to process JDBC to SchemaXML
2025-10-07 19:57:43,362 [main] INFO  (DfSchemaXmlSerializer#doLoadPreviousSchema():1559) - ...Loading previous schema (schema diff process)
2025-10-07 19:57:43,366 [main] INFO  (DfSchemaXmlSerializer#doLoadPreviousSchema():1562) -  -> no previous (first time)
2025-10-07 19:57:43,371 [main] INFO  (DfSchemaXmlSerializer#generateXML():379) - ...Getting DB connection
2025-10-07 19:57:43,374 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2025-10-07 19:57:43,612 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 8.0.43
2025-10-07 19:57:43,612 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.49 ( Revision: ad86f36e100e104cd926c6b81c8cab9565750116 ) for JDBC 4.0
2025-10-07 19:57:43,612 [main] INFO  (DfSchemaXmlSerializer#generateXML():382) - ...Getting DB meta data
2025-10-07 19:57:43,613 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-07 19:57:43,613 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-07 19:57:43,614 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-07 19:57:43,620 [main] INFO  (DfDbCommentExtractorBase#doSelectUserTabComments():121) - select table_type as OBJECT_TYPE, table_name as TABLE_NAME, table_comment as COMMENTS from information_schema.tables where table_schema = 'maihamadb' order by table_name asc
2025-10-07 19:57:43,624 [main] INFO  (DfDbCommentExtractorBase#doSelectUserColComments():168) - select table_name as TABLE_NAME, column_name as COLUMN_NAME, column_comment as COMMENTS from information_schema.columns where table_schema = 'maihamadb' order by table_name asc, column_name asc
2025-10-07 19:57:43,632 [main] INFO  (DfDatetimePrecisionExtractorMySQL#extractDatetimePrecisionMap():59) - select TABLE_NAME, COLUMN_NAME, DATETIME_PRECISION from INFORMATION_SCHEMA.COLUMNS where TABLE_SCHEMA = 'maihamadb' and DATA_TYPE = 'datetime'
2025-10-07 19:57:43,642 [main] INFO  (DfSchemaXmlSerializer#processTable():438) - 
2025-10-07 19:57:43,642 [main] INFO  (DfSchemaXmlSerializer#processTable():439) - $ /= = = = = = = = = = = = = = = = = = = = = = = = = =
2025-10-07 19:57:43,642 [main] INFO  (DfSchemaXmlSerializer#processTable():440) - $ [Table List]
2025-10-07 19:57:43,643 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member(TABLE) // 会員: 会員登録時にデータが登録される。...
2025-10-07 19:57:43,675 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_address(TABLE) // 会員住所情報: 会員の住所に関する情報。...
2025-10-07 19:57:43,699 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_login(TABLE) // 会員ログイン情報: ログインするたびに登録されるログイン履歴。
2025-10-07 19:57:43,722 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_security(TABLE) // 会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある
2025-10-07 19:57:43,743 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_service(TABLE) // 会員サービス: 会員のサービス情報（ポイントサービスなど）。
2025-10-07 19:57:43,759 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_status(TABLE) // 会員ステータス
2025-10-07 19:57:43,773 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.member_withdrawal(TABLE) // 会員退会情報: 退会会員の退会に関する詳細な情報。...
2025-10-07 19:57:43,796 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.product(TABLE) // 商品
2025-10-07 19:57:43,812 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.product_category(TABLE) // 商品カテゴリ: 商品のカテゴリを表現するマスタ。...
2025-10-07 19:57:43,826 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.product_status(TABLE) // 商品ステータス
2025-10-07 19:57:43,832 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.purchase(TABLE) // 購入: 一つの商品に対する一回の購入を表現する。...
2025-10-07 19:57:43,841 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.purchase_payment(TABLE) // 購入支払: 購入に対する支払。...
2025-10-07 19:57:43,848 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.region(TABLE) // 地域: 主に会員の住所に対応する地域。...
2025-10-07 19:57:43,854 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.service_rank(TABLE) // サービスランク: 会員のサービスレベルを表現するランク。...
2025-10-07 19:57:43,860 [main] INFO  (DfSchemaXmlSerializer#doProcessTable():520) - $ maihamadb.withdrawal_reason(TABLE) // 退会理由: 会員に選ばせる定型的な退会理由のマスタ。
2025-10-07 19:57:43,866 [main] INFO  (DfSchemaXmlSerializer#processTable():452) - $ 
2025-10-07 19:57:43,866 [main] INFO  (DfSchemaXmlSerializer#processTable():453) - $ [Table Count]
2025-10-07 19:57:43,866 [main] INFO  (DfSchemaXmlSerializer#processTable():454) - $ 15
2025-10-07 19:57:43,866 [main] INFO  (DfSchemaXmlSerializer#processTable():455) - $ = = = = = = = = = =/
2025-10-07 19:57:43,866 [main] INFO  (DfSchemaXmlSerializer#processTable():456) - 
2025-10-07 19:57:43,867 [main] INFO  (DfSchemaXmlSerializer#processSequence():823) - ...Getting sequences
2025-10-07 19:57:43,869 [main] INFO  (DfSchemaXmlSerializer#serialize():320) - ...Serializing XML:
2025-10-07 19:57:43,869 [main] INFO  (DfSchemaXmlSerializer#serialize():321) -   filePath = ./schema/project-schema-maihamadb.xml
2025-10-07 19:57:43,869 [main] INFO  (DfSchemaXmlSerializer#serialize():322) -   encoding = UTF-8
2025-10-07 19:57:43,879 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1570) - ...Loading next schema (schema diff process)
2025-10-07 19:57:43,884 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2025-10-07 19:57:43,947 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1575) -  -> different from previous (schema diff)
2025-10-07 19:57:43,947 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1577) - ...Serializing schema-diff:
2025-10-07 19:57:43,947 [main] INFO  (DfSchemaXmlSerializer#doLoadNextSchema():1578) -   filePath = ./schema/project-history-maihamadb.diffmap
2025-10-07 19:57:43,953 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2025-10-07 19:57:43,957 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s623ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 8.0.43)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {JDBC}
2025-10-07 19:57:47,641 [main] INFO  (TorqueDocumentationTask#begin():193) - +------------------------------------------+
2025-10-07 19:57:47,642 [main] INFO  (TorqueDocumentationTask#begin():194) - |                                          |
2025-10-07 19:57:47,642 [main] INFO  (TorqueDocumentationTask#begin():195) - |                   Doc                    |
2025-10-07 19:57:47,642 [main] INFO  (TorqueDocumentationTask#begin():203) - |                                          |
2025-10-07 19:57:47,642 [main] INFO  (TorqueDocumentationTask#begin():204) - +------------------------------------------+
2025-10-07 19:57:47,650 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2025-10-07 19:57:47,650 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2025-10-07 19:57:47,650 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
2025-10-07 19:57:47,650 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2025-10-07 19:57:47,651 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():265) - 
2025-10-07 19:57:47,651 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():266) - * * * * * * * * * * *
2025-10-07 19:57:47,651 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():267) - *                   *
2025-10-07 19:57:47,651 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():268) - *    Schema HTML    *
2025-10-07 19:57:47,651 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():269) - *                   *
2025-10-07 19:57:47,651 [main] INFO  (TorqueDocumentationTask#processSchemaHtml():270) - * * * * * * * * * * *
2025-10-07 19:57:47,669 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2025-10-07 19:57:47,702 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2025-10-07 19:57:47,702 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2025-10-07 19:57:47,708 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2025-10-07 19:57:47,708 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2025-10-07 19:57:47,708 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2025-10-07 19:57:47,709 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2025-10-07 19:57:47,709 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2025-10-07 19:57:47,709 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2025-10-07 19:57:47,710 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2025-10-07 19:57:47,715 [main] INFO  (DfClsDeploymentInitializer#initializeClassificationDeployment():67) - ...Initializing ClassificationDeployment: project=maihamadb
2025-10-07 19:57:47,733 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("doc/ControlDocument.vm", ctx);
2025-10-07 19:57:47,737 [main] INFO  (DfFlutistLog4JLogSystem#init():45) - ...Suppressing velocity.log, which is unneeded for also debug
2025-10-07 19:57:47,779 [main] INFO  (Database#doEnableDocumentOutputDirectory():1241) - ...Setting up documentOutputDirectory: ./output/doc
2025-10-07 19:57:47,781 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():242) - ...Loading schema history
2025-10-07 19:57:47,790 [main] INFO  (DfDocumentSelector#doLoadSchemaHistory():246) -  -> found history: count=2
2025-10-07 19:57:47,810 [main] INFO  (DfSchemaHtmlDataArrangeQuery#getArrangeQueryTableMap():50) -  
2025-10-07 19:57:47,810 [main] INFO  (DfSchemaHtmlDataArrangeQuery#getArrangeQueryTableMap():51) - ...Setting up arrange queries for documents (ArrangeQueryDoc)
2025-10-07 19:57:47,820 [main] INFO  (DfArrangeQueryDocSetupper#doExtractArrangeQuery():106) -  -> no arrange query
2025-10-07 19:57:47,931 [main] INFO  (DfRefreshResourceProcess#show():295) - /===========================================================================
2025-10-07 19:57:47,931 [main] INFO  (DfRefreshResourceProcess#show():295) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2025-10-07 19:57:47,944 [main] INFO  (DfRefreshResourceProcess#show():295) - ...Retrying refreshing by default secondary URL http://localhost:8387/
2025-10-07 19:57:47,944 [main] INFO  (DfRefreshResourceProcess#show():295) - Failed to refresh the resources (continued): url=http://localhost:8386/, cause=ConnectException(Connection refused)
2025-10-07 19:57:47,944 [main] INFO  (DfRefreshResourceProcess#show():295) - ==========/
2025-10-07 19:57:47,945 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s307ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Doc}
2025-10-07 19:57:51,654 [main] INFO  (TorqueDataModelTask#begin():110) - +------------------------------------------+
2025-10-07 19:57:51,655 [main] INFO  (TorqueDataModelTask#begin():111) - |                                          |
2025-10-07 19:57:51,656 [main] INFO  (TorqueDataModelTask#begin():112) - |                 Generate                 |
2025-10-07 19:57:51,656 [main] INFO  (TorqueDataModelTask#begin():113) - |                                          |
2025-10-07 19:57:51,656 [main] INFO  (TorqueDataModelTask#begin():114) - +------------------------------------------+
2025-10-07 19:57:51,663 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2025-10-07 19:57:51,663 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2025-10-07 19:57:51,663 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
2025-10-07 19:57:51,664 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2025-10-07 19:57:51,668 [main] INFO  (TorqueDataModelTask#setupControlTemplate():166) - 
2025-10-07 19:57:51,668 [main] INFO  (TorqueDataModelTask#setupControlTemplate():167) - ...Using Java control: om/ControlGenerateJava.vm
2025-10-07 19:57:51,683 [main] INFO  (DTDResolver#resolveEntity():195) - ...Resolving XML by database.dtd in same package
2025-10-07 19:57:51,716 [main] INFO  (DfAbstractTexenTask#fireVelocityProcess():253) - generator.parse("om/ControlGenerateJava.vm", ctx);
2025-10-07 19:57:51,720 [main] INFO  (DfFlutistLog4JLogSystem#init():45) - ...Suppressing velocity.log, which is unneeded for also debug
2025-10-07 19:57:51,781 [main] INFO  (Database#doEnableGenerateOutputDirectory():1209) - ...Setting up generateOutputDirectory: ../src/main/java
2025-10-07 19:57:51,782 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():62) - /=======================================
2025-10-07 19:57:51,782 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():63) - ...Initializing additional primary keys.
2025-10-07 19:57:51,782 [main] INFO  (DfAdditionalPrimaryKeyInitializer#initializeAdditionalPrimaryKey():88) - ==========/
2025-10-07 19:57:51,782 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():62) - /=======================================
2025-10-07 19:57:51,783 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():63) - ...Initializing additional unique keys.
2025-10-07 19:57:51,783 [main] INFO  (DfAdditionalUniqueKeyInitializer#initializeAdditionalUniqueKey():83) - ==========/
2025-10-07 19:57:51,784 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():68) - /=======================================
2025-10-07 19:57:51,784 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():69) - ...Initializing additional foreign keys.
2025-10-07 19:57:51,784 [main] INFO  (DfAdditionalForeignKeyInitializer#initializeAdditionalForeignKey():88) - ==========/
2025-10-07 19:57:51,788 [main] INFO  (DfClsDeploymentInitializer#initializeClassificationDeployment():67) - ...Initializing ClassificationDeployment: project=maihamadb
2025-10-07 19:57:51,790 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():58) - /=============================
2025-10-07 19:57:51,790 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():59) - ...Initializing include query.
2025-10-07 19:57:51,791 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - String
2025-10-07 19:57:51,791 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Number
2025-10-07 19:57:51,791 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - Date
2025-10-07 19:57:51,791 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotEqual -> []
2025-10-07 19:57:51,791 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   InScope -> []
2025-10-07 19:57:51,791 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():86) -   NotInScope -> []
2025-10-07 19:57:51,791 [main] INFO  (DfIncludeQueryInitializer#checkQueryMap():81) - OrderBy
2025-10-07 19:57:51,791 [main] INFO  (DfIncludeQueryInitializer#initializeIncludeQuery():61) - ========/
2025-10-07 19:57:51,795 [main] INFO  (Database#info():2872) - public void parseAllCommon() {
2025-10-07 19:57:51,796 [main] INFO  (Database#info():2872) -     parse('DBCurrent');
2025-10-07 19:57:51,799 [main] INFO  (Database#info():2872) -     parse('DBFluteConfig');
2025-10-07 19:57:51,806 [main] INFO  (Database#info():2872) -     parse('DBFluteInitializer');
2025-10-07 19:57:51,808 [main] INFO  (Database#info():2872) -     parse('DBMetaInstanceHandler');
2025-10-07 19:57:51,815 [main] INFO  (Database#info():2872) -     parse('EntityDefinedCommonColumn');
2025-10-07 19:57:51,817 [main] INFO  (Database#info():2872) -     parse('ImplementedBehaviorSelector');
2025-10-07 19:57:51,819 [main] INFO  (Database#info():2872) -     parse('ImplementedCommonColumnAutoSetupper');
2025-10-07 19:57:51,820 [main] INFO  (Database#info():2872) -     parse('ImplementedInvokerAssistant');
2025-10-07 19:57:51,823 [main] INFO  (Database#info():2872) -     parse('ImplementedSqlClauseCreator');
2025-10-07 19:57:51,824 [main] INFO  (Database#info():2872) - }
2025-10-07 19:57:51,824 [main] INFO  (Database#info():2872) - public void parseContainerConfig() {
2025-10-07 19:57:51,824 [main] INFO  (Database#info():2872) -     parse('../resources/dbflute.xml')
2025-10-07 19:57:51,829 [main] INFO  (Database#info():2872) - }
2025-10-07 19:57:51,831 [main] INFO  (DfOldClassHandler#info():1045) - public void deleteOldTableClass() {
2025-10-07 19:57:51,837 [main] INFO  (DfOldClassHandler#info():1045) - }
2025-10-07 19:57:51,838 [main] INFO  (Database#info():2872) - public void parseTableClass() {
2025-10-07 19:57:51,838 [main] INFO  (Database#info():2872) -     parse('member');
2025-10-07 19:57:51,974 [main] INFO  (Database#info():2872) -     parse('member_address');
2025-10-07 19:57:52,041 [main] INFO  (Database#info():2872) -     parse('member_login');
2025-10-07 19:57:52,089 [main] INFO  (Database#info():2872) -     parse('member_security');
2025-10-07 19:57:52,133 [main] INFO  (Database#info():2872) -     parse('member_service');
2025-10-07 19:57:52,180 [main] INFO  (Database#info():2872) -     parse('member_status');
2025-10-07 19:57:52,222 [main] INFO  (Database#info():2872) -     parse('member_withdrawal');
2025-10-07 19:57:52,266 [main] INFO  (Database#info():2872) -     parse('product');
2025-10-07 19:57:52,316 [main] INFO  (Database#info():2872) -     parse('product_category');
2025-10-07 19:57:52,356 [main] INFO  (Database#info():2872) -     parse('product_status');
2025-10-07 19:57:52,386 [main] INFO  (Database#info():2872) -     parse('purchase');
2025-10-07 19:57:52,430 [main] INFO  (Database#info():2872) -     parse('purchase_payment');
2025-10-07 19:57:52,464 [main] INFO  (Database#info():2872) -     parse('region');
2025-10-07 19:57:52,492 [main] INFO  (Database#info():2872) -     parse('service_rank');
2025-10-07 19:57:52,523 [main] INFO  (Database#info():2872) -     parse('withdrawal_reason');
2025-10-07 19:57:52,554 [main] INFO  (Database#info():2872) - }
2025-10-07 19:57:52,554 [main] INFO  (Database#info():2872) -  
2025-10-07 19:57:52,580 [main] INFO  (DfRefreshResourceProcess#show():295) - /===========================================================================
2025-10-07 19:57:52,580 [main] INFO  (DfRefreshResourceProcess#show():295) - ...Refreshing [dbflute-hands-on] by http://localhost:8386/
2025-10-07 19:57:52,593 [main] INFO  (DfRefreshResourceProcess#show():295) - ...Retrying refreshing by default secondary URL http://localhost:8387/
2025-10-07 19:57:52,594 [main] INFO  (DfRefreshResourceProcess#show():295) - Failed to refresh the resources (continued): url=http://localhost:8386/, cause=ConnectException(Connection refused)
2025-10-07 19:57:52,594 [main] INFO  (DfRefreshResourceProcess#show():295) - ==========/
2025-10-07 19:57:52,595 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m00s945ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$
_/_/_/_/_/_/_/_/_/_/ {Generate}
2025-10-08 11:44:08,904 [main] INFO  (DfReplaceSchemaTask#begin():94) - +------------------------------------------+
2025-10-08 11:44:08,905 [main] INFO  (DfReplaceSchemaTask#begin():95) - |                                          |
2025-10-08 11:44:08,905 [main] INFO  (DfReplaceSchemaTask#begin():96) - |              ReplaceSchema               |
2025-10-08 11:44:08,907 [main] INFO  (DfReplaceSchemaTask#begin():104) - |                                          |
2025-10-08 11:44:08,907 [main] INFO  (DfReplaceSchemaTask#begin():105) - +------------------------------------------+
2025-10-08 11:44:08,907 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():423) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2025-10-08 11:44:12,953 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2025-10-08 11:44:12,953 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2025-10-08 11:44:12,953 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
2025-10-08 11:44:12,954 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2025-10-08 11:44:12,960 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2025-10-08 11:44:13,246 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 8.0.43
2025-10-08 11:44:13,246 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.49 ( Revision: ad86f36e100e104cd926c6b81c8cab9565750116 ) for JDBC 4.0
2025-10-08 11:44:13,252 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():253) - 
2025-10-08 11:44:13,252 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():254) - * * * * * * * * * * *
2025-10-08 11:44:13,252 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():255) - *                   *
2025-10-08 11:44:13,252 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():256) - * Initialize Schema *
2025-10-08 11:44:13,252 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():257) - *                   *
2025-10-08 11:44:13,252 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():258) - * * * * * * * * * * *
2025-10-08 11:44:13,257 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 11:44:13,257 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 11:44:13,257 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 11:44:13,299 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_address
2025-10-08 11:44:13,312 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_login
2025-10-08 11:44:13,317 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_security
2025-10-08 11:44:13,323 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_service
2025-10-08 11:44:13,329 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_withdrawal
2025-10-08 11:44:13,337 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table purchase_payment
2025-10-08 11:44:13,346 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table `member` drop foreign key FK_MEMBER_MEMBER_STATUS
2025-10-08 11:44:13,361 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2025-10-08 11:44:13,366 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2025-10-08 11:44:13,371 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2025-10-08 11:44:13,375 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2025-10-08 11:44:13,381 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2025-10-08 11:44:13,388 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2025-10-08 11:44:13,393 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2025-10-08 11:44:13,399 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2025-10-08 11:44:13,404 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2025-10-08 11:44:13,409 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2025-10-08 11:44:13,415 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2025-10-08 11:44:13,423 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2025-10-08 11:44:13,430 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2025-10-08 11:44:13,439 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2025-10-08 11:44:13,446 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2025-10-08 11:44:13,453 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table `member`
2025-10-08 11:44:13,456 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_address
2025-10-08 11:44:13,459 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_login
2025-10-08 11:44:13,461 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_security
2025-10-08 11:44:13,462 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_service
2025-10-08 11:44:13,465 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_status
2025-10-08 11:44:13,468 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_withdrawal
2025-10-08 11:44:13,470 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table product
2025-10-08 11:44:13,473 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table product_category
2025-10-08 11:44:13,475 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table product_status
2025-10-08 11:44:13,477 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table purchase
2025-10-08 11:44:13,480 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table purchase_payment
2025-10-08 11:44:13,483 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table region
2025-10-08 11:44:13,484 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table service_rank
2025-10-08 11:44:13,486 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table withdrawal_reason
2025-10-08 11:44:13,500 [main] INFO  (DfCreateSchemaProcess#createSchema():293) - 
2025-10-08 11:44:13,500 [main] INFO  (DfCreateSchemaProcess#createSchema():294) - * * * * * * * * *
2025-10-08 11:44:13,500 [main] INFO  (DfCreateSchemaProcess#createSchema():295) - *               *
2025-10-08 11:44:13,501 [main] INFO  (DfCreateSchemaProcess#createSchema():296) - * Create Schema *
2025-10-08 11:44:13,501 [main] INFO  (DfCreateSchemaProcess#createSchema():297) - *               *
2025-10-08 11:44:13,501 [main] INFO  (DfCreateSchemaProcess#createSchema():298) - * * * * * * * * *
2025-10-08 11:44:13,502 [main] INFO  (DfSqlFileFireMan#fire():68) - ...Firing: replace-schema-00-system.sql
2025-10-08 11:44:13,504 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2025-10-08 11:44:13,504 [main] INFO  (DfCreateSchemaProcess$1#dispatch():325) - ...Creating a connection to system
2025-10-08 11:44:13,504 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():539) - ...Creating a connection for additional user: root
2025-10-08 11:44:13,523 [main] INFO  (DfCreateSchemaProcess$1#dispatch():351) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2025-10-08 11:44:13,523 [main] INFO  (DfCreateSchemaProcess$1#dispatch():353) -  -> Can't create database 'maihamadb'; database exists
2025-10-08 11:44:13,523 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():463) - ...Reviving the user 'system' until the end of this SQL file
2025-10-08 11:44:13,523 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
create user maihamadb@localhost identified by 'maihamadb'
2025-10-08 11:44:13,527 [main] INFO  (DfCreateSchemaProcess$1#dispatch():351) - ...Saying good-bye to the user 'system' because of checked: [mainUser, grant]
2025-10-08 11:44:13,527 [main] INFO  (DfCreateSchemaProcess$1#dispatch():353) -  -> Operation CREATE USER failed for 'maihamadb'@'localhost'
2025-10-08 11:44:13,527 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():463) - ...Reviving the user 'system' until the end of this SQL file
2025-10-08 11:44:13,527 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.* to maihamadb@localhost
2025-10-08 11:44:13,528 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2025-10-08 11:44:13,530 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2025-10-08 11:44:13,530 [main] INFO  (DfSqlFileFireMan#fire():68) - ...Firing: replace-schema-10-basic.sql
2025-10-08 11:44:13,530 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():400) - ...Saying good-bye to the user 'system' again
2025-10-08 11:44:13,530 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():404) - ...Clearing revived users
2025-10-08 11:44:13,530 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():411) - ...Coming back to the main user from the user 'system'
2025-10-08 11:44:13,533 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table `MEMBER`(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2025-10-08 11:44:13,538 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2025-10-08 11:44:13,543 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2025-10-08 11:44:13,548 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2025-10-08 11:44:13,552 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    AKIRAKANI_OKASHII_KARAMU_MEI INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2025-10-08 11:44:13,556 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2025-10-08 11:44:13,561 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2025-10-08 11:44:13,567 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2025-10-08 11:44:13,571 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2025-10-08 11:44:13,575 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2025-10-08 11:44:13,579 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2025-10-08 11:44:13,582 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2025-10-08 11:44:13,585 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2025-10-08 11:44:13,589 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2025-10-08 11:44:13,593 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2025-10-08 11:44:13,597 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table `MEMBER` add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2025-10-08 11:44:13,608 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-08 11:44:13,618 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2025-10-08 11:44:13,630 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2025-10-08 11:44:13,639 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-08 11:44:13,649 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-08 11:44:13,658 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2025-10-08 11:44:13,670 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-08 11:44:13,679 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-08 11:44:13,688 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2025-10-08 11:44:13,698 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-08 11:44:13,708 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2025-10-08 11:44:13,720 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2025-10-08 11:44:13,731 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2025-10-08 11:44:13,743 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2025-10-08 11:44:13,758 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2025-10-08 11:44:13,767 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on `MEMBER`(MEMBER_NAME)
2025-10-08 11:44:13,779 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on `MEMBER`(FORMALIZED_DATETIME)
2025-10-08 11:44:13,791 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2025-10-08 11:44:13,795 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(AKIRAKANI_OKASHII_KARAMU_MEI)
2025-10-08 11:44:13,800 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2025-10-08 11:44:13,807 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2025-10-08 11:44:13,814 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2025-10-08 11:44:13,821 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2025-10-08 11:44:13,825 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2025-10-08 11:44:13,835 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=40 failure=0
2025-10-08 11:44:13,835 [main] INFO  (DfSqlFileFireMan#fire():93) - Create Schema: success=42, failure=0 (in 2 files)
2025-10-08 11:44:13,835 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():594) - ...Closing connections to change-users: [system]
2025-10-08 11:44:13,851 [main] INFO  (DfLoadDataProcess#execute():133) - 
2025-10-08 11:44:13,851 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2025-10-08 11:44:13,851 [main] INFO  (DfLoadDataProcess#execute():135) - *                   *
2025-10-08 11:44:13,851 [main] INFO  (DfLoadDataProcess#execute():136) - * Load Data         *
2025-10-08 11:44:13,851 [main] INFO  (DfLoadDataProcess#execute():137) - *                   *
2025-10-08 11:44:13,851 [main] INFO  (DfLoadDataProcess#execute():138) - * * * * * * * * * * *
2025-10-08 11:44:13,863 [main] WARN  (DfDelimiterDataHandlerImpl#writeSeveralData():96) - The encoding(directory name) is unsupported: encoding=acyclic_01_02-PRODUCT_CATEGORY.tsv
2025-10-08 11:44:13,867 [main] WARN  (DfDelimiterDataHandlerImpl#writeSeveralData():96) - The encoding(directory name) is unsupported: encoding=acyclic_01_04-REGION.tsv
2025-10-08 11:44:13,872 [main] WARN  (DfDelimiterDataHandlerImpl#writeSeveralData():96) - The encoding(directory name) is unsupported: encoding=acyclic_01_01-MEMBER_STATUS.tsv
2025-10-08 11:44:13,876 [main] WARN  (DfDelimiterDataHandlerImpl#writeSeveralData():96) - The encoding(directory name) is unsupported: encoding=acyclic_01_03-PRODUCT_STATUS.tsv
2025-10-08 11:44:13,879 [main] WARN  (DfDelimiterDataHandlerImpl#writeSeveralData():96) - The encoding(directory name) is unsupported: encoding=acyclic_01_06-WITHDRAWAL_REASON.tsv
2025-10-08 11:44:13,880 [main] WARN  (DfDelimiterDataHandlerImpl#writeSeveralData():96) - The encoding(directory name) is unsupported: encoding=acyclic_01_05-SERVICE_RANK.tsv
2025-10-08 11:44:13,882 [main] INFO  (DfTakeFinallyProcess#takeFinally():244) - 
2025-10-08 11:44:13,882 [main] INFO  (DfTakeFinallyProcess#takeFinally():245) - * * * * * * * **
2025-10-08 11:44:13,882 [main] INFO  (DfTakeFinallyProcess#takeFinally():246) - *              *
2025-10-08 11:44:13,882 [main] INFO  (DfTakeFinallyProcess#takeFinally():247) - * Take Finally *
2025-10-08 11:44:13,882 [main] INFO  (DfTakeFinallyProcess#takeFinally():248) - *              *
2025-10-08 11:44:13,882 [main] INFO  (DfTakeFinallyProcess#takeFinally():249) - * * * * * * * **
2025-10-08 11:44:13,884 [main] INFO  (DfSqlFileFireMan#fire():68) - ...Firing: take-finally.sql
2025-10-08 11:44:13,885 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=0 failure=0
2025-10-08 11:44:13,885 [main] INFO  (DfSqlFileFireMan#fire():93) - Take Finally: success=0, failure=0 (in 1 files)
2025-10-08 11:44:13,886 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2025-10-08 11:44:13,887 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m04s989ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 8.0.43)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {password=, user=root}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 Create Schema: success=42, failure=0 (in 2 files) - 00m00s586ms
  (Initialize Schema) - 00m00s247ms
  (Create Schema) - 00m00s336ms
  o replace-schema-00-system.sql
  o replace-schema-10-basic.sql

 Load Data: *empty loading - 00m00s030ms
  - (no data file)

 Take Finally: success=0, failure=0 (in 1 files) - 00m00s003ms
  o take-finally.sql
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2025-10-08 11:46:07,421 [main] INFO  (DfReplaceSchemaTask#begin():94) - +------------------------------------------+
2025-10-08 11:46:07,422 [main] INFO  (DfReplaceSchemaTask#begin():95) - |                                          |
2025-10-08 11:46:07,422 [main] INFO  (DfReplaceSchemaTask#begin():96) - |              ReplaceSchema               |
2025-10-08 11:46:07,424 [main] INFO  (DfReplaceSchemaTask#begin():104) - |                                          |
2025-10-08 11:46:07,424 [main] INFO  (DfReplaceSchemaTask#begin():105) - +------------------------------------------+
2025-10-08 11:46:07,424 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():423) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2025-10-08 11:46:08,671 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2025-10-08 11:46:08,672 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2025-10-08 11:46:08,672 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
2025-10-08 11:46:08,672 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2025-10-08 11:46:08,676 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2025-10-08 11:46:08,981 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 8.0.43
2025-10-08 11:46:08,981 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.49 ( Revision: ad86f36e100e104cd926c6b81c8cab9565750116 ) for JDBC 4.0
2025-10-08 11:46:08,988 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():253) - 
2025-10-08 11:46:08,988 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():254) - * * * * * * * * * * *
2025-10-08 11:46:08,988 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():255) - *                   *
2025-10-08 11:46:08,988 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():256) - * Initialize Schema *
2025-10-08 11:46:08,988 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():257) - *                   *
2025-10-08 11:46:08,988 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():258) - * * * * * * * * * * *
2025-10-08 11:46:08,992 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 11:46:08,993 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 11:46:08,993 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 11:46:09,033 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_address
2025-10-08 11:46:09,043 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_login
2025-10-08 11:46:09,047 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_security
2025-10-08 11:46:09,052 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_service
2025-10-08 11:46:09,057 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_withdrawal
2025-10-08 11:46:09,065 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table purchase_payment
2025-10-08 11:46:09,074 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table `member` drop foreign key FK_MEMBER_MEMBER_STATUS
2025-10-08 11:46:09,089 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2025-10-08 11:46:09,093 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2025-10-08 11:46:09,098 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2025-10-08 11:46:09,103 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2025-10-08 11:46:09,110 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2025-10-08 11:46:09,116 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2025-10-08 11:46:09,120 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2025-10-08 11:46:09,126 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2025-10-08 11:46:09,131 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2025-10-08 11:46:09,137 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2025-10-08 11:46:09,145 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2025-10-08 11:46:09,154 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2025-10-08 11:46:09,160 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2025-10-08 11:46:09,167 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2025-10-08 11:46:09,176 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2025-10-08 11:46:09,184 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table `member`
2025-10-08 11:46:09,187 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_address
2025-10-08 11:46:09,190 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_login
2025-10-08 11:46:09,192 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_security
2025-10-08 11:46:09,194 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_service
2025-10-08 11:46:09,196 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_status
2025-10-08 11:46:09,198 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_withdrawal
2025-10-08 11:46:09,200 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table product
2025-10-08 11:46:09,204 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table product_category
2025-10-08 11:46:09,206 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table product_status
2025-10-08 11:46:09,208 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table purchase
2025-10-08 11:46:09,211 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table purchase_payment
2025-10-08 11:46:09,213 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table region
2025-10-08 11:46:09,215 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table service_rank
2025-10-08 11:46:09,218 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table withdrawal_reason
2025-10-08 11:46:09,231 [main] INFO  (DfCreateSchemaProcess#createSchema():293) - 
2025-10-08 11:46:09,231 [main] INFO  (DfCreateSchemaProcess#createSchema():294) - * * * * * * * * *
2025-10-08 11:46:09,231 [main] INFO  (DfCreateSchemaProcess#createSchema():295) - *               *
2025-10-08 11:46:09,231 [main] INFO  (DfCreateSchemaProcess#createSchema():296) - * Create Schema *
2025-10-08 11:46:09,231 [main] INFO  (DfCreateSchemaProcess#createSchema():297) - *               *
2025-10-08 11:46:09,231 [main] INFO  (DfCreateSchemaProcess#createSchema():298) - * * * * * * * * *
2025-10-08 11:46:09,232 [main] INFO  (DfSqlFileFireMan#fire():68) - ...Firing: replace-schema-00-system.sql
2025-10-08 11:46:09,233 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2025-10-08 11:46:09,234 [main] INFO  (DfCreateSchemaProcess$1#dispatch():325) - ...Creating a connection to system
2025-10-08 11:46:09,234 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():539) - ...Creating a connection for additional user: root
2025-10-08 11:46:09,250 [main] INFO  (DfCreateSchemaProcess$1#dispatch():351) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2025-10-08 11:46:09,251 [main] INFO  (DfCreateSchemaProcess$1#dispatch():353) -  -> Can't create database 'maihamadb'; database exists
2025-10-08 11:46:09,251 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():463) - ...Reviving the user 'system' until the end of this SQL file
2025-10-08 11:46:09,251 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
create user maihamadb@localhost identified by 'maihamadb'
2025-10-08 11:46:09,254 [main] INFO  (DfCreateSchemaProcess$1#dispatch():351) - ...Saying good-bye to the user 'system' because of checked: [mainUser, grant]
2025-10-08 11:46:09,254 [main] INFO  (DfCreateSchemaProcess$1#dispatch():353) -  -> Operation CREATE USER failed for 'maihamadb'@'localhost'
2025-10-08 11:46:09,254 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():463) - ...Reviving the user 'system' until the end of this SQL file
2025-10-08 11:46:09,254 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.* to maihamadb@localhost
2025-10-08 11:46:09,256 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2025-10-08 11:46:09,257 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2025-10-08 11:46:09,257 [main] INFO  (DfSqlFileFireMan#fire():68) - ...Firing: replace-schema-10-basic.sql
2025-10-08 11:46:09,257 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():400) - ...Saying good-bye to the user 'system' again
2025-10-08 11:46:09,258 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():404) - ...Clearing revived users
2025-10-08 11:46:09,258 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():411) - ...Coming back to the main user from the user 'system'
2025-10-08 11:46:09,260 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table `MEMBER`(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2025-10-08 11:46:09,266 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2025-10-08 11:46:09,270 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2025-10-08 11:46:09,275 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2025-10-08 11:46:09,279 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    AKIRAKANI_OKASHII_KARAMU_MEI INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2025-10-08 11:46:09,283 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2025-10-08 11:46:09,287 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2025-10-08 11:46:09,292 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2025-10-08 11:46:09,296 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2025-10-08 11:46:09,300 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2025-10-08 11:46:09,304 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2025-10-08 11:46:09,307 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2025-10-08 11:46:09,311 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2025-10-08 11:46:09,314 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2025-10-08 11:46:09,319 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2025-10-08 11:46:09,323 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table `MEMBER` add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2025-10-08 11:46:09,334 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-08 11:46:09,344 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2025-10-08 11:46:09,354 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2025-10-08 11:46:09,364 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-08 11:46:09,373 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-08 11:46:09,382 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2025-10-08 11:46:09,392 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-08 11:46:09,401 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-08 11:46:09,411 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2025-10-08 11:46:09,421 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-08 11:46:09,433 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2025-10-08 11:46:09,445 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2025-10-08 11:46:09,456 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2025-10-08 11:46:09,468 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2025-10-08 11:46:09,481 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2025-10-08 11:46:09,491 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on `MEMBER`(MEMBER_NAME)
2025-10-08 11:46:09,502 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on `MEMBER`(FORMALIZED_DATETIME)
2025-10-08 11:46:09,516 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2025-10-08 11:46:09,520 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(AKIRAKANI_OKASHII_KARAMU_MEI)
2025-10-08 11:46:09,524 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2025-10-08 11:46:09,532 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2025-10-08 11:46:09,539 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2025-10-08 11:46:09,547 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2025-10-08 11:46:09,553 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2025-10-08 11:46:09,560 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=40 failure=0
2025-10-08 11:46:09,561 [main] INFO  (DfSqlFileFireMan#fire():93) - Create Schema: success=42, failure=0 (in 2 files)
2025-10-08 11:46:09,561 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():594) - ...Closing connections to change-users: [system]
2025-10-08 11:46:09,576 [main] INFO  (DfLoadDataProcess#execute():133) - 
2025-10-08 11:46:09,576 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2025-10-08 11:46:09,576 [main] INFO  (DfLoadDataProcess#execute():135) - *                   *
2025-10-08 11:46:09,576 [main] INFO  (DfLoadDataProcess#execute():136) - * Load Data         *
2025-10-08 11:46:09,576 [main] INFO  (DfLoadDataProcess#execute():137) - *                   *
2025-10-08 11:46:09,576 [main] INFO  (DfLoadDataProcess#execute():138) - * * * * * * * * * * *
2025-10-08 11:46:09,587 [main] WARN  (DfDelimiterDataHandlerImpl#writeSeveralData():96) - The encoding(directory name) is unsupported: encoding=acyclic_01_02-PRODUCT_CATEGORY.tsv
2025-10-08 11:46:09,591 [main] WARN  (DfDelimiterDataHandlerImpl#writeSeveralData():96) - The encoding(directory name) is unsupported: encoding=acyclic_01_04-REGION.tsv
2025-10-08 11:46:09,595 [main] WARN  (DfDelimiterDataHandlerImpl#writeSeveralData():96) - The encoding(directory name) is unsupported: encoding=acyclic_01_01-MEMBER_STATUS.tsv
2025-10-08 11:46:09,599 [main] WARN  (DfDelimiterDataHandlerImpl#writeSeveralData():96) - The encoding(directory name) is unsupported: encoding=acyclic_01_03-PRODUCT_STATUS.tsv
2025-10-08 11:46:09,603 [main] WARN  (DfDelimiterDataHandlerImpl#writeSeveralData():96) - The encoding(directory name) is unsupported: encoding=acyclic_01_06-WITHDRAWAL_REASON.tsv
2025-10-08 11:46:09,605 [main] WARN  (DfDelimiterDataHandlerImpl#writeSeveralData():96) - The encoding(directory name) is unsupported: encoding=acyclic_01_05-SERVICE_RANK.tsv
2025-10-08 11:46:09,606 [main] INFO  (DfTakeFinallyProcess#takeFinally():244) - 
2025-10-08 11:46:09,606 [main] INFO  (DfTakeFinallyProcess#takeFinally():245) - * * * * * * * **
2025-10-08 11:46:09,606 [main] INFO  (DfTakeFinallyProcess#takeFinally():246) - *              *
2025-10-08 11:46:09,606 [main] INFO  (DfTakeFinallyProcess#takeFinally():247) - * Take Finally *
2025-10-08 11:46:09,606 [main] INFO  (DfTakeFinallyProcess#takeFinally():248) - *              *
2025-10-08 11:46:09,606 [main] INFO  (DfTakeFinallyProcess#takeFinally():249) - * * * * * * * **
2025-10-08 11:46:09,608 [main] INFO  (DfSqlFileFireMan#fire():68) - ...Firing: take-finally.sql
2025-10-08 11:46:09,609 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=0 failure=0
2025-10-08 11:46:09,609 [main] INFO  (DfSqlFileFireMan#fire():93) - Take Finally: success=0, failure=0 (in 1 files)
2025-10-08 11:46:09,610 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2025-10-08 11:46:09,611 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m02s195ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 8.0.43)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {password=, user=root}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 Create Schema: success=42, failure=0 (in 2 files) - 00m00s575ms
  (Initialize Schema) - 00m00s242ms
  (Create Schema) - 00m00s331ms
  o replace-schema-00-system.sql
  o replace-schema-10-basic.sql

 Load Data: *empty loading - 00m00s029ms
  - (no data file)

 Take Finally: success=0, failure=0 (in 1 files) - 00m00s003ms
  o take-finally.sql
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2025-10-08 11:47:10,351 [main] INFO  (DfReplaceSchemaTask#begin():94) - +------------------------------------------+
2025-10-08 11:47:10,352 [main] INFO  (DfReplaceSchemaTask#begin():95) - |                                          |
2025-10-08 11:47:10,352 [main] INFO  (DfReplaceSchemaTask#begin():96) - |              ReplaceSchema               |
2025-10-08 11:47:10,354 [main] INFO  (DfReplaceSchemaTask#begin():104) - |                                          |
2025-10-08 11:47:10,354 [main] INFO  (DfReplaceSchemaTask#begin():105) - +------------------------------------------+
2025-10-08 11:47:10,355 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():423) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2025-10-08 11:47:11,843 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2025-10-08 11:47:11,843 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2025-10-08 11:47:11,843 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
2025-10-08 11:47:11,843 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2025-10-08 11:47:11,848 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2025-10-08 11:47:12,141 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 8.0.43
2025-10-08 11:47:12,141 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.49 ( Revision: ad86f36e100e104cd926c6b81c8cab9565750116 ) for JDBC 4.0
2025-10-08 11:47:12,147 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():253) - 
2025-10-08 11:47:12,148 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():254) - * * * * * * * * * * *
2025-10-08 11:47:12,148 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():255) - *                   *
2025-10-08 11:47:12,148 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():256) - * Initialize Schema *
2025-10-08 11:47:12,148 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():257) - *                   *
2025-10-08 11:47:12,148 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():258) - * * * * * * * * * * *
2025-10-08 11:47:12,152 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 11:47:12,152 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 11:47:12,152 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 11:47:12,184 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_address
2025-10-08 11:47:12,193 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_login
2025-10-08 11:47:12,197 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_security
2025-10-08 11:47:12,201 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_service
2025-10-08 11:47:12,207 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_withdrawal
2025-10-08 11:47:12,214 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table purchase_payment
2025-10-08 11:47:12,222 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table `member` drop foreign key FK_MEMBER_MEMBER_STATUS
2025-10-08 11:47:12,236 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2025-10-08 11:47:12,241 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2025-10-08 11:47:12,246 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2025-10-08 11:47:12,250 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2025-10-08 11:47:12,257 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2025-10-08 11:47:12,263 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2025-10-08 11:47:12,267 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2025-10-08 11:47:12,273 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2025-10-08 11:47:12,279 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2025-10-08 11:47:12,283 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2025-10-08 11:47:12,290 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2025-10-08 11:47:12,297 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2025-10-08 11:47:12,303 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2025-10-08 11:47:12,309 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2025-10-08 11:47:12,318 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2025-10-08 11:47:12,325 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table `member`
2025-10-08 11:47:12,328 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_address
2025-10-08 11:47:12,330 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_login
2025-10-08 11:47:12,332 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_security
2025-10-08 11:47:12,334 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_service
2025-10-08 11:47:12,336 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_status
2025-10-08 11:47:12,339 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_withdrawal
2025-10-08 11:47:12,341 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table product
2025-10-08 11:47:12,344 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table product_category
2025-10-08 11:47:12,346 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table product_status
2025-10-08 11:47:12,349 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table purchase
2025-10-08 11:47:12,352 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table purchase_payment
2025-10-08 11:47:12,354 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table region
2025-10-08 11:47:12,356 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table service_rank
2025-10-08 11:47:12,358 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table withdrawal_reason
2025-10-08 11:47:12,371 [main] INFO  (DfCreateSchemaProcess#createSchema():293) - 
2025-10-08 11:47:12,372 [main] INFO  (DfCreateSchemaProcess#createSchema():294) - * * * * * * * * *
2025-10-08 11:47:12,372 [main] INFO  (DfCreateSchemaProcess#createSchema():295) - *               *
2025-10-08 11:47:12,372 [main] INFO  (DfCreateSchemaProcess#createSchema():296) - * Create Schema *
2025-10-08 11:47:12,372 [main] INFO  (DfCreateSchemaProcess#createSchema():297) - *               *
2025-10-08 11:47:12,372 [main] INFO  (DfCreateSchemaProcess#createSchema():298) - * * * * * * * * *
2025-10-08 11:47:12,374 [main] INFO  (DfSqlFileFireMan#fire():68) - ...Firing: replace-schema-00-system.sql
2025-10-08 11:47:12,375 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2025-10-08 11:47:12,375 [main] INFO  (DfCreateSchemaProcess$1#dispatch():325) - ...Creating a connection to system
2025-10-08 11:47:12,376 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():539) - ...Creating a connection for additional user: root
2025-10-08 11:47:12,394 [main] INFO  (DfCreateSchemaProcess$1#dispatch():351) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2025-10-08 11:47:12,394 [main] INFO  (DfCreateSchemaProcess$1#dispatch():353) -  -> Can't create database 'maihamadb'; database exists
2025-10-08 11:47:12,394 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():463) - ...Reviving the user 'system' until the end of this SQL file
2025-10-08 11:47:12,394 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
create user maihamadb@localhost identified by 'maihamadb'
2025-10-08 11:47:12,398 [main] INFO  (DfCreateSchemaProcess$1#dispatch():351) - ...Saying good-bye to the user 'system' because of checked: [mainUser, grant]
2025-10-08 11:47:12,398 [main] INFO  (DfCreateSchemaProcess$1#dispatch():353) -  -> Operation CREATE USER failed for 'maihamadb'@'localhost'
2025-10-08 11:47:12,398 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():463) - ...Reviving the user 'system' until the end of this SQL file
2025-10-08 11:47:12,398 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.* to maihamadb@localhost
2025-10-08 11:47:12,399 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2025-10-08 11:47:12,401 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2025-10-08 11:47:12,401 [main] INFO  (DfSqlFileFireMan#fire():68) - ...Firing: replace-schema-10-basic.sql
2025-10-08 11:47:12,401 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():400) - ...Saying good-bye to the user 'system' again
2025-10-08 11:47:12,401 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():404) - ...Clearing revived users
2025-10-08 11:47:12,401 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():411) - ...Coming back to the main user from the user 'system'
2025-10-08 11:47:12,404 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table `MEMBER`(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2025-10-08 11:47:12,409 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2025-10-08 11:47:12,414 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2025-10-08 11:47:12,418 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2025-10-08 11:47:12,423 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    AKIRAKANI_OKASHII_KARAMU_MEI INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2025-10-08 11:47:12,427 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2025-10-08 11:47:12,431 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2025-10-08 11:47:12,437 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2025-10-08 11:47:12,441 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2025-10-08 11:47:12,445 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2025-10-08 11:47:12,449 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2025-10-08 11:47:12,452 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2025-10-08 11:47:12,455 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2025-10-08 11:47:12,459 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2025-10-08 11:47:12,463 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2025-10-08 11:47:12,466 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table `MEMBER` add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2025-10-08 11:47:12,477 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-08 11:47:12,486 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2025-10-08 11:47:12,497 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2025-10-08 11:47:12,506 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-08 11:47:12,516 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-08 11:47:12,525 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2025-10-08 11:47:12,535 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-08 11:47:12,544 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-08 11:47:12,554 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2025-10-08 11:47:12,564 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-08 11:47:12,576 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2025-10-08 11:47:12,588 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2025-10-08 11:47:12,598 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2025-10-08 11:47:12,611 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2025-10-08 11:47:12,624 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2025-10-08 11:47:12,634 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on `MEMBER`(MEMBER_NAME)
2025-10-08 11:47:12,646 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on `MEMBER`(FORMALIZED_DATETIME)
2025-10-08 11:47:12,658 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2025-10-08 11:47:12,664 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(AKIRAKANI_OKASHII_KARAMU_MEI)
2025-10-08 11:47:12,669 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2025-10-08 11:47:12,677 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2025-10-08 11:47:12,683 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2025-10-08 11:47:12,690 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2025-10-08 11:47:12,695 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2025-10-08 11:47:12,703 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=40 failure=0
2025-10-08 11:47:12,703 [main] INFO  (DfSqlFileFireMan#fire():93) - Create Schema: success=42, failure=0 (in 2 files)
2025-10-08 11:47:12,703 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():594) - ...Closing connections to change-users: [system]
2025-10-08 11:47:12,719 [main] INFO  (DfLoadDataProcess#execute():133) - 
2025-10-08 11:47:12,720 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2025-10-08 11:47:12,720 [main] INFO  (DfLoadDataProcess#execute():135) - *                   *
2025-10-08 11:47:12,720 [main] INFO  (DfLoadDataProcess#execute():136) - * Load Data         *
2025-10-08 11:47:12,720 [main] INFO  (DfLoadDataProcess#execute():137) - *                   *
2025-10-08 11:47:12,720 [main] INFO  (DfLoadDataProcess#execute():138) - * * * * * * * * * * *
2025-10-08 11:47:12,729 [main] INFO  (DfDelimiterDataWriterImpl#writeData():97) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-10-08 11:47:12,729 [main] INFO  (DfDelimiterDataWriterImpl#writeData():98) - writeData(playsql/data/common/tsv/UTF-8/acyclic_01_01-MEMBER_STATUS.tsv)
2025-10-08 11:47:12,729 [main] INFO  (DfDelimiterDataWriterImpl#writeData():99) - = = = = = = =/
2025-10-08 11:47:12,729 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 11:47:12,729 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 11:47:12,729 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 11:47:12,739 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2025-10-08 11:47:12,753 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2025-10-08 11:47:12,754 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2025-10-08 11:47:12,758 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 3 rows are loaded to MEMBER_STATUS
2025-10-08 11:47:12,759 [main] INFO  (DfDelimiterDataWriterImpl#writeData():97) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-10-08 11:47:12,759 [main] INFO  (DfDelimiterDataWriterImpl#writeData():98) - writeData(playsql/data/common/tsv/UTF-8/acyclic_01_02-PRODUCT_CATEGORY.tsv)
2025-10-08 11:47:12,759 [main] INFO  (DfDelimiterDataWriterImpl#writeData():99) - = = = = = = =/
2025-10-08 11:47:12,759 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 11:47:12,759 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 11:47:12,759 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 11:47:12,763 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_CATEGORY:{FOD, 食品, null}
2025-10-08 11:47:12,763 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2025-10-08 11:47:12,763 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2025-10-08 11:47:12,764 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2025-10-08 11:47:12,764 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2025-10-08 11:47:12,765 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2025-10-08 11:47:12,765 [main] INFO  (DfDelimiterDataWriterImpl#writeData():97) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-10-08 11:47:12,766 [main] INFO  (DfDelimiterDataWriterImpl#writeData():98) - writeData(playsql/data/common/tsv/UTF-8/acyclic_01_03-PRODUCT_STATUS.tsv)
2025-10-08 11:47:12,766 [main] INFO  (DfDelimiterDataWriterImpl#writeData():99) - = = = = = = =/
2025-10-08 11:47:12,766 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 11:47:12,766 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 11:47:12,766 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 11:47:12,769 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_STATUS:{ONS, 生産販売可能}
2025-10-08 11:47:12,770 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_STATUS:{PST, 生産中止}
2025-10-08 11:47:12,770 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_STATUS:{SST, 販売中止}
2025-10-08 11:47:12,771 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 3 rows are loaded to PRODUCT_STATUS
2025-10-08 11:47:12,772 [main] INFO  (DfDelimiterDataWriterImpl#writeData():97) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-10-08 11:47:12,772 [main] INFO  (DfDelimiterDataWriterImpl#writeData():98) - writeData(playsql/data/common/tsv/UTF-8/acyclic_01_04-REGION.tsv)
2025-10-08 11:47:12,772 [main] INFO  (DfDelimiterDataWriterImpl#writeData():99) - = = = = = = =/
2025-10-08 11:47:12,772 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 11:47:12,772 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 11:47:12,772 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 11:47:12,778 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - REGION:{1, アメリカ}
2025-10-08 11:47:12,778 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - REGION:{2, カナダ}
2025-10-08 11:47:12,778 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - REGION:{3, 中国}
2025-10-08 11:47:12,778 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - REGION:{4, 千葉}
2025-10-08 11:47:12,780 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 4 rows are loaded to REGION
2025-10-08 11:47:12,781 [main] INFO  (DfDelimiterDataWriterImpl#writeData():97) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-10-08 11:47:12,781 [main] INFO  (DfDelimiterDataWriterImpl#writeData():98) - writeData(playsql/data/common/tsv/UTF-8/acyclic_01_05-SERVICE_RANK.tsv)
2025-10-08 11:47:12,781 [main] INFO  (DfDelimiterDataWriterImpl#writeData():99) - = = = = = = =/
2025-10-08 11:47:12,781 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 11:47:12,781 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 11:47:12,781 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 11:47:12,785 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - SERVICE_RANK:{BRZ, BRONZE, 2.000, 1, bronze rank, 4}
2025-10-08 11:47:12,785 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - SERVICE_RANK:{GLD, GOLD, 9.200, 1, gold rank, 2}
2025-10-08 11:47:12,785 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - SERVICE_RANK:{PLS, PLASTIC, 0.100, 0, plastic rank, 5}
2025-10-08 11:47:12,785 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - SERVICE_RANK:{PLT, PLATINUM, 12.300, 1, platinum rank, 1}
2025-10-08 11:47:12,786 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - SERVICE_RANK:{SIL, SILVER, 6.740, 1, silver rank, 3}
2025-10-08 11:47:12,787 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 5 rows are loaded to SERVICE_RANK
2025-10-08 11:47:12,788 [main] INFO  (DfDelimiterDataWriterImpl#writeData():97) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-10-08 11:47:12,788 [main] INFO  (DfDelimiterDataWriterImpl#writeData():98) - writeData(playsql/data/common/tsv/UTF-8/acyclic_01_06-WITHDRAWAL_REASON.tsv)
2025-10-08 11:47:12,788 [main] INFO  (DfDelimiterDataWriterImpl#writeData():99) - = = = = = = =/
2025-10-08 11:47:12,788 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 11:47:12,788 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 11:47:12,788 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 11:47:12,796 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2025-10-08 11:47:12,796 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2025-10-08 11:47:12,797 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2025-10-08 11:47:12,797 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2025-10-08 11:47:12,798 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2025-10-08 11:47:12,799 [main] INFO  (DfLoadDataProcess#lazyCheckLoadedClassifiaction():387) - ...Checking implicit set of classification
2025-10-08 11:47:12,803 [main] INFO  (DfTakeFinallyProcess#takeFinally():244) - 
2025-10-08 11:47:12,803 [main] INFO  (DfTakeFinallyProcess#takeFinally():245) - * * * * * * * **
2025-10-08 11:47:12,803 [main] INFO  (DfTakeFinallyProcess#takeFinally():246) - *              *
2025-10-08 11:47:12,803 [main] INFO  (DfTakeFinallyProcess#takeFinally():247) - * Take Finally *
2025-10-08 11:47:12,803 [main] INFO  (DfTakeFinallyProcess#takeFinally():248) - *              *
2025-10-08 11:47:12,803 [main] INFO  (DfTakeFinallyProcess#takeFinally():249) - * * * * * * * **
2025-10-08 11:47:12,805 [main] INFO  (DfSqlFileFireMan#fire():68) - ...Firing: take-finally.sql
2025-10-08 11:47:12,806 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=0 failure=0
2025-10-08 11:47:12,806 [main] INFO  (DfSqlFileFireMan#fire():93) - Take Finally: success=0, failure=0 (in 1 files)
2025-10-08 11:47:12,807 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2025-10-08 11:47:12,808 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m02s463ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 8.0.43)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {password=, user=root}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 Create Schema: success=42, failure=0 (in 2 files) - 00m00s560ms
  (Initialize Schema) - 00m00s224ms
  (Create Schema) - 00m00s332ms
  o replace-schema-00-system.sql
  o replace-schema-10-basic.sql

 Load Data: common:{tsv=6} - 00m00s082ms
  <common>
  o acyclic_01_01-MEMBER_STATUS.tsv
  o acyclic_01_02-PRODUCT_CATEGORY.tsv
  o acyclic_01_03-PRODUCT_STATUS.tsv
  o acyclic_01_04-REGION.tsv
  o acyclic_01_05-SERVICE_RANK.tsv
  o acyclic_01_06-WITHDRAWAL_REASON.tsv

 Take Finally: success=0, failure=0 (in 1 files) - 00m00s004ms
  o take-finally.sql
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2025-10-08 20:18:59,485 [main] INFO  (DfReplaceSchemaTask#begin():94) - +------------------------------------------+
2025-10-08 20:18:59,486 [main] INFO  (DfReplaceSchemaTask#begin():95) - |                                          |
2025-10-08 20:18:59,486 [main] INFO  (DfReplaceSchemaTask#begin():96) - |              ReplaceSchema               |
2025-10-08 20:18:59,488 [main] INFO  (DfReplaceSchemaTask#begin():104) - |                                          |
2025-10-08 20:18:59,488 [main] INFO  (DfReplaceSchemaTask#begin():105) - +------------------------------------------+
2025-10-08 20:18:59,488 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():423) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2025-10-08 20:19:00,923 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2025-10-08 20:19:00,923 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2025-10-08 20:19:00,923 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
2025-10-08 20:19:00,923 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2025-10-08 20:19:00,929 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2025-10-08 20:19:01,204 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 8.0.43
2025-10-08 20:19:01,204 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.49 ( Revision: ad86f36e100e104cd926c6b81c8cab9565750116 ) for JDBC 4.0
2025-10-08 20:19:01,211 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():253) - 
2025-10-08 20:19:01,211 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():254) - * * * * * * * * * * *
2025-10-08 20:19:01,211 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():255) - *                   *
2025-10-08 20:19:01,211 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():256) - * Initialize Schema *
2025-10-08 20:19:01,211 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():257) - *                   *
2025-10-08 20:19:01,211 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():258) - * * * * * * * * * * *
2025-10-08 20:19:01,217 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 20:19:01,217 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 20:19:01,217 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 20:19:01,259 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_address
2025-10-08 20:19:01,265 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_login
2025-10-08 20:19:01,270 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_security
2025-10-08 20:19:01,275 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_service
2025-10-08 20:19:01,281 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_withdrawal
2025-10-08 20:19:01,291 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table purchase_payment
2025-10-08 20:19:01,300 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table `member` drop foreign key FK_MEMBER_MEMBER_STATUS
2025-10-08 20:19:01,316 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2025-10-08 20:19:01,320 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2025-10-08 20:19:01,325 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2025-10-08 20:19:01,331 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2025-10-08 20:19:01,337 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2025-10-08 20:19:01,344 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2025-10-08 20:19:01,349 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2025-10-08 20:19:01,356 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2025-10-08 20:19:01,362 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2025-10-08 20:19:01,368 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2025-10-08 20:19:01,375 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2025-10-08 20:19:01,383 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2025-10-08 20:19:01,389 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2025-10-08 20:19:01,396 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2025-10-08 20:19:01,404 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2025-10-08 20:19:01,413 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table `member`
2025-10-08 20:19:01,415 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_address
2025-10-08 20:19:01,417 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_login
2025-10-08 20:19:01,419 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_security
2025-10-08 20:19:01,422 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_service
2025-10-08 20:19:01,424 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_status
2025-10-08 20:19:01,426 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_withdrawal
2025-10-08 20:19:01,428 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table product
2025-10-08 20:19:01,431 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table product_category
2025-10-08 20:19:01,434 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table product_status
2025-10-08 20:19:01,436 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table purchase
2025-10-08 20:19:01,439 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table purchase_payment
2025-10-08 20:19:01,442 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table region
2025-10-08 20:19:01,444 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table service_rank
2025-10-08 20:19:01,446 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table withdrawal_reason
2025-10-08 20:19:01,460 [main] INFO  (DfCreateSchemaProcess#createSchema():293) - 
2025-10-08 20:19:01,460 [main] INFO  (DfCreateSchemaProcess#createSchema():294) - * * * * * * * * *
2025-10-08 20:19:01,460 [main] INFO  (DfCreateSchemaProcess#createSchema():295) - *               *
2025-10-08 20:19:01,461 [main] INFO  (DfCreateSchemaProcess#createSchema():296) - * Create Schema *
2025-10-08 20:19:01,461 [main] INFO  (DfCreateSchemaProcess#createSchema():297) - *               *
2025-10-08 20:19:01,461 [main] INFO  (DfCreateSchemaProcess#createSchema():298) - * * * * * * * * *
2025-10-08 20:19:01,462 [main] INFO  (DfSqlFileFireMan#fire():68) - ...Firing: replace-schema-00-system.sql
2025-10-08 20:19:01,463 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2025-10-08 20:19:01,463 [main] INFO  (DfCreateSchemaProcess$1#dispatch():325) - ...Creating a connection to system
2025-10-08 20:19:01,464 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():539) - ...Creating a connection for additional user: root
2025-10-08 20:19:01,479 [main] INFO  (DfCreateSchemaProcess$1#dispatch():351) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2025-10-08 20:19:01,479 [main] INFO  (DfCreateSchemaProcess$1#dispatch():353) -  -> Can't create database 'maihamadb'; database exists
2025-10-08 20:19:01,479 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():463) - ...Reviving the user 'system' until the end of this SQL file
2025-10-08 20:19:01,479 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
create user maihamadb@localhost identified by 'maihamadb'
2025-10-08 20:19:01,483 [main] INFO  (DfCreateSchemaProcess$1#dispatch():351) - ...Saying good-bye to the user 'system' because of checked: [mainUser, grant]
2025-10-08 20:19:01,483 [main] INFO  (DfCreateSchemaProcess$1#dispatch():353) -  -> Operation CREATE USER failed for 'maihamadb'@'localhost'
2025-10-08 20:19:01,483 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():463) - ...Reviving the user 'system' until the end of this SQL file
2025-10-08 20:19:01,483 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.* to maihamadb@localhost
2025-10-08 20:19:01,484 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2025-10-08 20:19:01,485 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2025-10-08 20:19:01,486 [main] INFO  (DfSqlFileFireMan#fire():68) - ...Firing: replace-schema-10-basic.sql
2025-10-08 20:19:01,486 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():400) - ...Saying good-bye to the user 'system' again
2025-10-08 20:19:01,486 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():404) - ...Clearing revived users
2025-10-08 20:19:01,486 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():411) - ...Coming back to the main user from the user 'system'
2025-10-08 20:19:01,489 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table `MEMBER`(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2025-10-08 20:19:01,494 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2025-10-08 20:19:01,499 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2025-10-08 20:19:01,504 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2025-10-08 20:19:01,508 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    AKIRAKANI_OKASHII_KARAMU_MEI INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2025-10-08 20:19:01,511 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2025-10-08 20:19:01,516 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2025-10-08 20:19:01,521 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2025-10-08 20:19:01,524 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2025-10-08 20:19:01,529 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2025-10-08 20:19:01,533 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2025-10-08 20:19:01,537 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2025-10-08 20:19:01,541 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2025-10-08 20:19:01,546 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2025-10-08 20:19:01,550 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2025-10-08 20:19:01,554 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table `MEMBER` add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2025-10-08 20:19:01,566 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-08 20:19:01,576 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2025-10-08 20:19:01,588 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2025-10-08 20:19:01,598 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-08 20:19:01,608 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-08 20:19:01,618 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2025-10-08 20:19:01,628 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-08 20:19:01,637 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-08 20:19:01,646 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2025-10-08 20:19:01,657 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-08 20:19:01,667 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2025-10-08 20:19:01,678 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2025-10-08 20:19:01,688 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2025-10-08 20:19:01,701 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2025-10-08 20:19:01,714 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2025-10-08 20:19:01,724 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on `MEMBER`(MEMBER_NAME)
2025-10-08 20:19:01,735 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on `MEMBER`(FORMALIZED_DATETIME)
2025-10-08 20:19:01,748 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2025-10-08 20:19:01,752 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(AKIRAKANI_OKASHII_KARAMU_MEI)
2025-10-08 20:19:01,757 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2025-10-08 20:19:01,765 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2025-10-08 20:19:01,772 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2025-10-08 20:19:01,778 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2025-10-08 20:19:01,783 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2025-10-08 20:19:01,790 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=40 failure=0
2025-10-08 20:19:01,790 [main] INFO  (DfSqlFileFireMan#fire():93) - Create Schema: success=42, failure=0 (in 2 files)
2025-10-08 20:19:01,790 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():594) - ...Closing connections to change-users: [system]
2025-10-08 20:19:01,805 [main] INFO  (DfLoadDataProcess#execute():133) - 
2025-10-08 20:19:01,805 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2025-10-08 20:19:01,805 [main] INFO  (DfLoadDataProcess#execute():135) - *                   *
2025-10-08 20:19:01,805 [main] INFO  (DfLoadDataProcess#execute():136) - * Load Data         *
2025-10-08 20:19:01,805 [main] INFO  (DfLoadDataProcess#execute():137) - *                   *
2025-10-08 20:19:01,805 [main] INFO  (DfLoadDataProcess#execute():138) - * * * * * * * * * * *
2025-10-08 20:19:01,814 [main] INFO  (DfDelimiterDataWriterImpl#writeData():97) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-10-08 20:19:01,814 [main] INFO  (DfDelimiterDataWriterImpl#writeData():98) - writeData(playsql/data/common/tsv/UTF-8/acyclic_01_01-MEMBER_STATUS.tsv)
2025-10-08 20:19:01,814 [main] INFO  (DfDelimiterDataWriterImpl#writeData():99) - = = = = = = =/
2025-10-08 20:19:01,814 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 20:19:01,814 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 20:19:01,814 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 20:19:01,824 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2025-10-08 20:19:01,840 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2025-10-08 20:19:01,840 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2025-10-08 20:19:01,842 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 3 rows are loaded to MEMBER_STATUS
2025-10-08 20:19:01,843 [main] INFO  (DfDelimiterDataWriterImpl#writeData():97) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-10-08 20:19:01,843 [main] INFO  (DfDelimiterDataWriterImpl#writeData():98) - writeData(playsql/data/common/tsv/UTF-8/acyclic_01_02-PRODUCT_CATEGORY.tsv)
2025-10-08 20:19:01,843 [main] INFO  (DfDelimiterDataWriterImpl#writeData():99) - = = = = = = =/
2025-10-08 20:19:01,843 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 20:19:01,843 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 20:19:01,843 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 20:19:01,847 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_CATEGORY:{FOD, 食品, null}
2025-10-08 20:19:01,848 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2025-10-08 20:19:01,848 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2025-10-08 20:19:01,848 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2025-10-08 20:19:01,848 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2025-10-08 20:19:01,849 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2025-10-08 20:19:01,850 [main] INFO  (DfDelimiterDataWriterImpl#writeData():97) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-10-08 20:19:01,850 [main] INFO  (DfDelimiterDataWriterImpl#writeData():98) - writeData(playsql/data/common/tsv/UTF-8/acyclic_01_03-PRODUCT_STATUS.tsv)
2025-10-08 20:19:01,850 [main] INFO  (DfDelimiterDataWriterImpl#writeData():99) - = = = = = = =/
2025-10-08 20:19:01,850 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 20:19:01,850 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 20:19:01,850 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 20:19:01,854 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_STATUS:{ONS, 生産販売可能}
2025-10-08 20:19:01,854 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_STATUS:{PST, 生産中止}
2025-10-08 20:19:01,854 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_STATUS:{SST, 販売中止}
2025-10-08 20:19:01,856 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 3 rows are loaded to PRODUCT_STATUS
2025-10-08 20:19:01,856 [main] INFO  (DfDelimiterDataWriterImpl#writeData():97) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-10-08 20:19:01,856 [main] INFO  (DfDelimiterDataWriterImpl#writeData():98) - writeData(playsql/data/common/tsv/UTF-8/acyclic_01_04-REGION.tsv)
2025-10-08 20:19:01,856 [main] INFO  (DfDelimiterDataWriterImpl#writeData():99) - = = = = = = =/
2025-10-08 20:19:01,856 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 20:19:01,856 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 20:19:01,856 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 20:19:01,860 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - REGION:{1, アメリカ}
2025-10-08 20:19:01,861 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - REGION:{2, カナダ}
2025-10-08 20:19:01,861 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - REGION:{3, 中国}
2025-10-08 20:19:01,861 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - REGION:{4, 千葉}
2025-10-08 20:19:01,862 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 4 rows are loaded to REGION
2025-10-08 20:19:01,862 [main] INFO  (DfDelimiterDataWriterImpl#writeData():97) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-10-08 20:19:01,862 [main] INFO  (DfDelimiterDataWriterImpl#writeData():98) - writeData(playsql/data/common/tsv/UTF-8/acyclic_01_05-SERVICE_RANK.tsv)
2025-10-08 20:19:01,862 [main] INFO  (DfDelimiterDataWriterImpl#writeData():99) - = = = = = = =/
2025-10-08 20:19:01,862 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 20:19:01,863 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 20:19:01,863 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 20:19:01,867 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - SERVICE_RANK:{BRZ, BRONZE, 2.000, 1, bronze rank, 4}
2025-10-08 20:19:01,867 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - SERVICE_RANK:{GLD, GOLD, 9.200, 1, gold rank, 2}
2025-10-08 20:19:01,867 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - SERVICE_RANK:{PLS, PLASTIC, 0.100, 0, plastic rank, 5}
2025-10-08 20:19:01,868 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - SERVICE_RANK:{PLT, PLATINUM, 12.300, 1, platinum rank, 1}
2025-10-08 20:19:01,868 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - SERVICE_RANK:{SIL, SILVER, 6.740, 1, silver rank, 3}
2025-10-08 20:19:01,870 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 5 rows are loaded to SERVICE_RANK
2025-10-08 20:19:01,870 [main] INFO  (DfDelimiterDataWriterImpl#writeData():97) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-10-08 20:19:01,870 [main] INFO  (DfDelimiterDataWriterImpl#writeData():98) - writeData(playsql/data/common/tsv/UTF-8/acyclic_01_06-WITHDRAWAL_REASON.tsv)
2025-10-08 20:19:01,870 [main] INFO  (DfDelimiterDataWriterImpl#writeData():99) - = = = = = = =/
2025-10-08 20:19:01,871 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 20:19:01,871 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 20:19:01,871 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 20:19:01,874 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2025-10-08 20:19:01,875 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2025-10-08 20:19:01,875 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2025-10-08 20:19:01,875 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2025-10-08 20:19:01,877 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2025-10-08 20:19:01,878 [main] INFO  (DfDelimiterDataWriterImpl#writeData():97) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-10-08 20:19:01,878 [main] INFO  (DfDelimiterDataWriterImpl#writeData():98) - writeData(playsql/data/ut/reversetsv/UTF-8/cyclic_01_01-PRODUCT.tsv)
2025-10-08 20:19:01,879 [main] INFO  (DfDelimiterDataWriterImpl#writeData():99) - = = = = = = =/
2025-10-08 20:19:01,879 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 20:19:01,879 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 20:19:01,879 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 20:19:01,883 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 0}
2025-10-08 20:19:01,883 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 0}
2025-10-08 20:19:01,883 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 0}
2025-10-08 20:19:01,885 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 0}
2025-10-08 20:19:01,885 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 0}
2025-10-08 20:19:01,885 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 0}
2025-10-08 20:19:01,885 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 0}
2025-10-08 20:19:01,885 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 0}
2025-10-08 20:19:01,885 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 0}
2025-10-08 20:19:01,885 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 0}
2025-10-08 20:19:01,885 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{11, River of Dreams, BILLYJOEL-11, MCD, ONS, 2100, 0}
2025-10-08 20:19:01,885 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{12, Grand Piano, PIANO-01, INS, ONS, 1400000, 0}
2025-10-08 20:19:01,886 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{13, Upright Piano, PIANO-02, INS, ONS, 1100000, 0}
2025-10-08 20:19:01,886 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{14, Low Price Flute, FLUTE-01, INS, ONS, 50000, 0}
2025-10-08 20:19:01,886 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{15, Silver Flute, FLUTE-02, INS, ONS, null, 0}
2025-10-08 20:19:01,886 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{16, Gold Flute, FLUTE-03, INS, ONS, null, 0}
2025-10-08 20:19:01,886 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{17, Rosemary (100g), HARB-100-01, HEB, ONS, 400, 0}
2025-10-08 20:19:01,886 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{18, Lemon Grass (100g), HARB-100-02, HEB, ONS, 380, 0}
2025-10-08 20:19:01,886 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{19, Camomile (100g), HARB-100-03, HEB, ONS, 380, 0}
2025-10-08 20:19:01,886 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{20, Hatomugi (100g), HARB-100-04, HEB, ONS, 340, 0}
2025-10-08 20:19:01,892 [main] INFO  (DfDelimiterDataWriterImpl#performNonBatchRetry():123) - ...Retrying as non-batch to derive target row
2025-10-08 20:19:01,893 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 0}
2025-10-08 20:19:01,894 [main] ERROR (DfDBFluteTaskUtil#logException():150) - Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Failed to execute DBFlute Task 'ReplaceSchema'.

[Advice]
Check the exception messages and the stack traces.

[Database Product]
MySQL 8.0.43

[JDBC Driver]
MySQL Connector Java mysql-connector-java-5.1.49 ( Revision: ad86f36e100e104cd926c6b81c8cab9565750116 ) for JDBC 4.0
* * * * * * * * * */
org.dbflute.exception.DfDelimiterDataRegistrationFailureException: Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Failed to register the table data.

[Advice]
Please confirm the SQLException message.
*And also check the insert values to not-null columns.

[Delimiter File]
playsql/data/ut/reversetsv/UTF-8/cyclic_01_01-PRODUCT.tsv

[Table]
PRODUCT

[SQLException]
org.dbflute.exception.DfJDBCException
JDBC said...
/- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[SQLException]
java.sql.BatchUpdateException
Field 'REGISTER_DATETIME' doesn't have a default value
- - - - - - - - - -/

[Target Row]
(derived from non-batch retry)
java.sql.SQLException
Field 'REGISTER_DATETIME' doesn't have a default value
/- - - - - - - - - - - - - - - - - - - -
Column Def: [PRODUCT_ID, PRODUCT_NAME, PRODUCT_HANDLE_CODE, PRODUCT_CATEGORY_CODE, PRODUCT_STATUS_CODE, REGULAR_PRICE, VERSION_NO]
Row Values: [1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 0]
Row Number: 1
- - - - - - - - - -/

[Executed SQL]
insert into PRODUCT (PRODUCT_ID, PRODUCT_NAME, PRODUCT_HANDLE_CODE, PRODUCT_CATEGORY_CODE, PRODUCT_STATUS_CODE, REGULAR_PRICE, VERSION_NO) values(?, ?, ?, ?, ?, ?, ?)

[Bind Type]
PRODUCT_ID = class java.lang.Integer
PRODUCT_NAME = class java.lang.String
PRODUCT_HANDLE_CODE = class java.lang.String
PRODUCT_CATEGORY_CODE = class java.lang.String
PRODUCT_STATUS_CODE = class java.lang.String
REGULAR_PRICE = class java.lang.Integer
VERSION_NO = class java.lang.Long

[String Processor]
PRODUCT_ID = NumberStringProcessor
PRODUCT_NAME = RealStringProcessor
PRODUCT_HANDLE_CODE = RealStringProcessor
PRODUCT_CATEGORY_CODE = RealStringProcessor
PRODUCT_STATUS_CODE = RealStringProcessor
REGULAR_PRICE = NumberStringProcessor
VERSION_NO = NumberStringProcessor
* * * * * * * * * */
	at org.dbflute.logic.replaceschema.loaddata.delimiter.DfDelimiterDataWriterImpl.doWriteData(DfDelimiterDataWriterImpl.java:359)
	at org.dbflute.logic.replaceschema.loaddata.delimiter.DfDelimiterDataWriterImpl.writeData(DfDelimiterDataWriterImpl.java:101)
	at org.dbflute.logic.replaceschema.loaddata.delimiter.DfDelimiterDataHandlerImpl.writeSeveralData(DfDelimiterDataHandlerImpl.java:127)
	at org.dbflute.logic.replaceschema.process.DfLoadDataProcess.writeDbFromDelimiterFile(DfLoadDataProcess.java:200)
	at org.dbflute.logic.replaceschema.process.DfLoadDataProcess.writeDbFromDelimiterFileAsLoadingTypeData(DfLoadDataProcess.java:190)
	at org.dbflute.logic.replaceschema.process.DfLoadDataProcess.execute(DfLoadDataProcess.java:161)
	at org.dbflute.task.DfReplaceSchemaTask.loadData(DfReplaceSchemaTask.java:361)
	at org.dbflute.task.DfReplaceSchemaTask.executeCoreProcess(DfReplaceSchemaTask.java:259)
	at org.dbflute.task.DfReplaceSchemaTask.processReplaceSchema(DfReplaceSchemaTask.java:240)
	at org.dbflute.task.DfReplaceSchemaTask.doExecute(DfReplaceSchemaTask.java:160)
	at org.dbflute.task.bs.DfAbstractTexenTask$1.callActualExecute(DfAbstractTexenTask.java:129)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.doExecute(DfTaskBasicController.java:192)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.execute(DfTaskBasicController.java:78)
	at org.dbflute.task.bs.DfAbstractTexenTask.execute(DfAbstractTexenTask.java:151)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)
	at jdk.internal.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:357)
	at org.apache.tools.ant.Target.performTasks(Target.java:385)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)
	at org.apache.tools.ant.Project.executeTarget(Project.java:1298)
	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1181)
	at org.apache.tools.ant.Main.runBuild(Main.java:698)
	at org.apache.tools.ant.Main.startAnt(Main.java:199)
	at org.apache.tools.ant.launch.Launcher.run(Launcher.java:257)
	at org.apache.tools.ant.launch.Launcher.main(Launcher.java:104)
Caused by: java.sql.BatchUpdateException: Field 'REGISTER_DATETIME' doesn't have a default value
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:481)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:403)
	at com.mysql.jdbc.Util.getInstance(Util.java:386)
	at com.mysql.jdbc.SQLError.createBatchUpdateException(SQLError.java:1154)
	at com.mysql.jdbc.PreparedStatement.executeBatchSerially(PreparedStatement.java:1835)
	at com.mysql.jdbc.PreparedStatement.executeBatchInternal(PreparedStatement.java:1319)
	at com.mysql.jdbc.StatementImpl.executeBatch(StatementImpl.java:954)
	at org.dbflute.logic.replaceschema.loaddata.delimiter.DfDelimiterDataWriterImpl.doWriteData(DfDelimiterDataWriterImpl.java:346)
	... 29 more
Caused by: java.sql.SQLException: Field 'REGISTER_DATETIME' doesn't have a default value
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:965)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3933)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3869)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2524)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2675)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2465)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1915)
	at com.mysql.jdbc.PreparedStatement.executeUpdateInternal(PreparedStatement.java:2136)
	at com.mysql.jdbc.PreparedStatement.executeBatchSerially(PreparedStatement.java:1813)
	... 32 more
2025-10-08 20:19:01,897 [main] INFO  (DfDataSourceHandler#commit():94) - ...commit()
2025-10-08 20:19:01,898 [main] INFO  (DfDataSourceHandler#destroy():116) - ...rollback()
2025-10-08 20:19:01,898 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2025-10-08 20:19:01,899 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m02s420ms *Abort

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 8.0.43)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {password=, user=root}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 Create Schema: success=42, failure=0 (in 2 files) - 00m00s582ms
  (Initialize Schema) - 00m00s248ms
  (Create Schema) - 00m00s331ms
  o replace-schema-00-system.sql
  o replace-schema-10-basic.sql

 Load Data: common:{tsv=6} - 00m00s089ms
  <common>
  o acyclic_01_01-MEMBER_STATUS.tsv
  o acyclic_01_02-PRODUCT_CATEGORY.tsv
  o acyclic_01_03-PRODUCT_STATUS.tsv
  o acyclic_01_04-REGION.tsv
  o acyclic_01_05-SERVICE_RANK.tsv
  o acyclic_01_06-WITHDRAWAL_REASON.tsv
  x (failed: Look at the exception message)
    * * * * * *
    * Failure *
    * * * * * *
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2025-10-08 20:19:46,436 [main] INFO  (DfReplaceSchemaTask#begin():94) - +------------------------------------------+
2025-10-08 20:19:46,437 [main] INFO  (DfReplaceSchemaTask#begin():95) - |                                          |
2025-10-08 20:19:46,437 [main] INFO  (DfReplaceSchemaTask#begin():96) - |              ReplaceSchema               |
2025-10-08 20:19:46,438 [main] INFO  (DfReplaceSchemaTask#begin():104) - |                                          |
2025-10-08 20:19:46,438 [main] INFO  (DfReplaceSchemaTask#begin():105) - +------------------------------------------+
2025-10-08 20:19:46,439 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():423) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2025-10-08 20:19:48,388 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2025-10-08 20:19:48,389 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2025-10-08 20:19:48,389 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
2025-10-08 20:19:48,389 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2025-10-08 20:19:48,395 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2025-10-08 20:19:48,633 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 8.0.43
2025-10-08 20:19:48,634 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.49 ( Revision: ad86f36e100e104cd926c6b81c8cab9565750116 ) for JDBC 4.0
2025-10-08 20:19:48,640 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():253) - 
2025-10-08 20:19:48,640 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():254) - * * * * * * * * * * *
2025-10-08 20:19:48,640 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():255) - *                   *
2025-10-08 20:19:48,640 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():256) - * Initialize Schema *
2025-10-08 20:19:48,640 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():257) - *                   *
2025-10-08 20:19:48,640 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():258) - * * * * * * * * * * *
2025-10-08 20:19:48,645 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 20:19:48,645 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 20:19:48,645 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 20:19:48,675 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_address
2025-10-08 20:19:48,685 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_login
2025-10-08 20:19:48,689 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_security
2025-10-08 20:19:48,694 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_service
2025-10-08 20:19:48,699 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_withdrawal
2025-10-08 20:19:48,707 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table purchase_payment
2025-10-08 20:19:48,715 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table `member` drop foreign key FK_MEMBER_MEMBER_STATUS
2025-10-08 20:19:48,730 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2025-10-08 20:19:48,734 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2025-10-08 20:19:48,739 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2025-10-08 20:19:48,743 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2025-10-08 20:19:48,750 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2025-10-08 20:19:48,755 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2025-10-08 20:19:48,759 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2025-10-08 20:19:48,765 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2025-10-08 20:19:48,769 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2025-10-08 20:19:48,774 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2025-10-08 20:19:48,781 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2025-10-08 20:19:48,788 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2025-10-08 20:19:48,794 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2025-10-08 20:19:48,801 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2025-10-08 20:19:48,810 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2025-10-08 20:19:48,818 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table `member`
2025-10-08 20:19:48,821 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_address
2025-10-08 20:19:48,823 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_login
2025-10-08 20:19:48,825 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_security
2025-10-08 20:19:48,827 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_service
2025-10-08 20:19:48,829 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_status
2025-10-08 20:19:48,832 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_withdrawal
2025-10-08 20:19:48,834 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table product
2025-10-08 20:19:48,836 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table product_category
2025-10-08 20:19:48,839 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table product_status
2025-10-08 20:19:48,841 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table purchase
2025-10-08 20:19:48,843 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table purchase_payment
2025-10-08 20:19:48,846 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table region
2025-10-08 20:19:48,848 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table service_rank
2025-10-08 20:19:48,850 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table withdrawal_reason
2025-10-08 20:19:48,864 [main] INFO  (DfCreateSchemaProcess#createSchema():293) - 
2025-10-08 20:19:48,864 [main] INFO  (DfCreateSchemaProcess#createSchema():294) - * * * * * * * * *
2025-10-08 20:19:48,864 [main] INFO  (DfCreateSchemaProcess#createSchema():295) - *               *
2025-10-08 20:19:48,865 [main] INFO  (DfCreateSchemaProcess#createSchema():296) - * Create Schema *
2025-10-08 20:19:48,865 [main] INFO  (DfCreateSchemaProcess#createSchema():297) - *               *
2025-10-08 20:19:48,865 [main] INFO  (DfCreateSchemaProcess#createSchema():298) - * * * * * * * * *
2025-10-08 20:19:48,867 [main] INFO  (DfSqlFileFireMan#fire():68) - ...Firing: replace-schema-00-system.sql
2025-10-08 20:19:48,868 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2025-10-08 20:19:48,868 [main] INFO  (DfCreateSchemaProcess$1#dispatch():325) - ...Creating a connection to system
2025-10-08 20:19:48,868 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():539) - ...Creating a connection for additional user: root
2025-10-08 20:19:48,881 [main] INFO  (DfCreateSchemaProcess$1#dispatch():351) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2025-10-08 20:19:48,881 [main] INFO  (DfCreateSchemaProcess$1#dispatch():353) -  -> Can't create database 'maihamadb'; database exists
2025-10-08 20:19:48,882 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():463) - ...Reviving the user 'system' until the end of this SQL file
2025-10-08 20:19:48,882 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
create user maihamadb@localhost identified by 'maihamadb'
2025-10-08 20:19:48,885 [main] INFO  (DfCreateSchemaProcess$1#dispatch():351) - ...Saying good-bye to the user 'system' because of checked: [mainUser, grant]
2025-10-08 20:19:48,885 [main] INFO  (DfCreateSchemaProcess$1#dispatch():353) -  -> Operation CREATE USER failed for 'maihamadb'@'localhost'
2025-10-08 20:19:48,885 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():463) - ...Reviving the user 'system' until the end of this SQL file
2025-10-08 20:19:48,885 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.* to maihamadb@localhost
2025-10-08 20:19:48,886 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2025-10-08 20:19:48,888 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2025-10-08 20:19:48,888 [main] INFO  (DfSqlFileFireMan#fire():68) - ...Firing: replace-schema-10-basic.sql
2025-10-08 20:19:48,888 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():400) - ...Saying good-bye to the user 'system' again
2025-10-08 20:19:48,888 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():404) - ...Clearing revived users
2025-10-08 20:19:48,888 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():411) - ...Coming back to the main user from the user 'system'
2025-10-08 20:19:48,891 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table `MEMBER`(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2025-10-08 20:19:48,896 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2025-10-08 20:19:48,901 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2025-10-08 20:19:48,905 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2025-10-08 20:19:48,910 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    AKIRAKANI_OKASHII_KARAMU_MEI INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2025-10-08 20:19:48,914 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2025-10-08 20:19:48,918 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2025-10-08 20:19:48,923 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2025-10-08 20:19:48,927 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2025-10-08 20:19:48,932 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2025-10-08 20:19:48,935 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2025-10-08 20:19:48,939 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2025-10-08 20:19:48,942 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2025-10-08 20:19:48,946 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2025-10-08 20:19:48,950 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2025-10-08 20:19:48,955 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table `MEMBER` add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2025-10-08 20:19:48,974 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-08 20:19:48,988 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2025-10-08 20:19:49,001 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2025-10-08 20:19:49,020 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-08 20:19:49,032 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-08 20:19:49,044 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2025-10-08 20:19:49,057 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-08 20:19:49,067 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-08 20:19:49,077 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2025-10-08 20:19:49,088 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-08 20:19:49,099 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2025-10-08 20:19:49,111 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2025-10-08 20:19:49,122 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2025-10-08 20:19:49,135 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2025-10-08 20:19:49,148 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2025-10-08 20:19:49,159 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on `MEMBER`(MEMBER_NAME)
2025-10-08 20:19:49,172 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on `MEMBER`(FORMALIZED_DATETIME)
2025-10-08 20:19:49,185 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2025-10-08 20:19:49,190 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(AKIRAKANI_OKASHII_KARAMU_MEI)
2025-10-08 20:19:49,196 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2025-10-08 20:19:49,204 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2025-10-08 20:19:49,211 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2025-10-08 20:19:49,219 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2025-10-08 20:19:49,225 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2025-10-08 20:19:49,232 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=40 failure=0
2025-10-08 20:19:49,232 [main] INFO  (DfSqlFileFireMan#fire():93) - Create Schema: success=42, failure=0 (in 2 files)
2025-10-08 20:19:49,233 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():594) - ...Closing connections to change-users: [system]
2025-10-08 20:19:49,247 [main] INFO  (DfLoadDataProcess#execute():133) - 
2025-10-08 20:19:49,247 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2025-10-08 20:19:49,247 [main] INFO  (DfLoadDataProcess#execute():135) - *                   *
2025-10-08 20:19:49,248 [main] INFO  (DfLoadDataProcess#execute():136) - * Load Data         *
2025-10-08 20:19:49,248 [main] INFO  (DfLoadDataProcess#execute():137) - *                   *
2025-10-08 20:19:49,248 [main] INFO  (DfLoadDataProcess#execute():138) - * * * * * * * * * * *
2025-10-08 20:19:49,256 [main] INFO  (DfDelimiterDataWriterImpl#writeData():97) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-10-08 20:19:49,256 [main] INFO  (DfDelimiterDataWriterImpl#writeData():98) - writeData(playsql/data/common/tsv/UTF-8/acyclic_01_01-MEMBER_STATUS.tsv)
2025-10-08 20:19:49,256 [main] INFO  (DfDelimiterDataWriterImpl#writeData():99) - = = = = = = =/
2025-10-08 20:19:49,257 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 20:19:49,257 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 20:19:49,257 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 20:19:49,268 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2025-10-08 20:19:49,285 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2025-10-08 20:19:49,285 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2025-10-08 20:19:49,287 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 3 rows are loaded to MEMBER_STATUS
2025-10-08 20:19:49,289 [main] INFO  (DfDelimiterDataWriterImpl#writeData():97) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-10-08 20:19:49,289 [main] INFO  (DfDelimiterDataWriterImpl#writeData():98) - writeData(playsql/data/common/tsv/UTF-8/acyclic_01_02-PRODUCT_CATEGORY.tsv)
2025-10-08 20:19:49,289 [main] INFO  (DfDelimiterDataWriterImpl#writeData():99) - = = = = = = =/
2025-10-08 20:19:49,289 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 20:19:49,289 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 20:19:49,289 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 20:19:49,294 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_CATEGORY:{FOD, 食品, null}
2025-10-08 20:19:49,294 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2025-10-08 20:19:49,294 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2025-10-08 20:19:49,294 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2025-10-08 20:19:49,294 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2025-10-08 20:19:49,296 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2025-10-08 20:19:49,297 [main] INFO  (DfDelimiterDataWriterImpl#writeData():97) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-10-08 20:19:49,297 [main] INFO  (DfDelimiterDataWriterImpl#writeData():98) - writeData(playsql/data/common/tsv/UTF-8/acyclic_01_03-PRODUCT_STATUS.tsv)
2025-10-08 20:19:49,297 [main] INFO  (DfDelimiterDataWriterImpl#writeData():99) - = = = = = = =/
2025-10-08 20:19:49,297 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 20:19:49,297 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 20:19:49,297 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 20:19:49,302 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_STATUS:{ONS, 生産販売可能}
2025-10-08 20:19:49,303 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_STATUS:{PST, 生産中止}
2025-10-08 20:19:49,303 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_STATUS:{SST, 販売中止}
2025-10-08 20:19:49,306 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 3 rows are loaded to PRODUCT_STATUS
2025-10-08 20:19:49,307 [main] INFO  (DfDelimiterDataWriterImpl#writeData():97) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-10-08 20:19:49,307 [main] INFO  (DfDelimiterDataWriterImpl#writeData():98) - writeData(playsql/data/common/tsv/UTF-8/acyclic_01_04-REGION.tsv)
2025-10-08 20:19:49,307 [main] INFO  (DfDelimiterDataWriterImpl#writeData():99) - = = = = = = =/
2025-10-08 20:19:49,307 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 20:19:49,307 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 20:19:49,307 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 20:19:49,314 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - REGION:{1, アメリカ}
2025-10-08 20:19:49,314 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - REGION:{2, カナダ}
2025-10-08 20:19:49,314 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - REGION:{3, 中国}
2025-10-08 20:19:49,314 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - REGION:{4, 千葉}
2025-10-08 20:19:49,317 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 4 rows are loaded to REGION
2025-10-08 20:19:49,317 [main] INFO  (DfDelimiterDataWriterImpl#writeData():97) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-10-08 20:19:49,317 [main] INFO  (DfDelimiterDataWriterImpl#writeData():98) - writeData(playsql/data/common/tsv/UTF-8/acyclic_01_05-SERVICE_RANK.tsv)
2025-10-08 20:19:49,317 [main] INFO  (DfDelimiterDataWriterImpl#writeData():99) - = = = = = = =/
2025-10-08 20:19:49,317 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 20:19:49,317 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 20:19:49,317 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 20:19:49,322 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - SERVICE_RANK:{BRZ, BRONZE, 2.000, 1, bronze rank, 4}
2025-10-08 20:19:49,323 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - SERVICE_RANK:{GLD, GOLD, 9.200, 1, gold rank, 2}
2025-10-08 20:19:49,323 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - SERVICE_RANK:{PLS, PLASTIC, 0.100, 0, plastic rank, 5}
2025-10-08 20:19:49,323 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - SERVICE_RANK:{PLT, PLATINUM, 12.300, 1, platinum rank, 1}
2025-10-08 20:19:49,323 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - SERVICE_RANK:{SIL, SILVER, 6.740, 1, silver rank, 3}
2025-10-08 20:19:49,325 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 5 rows are loaded to SERVICE_RANK
2025-10-08 20:19:49,325 [main] INFO  (DfDelimiterDataWriterImpl#writeData():97) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-10-08 20:19:49,325 [main] INFO  (DfDelimiterDataWriterImpl#writeData():98) - writeData(playsql/data/common/tsv/UTF-8/acyclic_01_06-WITHDRAWAL_REASON.tsv)
2025-10-08 20:19:49,325 [main] INFO  (DfDelimiterDataWriterImpl#writeData():99) - = = = = = = =/
2025-10-08 20:19:49,326 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 20:19:49,326 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 20:19:49,326 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 20:19:49,334 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2025-10-08 20:19:49,334 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2025-10-08 20:19:49,334 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2025-10-08 20:19:49,334 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2025-10-08 20:19:49,336 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2025-10-08 20:19:49,338 [main] INFO  (DfDelimiterDataWriterImpl#writeData():97) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-10-08 20:19:49,338 [main] INFO  (DfDelimiterDataWriterImpl#writeData():98) - writeData(playsql/data/ut/reversetsv/UTF-8/cyclic_01_01-PRODUCT.tsv)
2025-10-08 20:19:49,338 [main] INFO  (DfDelimiterDataWriterImpl#writeData():99) - = = = = = = =/
2025-10-08 20:19:49,338 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 20:19:49,338 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 20:19:49,338 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 20:19:49,342 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 0}
2025-10-08 20:19:49,342 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 0}
2025-10-08 20:19:49,342 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 0}
2025-10-08 20:19:49,342 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 0}
2025-10-08 20:19:49,343 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 0}
2025-10-08 20:19:49,344 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 0}
2025-10-08 20:19:49,344 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 0}
2025-10-08 20:19:49,344 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 0}
2025-10-08 20:19:49,344 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 0}
2025-10-08 20:19:49,344 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 0}
2025-10-08 20:19:49,345 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{11, River of Dreams, BILLYJOEL-11, MCD, ONS, 2100, 0}
2025-10-08 20:19:49,345 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{12, Grand Piano, PIANO-01, INS, ONS, 1400000, 0}
2025-10-08 20:19:49,345 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{13, Upright Piano, PIANO-02, INS, ONS, 1100000, 0}
2025-10-08 20:19:49,345 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{14, Low Price Flute, FLUTE-01, INS, ONS, 50000, 0}
2025-10-08 20:19:49,345 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{15, Silver Flute, FLUTE-02, INS, ONS, null, 0}
2025-10-08 20:19:49,345 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{16, Gold Flute, FLUTE-03, INS, ONS, null, 0}
2025-10-08 20:19:49,345 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{17, Rosemary (100g), HARB-100-01, HEB, ONS, 400, 0}
2025-10-08 20:19:49,345 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{18, Lemon Grass (100g), HARB-100-02, HEB, ONS, 380, 0}
2025-10-08 20:19:49,346 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{19, Camomile (100g), HARB-100-03, HEB, ONS, 380, 0}
2025-10-08 20:19:49,346 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{20, Hatomugi (100g), HARB-100-04, HEB, ONS, 340, 0}
2025-10-08 20:19:49,352 [main] INFO  (DfDelimiterDataWriterImpl#performNonBatchRetry():123) - ...Retrying as non-batch to derive target row
2025-10-08 20:19:49,353 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 0}
2025-10-08 20:19:49,354 [main] ERROR (DfDBFluteTaskUtil#logException():150) - Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Failed to execute DBFlute Task 'ReplaceSchema'.

[Advice]
Check the exception messages and the stack traces.

[Database Product]
MySQL 8.0.43

[JDBC Driver]
MySQL Connector Java mysql-connector-java-5.1.49 ( Revision: ad86f36e100e104cd926c6b81c8cab9565750116 ) for JDBC 4.0
* * * * * * * * * */
org.dbflute.exception.DfDelimiterDataRegistrationFailureException: Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Failed to register the table data.

[Advice]
Please confirm the SQLException message.
*And also check the insert values to not-null columns.

[Delimiter File]
playsql/data/ut/reversetsv/UTF-8/cyclic_01_01-PRODUCT.tsv

[Table]
PRODUCT

[SQLException]
org.dbflute.exception.DfJDBCException
JDBC said...
/- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[SQLException]
java.sql.BatchUpdateException
Field 'REGISTER_DATETIME' doesn't have a default value
- - - - - - - - - -/

[Target Row]
(derived from non-batch retry)
java.sql.SQLException
Field 'REGISTER_DATETIME' doesn't have a default value
/- - - - - - - - - - - - - - - - - - - -
Column Def: [PRODUCT_ID, PRODUCT_NAME, PRODUCT_HANDLE_CODE, PRODUCT_CATEGORY_CODE, PRODUCT_STATUS_CODE, REGULAR_PRICE, VERSION_NO]
Row Values: [1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 0]
Row Number: 1
- - - - - - - - - -/

[Executed SQL]
insert into PRODUCT (PRODUCT_ID, PRODUCT_NAME, PRODUCT_HANDLE_CODE, PRODUCT_CATEGORY_CODE, PRODUCT_STATUS_CODE, REGULAR_PRICE, VERSION_NO) values(?, ?, ?, ?, ?, ?, ?)

[Bind Type]
PRODUCT_ID = class java.lang.Integer
PRODUCT_NAME = class java.lang.String
PRODUCT_HANDLE_CODE = class java.lang.String
PRODUCT_CATEGORY_CODE = class java.lang.String
PRODUCT_STATUS_CODE = class java.lang.String
REGULAR_PRICE = class java.lang.Integer
VERSION_NO = class java.lang.Long

[String Processor]
PRODUCT_ID = NumberStringProcessor
PRODUCT_NAME = RealStringProcessor
PRODUCT_HANDLE_CODE = RealStringProcessor
PRODUCT_CATEGORY_CODE = RealStringProcessor
PRODUCT_STATUS_CODE = RealStringProcessor
REGULAR_PRICE = NumberStringProcessor
VERSION_NO = NumberStringProcessor
* * * * * * * * * */
	at org.dbflute.logic.replaceschema.loaddata.delimiter.DfDelimiterDataWriterImpl.doWriteData(DfDelimiterDataWriterImpl.java:359)
	at org.dbflute.logic.replaceschema.loaddata.delimiter.DfDelimiterDataWriterImpl.writeData(DfDelimiterDataWriterImpl.java:101)
	at org.dbflute.logic.replaceschema.loaddata.delimiter.DfDelimiterDataHandlerImpl.writeSeveralData(DfDelimiterDataHandlerImpl.java:127)
	at org.dbflute.logic.replaceschema.process.DfLoadDataProcess.writeDbFromDelimiterFile(DfLoadDataProcess.java:200)
	at org.dbflute.logic.replaceschema.process.DfLoadDataProcess.writeDbFromDelimiterFileAsLoadingTypeData(DfLoadDataProcess.java:190)
	at org.dbflute.logic.replaceschema.process.DfLoadDataProcess.execute(DfLoadDataProcess.java:161)
	at org.dbflute.task.DfReplaceSchemaTask.loadData(DfReplaceSchemaTask.java:361)
	at org.dbflute.task.DfReplaceSchemaTask.executeCoreProcess(DfReplaceSchemaTask.java:259)
	at org.dbflute.task.DfReplaceSchemaTask.processReplaceSchema(DfReplaceSchemaTask.java:240)
	at org.dbflute.task.DfReplaceSchemaTask.doExecute(DfReplaceSchemaTask.java:160)
	at org.dbflute.task.bs.DfAbstractTexenTask$1.callActualExecute(DfAbstractTexenTask.java:129)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.doExecute(DfTaskBasicController.java:192)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.execute(DfTaskBasicController.java:78)
	at org.dbflute.task.bs.DfAbstractTexenTask.execute(DfAbstractTexenTask.java:151)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)
	at jdk.internal.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:357)
	at org.apache.tools.ant.Target.performTasks(Target.java:385)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)
	at org.apache.tools.ant.Project.executeTarget(Project.java:1298)
	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1181)
	at org.apache.tools.ant.Main.runBuild(Main.java:698)
	at org.apache.tools.ant.Main.startAnt(Main.java:199)
	at org.apache.tools.ant.launch.Launcher.run(Launcher.java:257)
	at org.apache.tools.ant.launch.Launcher.main(Launcher.java:104)
Caused by: java.sql.BatchUpdateException: Field 'REGISTER_DATETIME' doesn't have a default value
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:481)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:403)
	at com.mysql.jdbc.Util.getInstance(Util.java:386)
	at com.mysql.jdbc.SQLError.createBatchUpdateException(SQLError.java:1154)
	at com.mysql.jdbc.PreparedStatement.executeBatchSerially(PreparedStatement.java:1835)
	at com.mysql.jdbc.PreparedStatement.executeBatchInternal(PreparedStatement.java:1319)
	at com.mysql.jdbc.StatementImpl.executeBatch(StatementImpl.java:954)
	at org.dbflute.logic.replaceschema.loaddata.delimiter.DfDelimiterDataWriterImpl.doWriteData(DfDelimiterDataWriterImpl.java:346)
	... 29 more
Caused by: java.sql.SQLException: Field 'REGISTER_DATETIME' doesn't have a default value
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:965)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3933)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3869)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2524)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2675)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2465)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1915)
	at com.mysql.jdbc.PreparedStatement.executeUpdateInternal(PreparedStatement.java:2136)
	at com.mysql.jdbc.PreparedStatement.executeBatchSerially(PreparedStatement.java:1813)
	... 32 more
2025-10-08 20:19:49,357 [main] INFO  (DfDataSourceHandler#commit():94) - ...commit()
2025-10-08 20:19:49,358 [main] INFO  (DfDataSourceHandler#destroy():116) - ...rollback()
2025-10-08 20:19:49,358 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2025-10-08 20:19:49,361 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m02s930ms *Abort

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 8.0.43)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {password=, user=root}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 Create Schema: success=42, failure=0 (in 2 files) - 00m00s595ms
  (Initialize Schema) - 00m00s223ms
  (Create Schema) - 00m00s369ms
  o replace-schema-00-system.sql
  o replace-schema-10-basic.sql

 Load Data: common:{tsv=6} - 00m00s106ms
  <common>
  o acyclic_01_01-MEMBER_STATUS.tsv
  o acyclic_01_02-PRODUCT_CATEGORY.tsv
  o acyclic_01_03-PRODUCT_STATUS.tsv
  o acyclic_01_04-REGION.tsv
  o acyclic_01_05-SERVICE_RANK.tsv
  o acyclic_01_06-WITHDRAWAL_REASON.tsv
  x (failed: Look at the exception message)
    * * * * * *
    * Failure *
    * * * * * *
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2025-10-08 20:26:02,157 [main] INFO  (DfReplaceSchemaTask#begin():94) - +------------------------------------------+
2025-10-08 20:26:02,158 [main] INFO  (DfReplaceSchemaTask#begin():95) - |                                          |
2025-10-08 20:26:02,158 [main] INFO  (DfReplaceSchemaTask#begin():96) - |              ReplaceSchema               |
2025-10-08 20:26:02,160 [main] INFO  (DfReplaceSchemaTask#begin():104) - |                                          |
2025-10-08 20:26:02,160 [main] INFO  (DfReplaceSchemaTask#begin():105) - +------------------------------------------+
2025-10-08 20:26:02,160 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():423) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2025-10-08 20:26:03,508 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2025-10-08 20:26:03,508 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2025-10-08 20:26:03,508 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
2025-10-08 20:26:03,508 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2025-10-08 20:26:03,513 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2025-10-08 20:26:03,807 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 8.0.43
2025-10-08 20:26:03,808 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.49 ( Revision: ad86f36e100e104cd926c6b81c8cab9565750116 ) for JDBC 4.0
2025-10-08 20:26:03,813 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():253) - 
2025-10-08 20:26:03,814 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():254) - * * * * * * * * * * *
2025-10-08 20:26:03,814 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():255) - *                   *
2025-10-08 20:26:03,814 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():256) - * Initialize Schema *
2025-10-08 20:26:03,814 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():257) - *                   *
2025-10-08 20:26:03,814 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():258) - * * * * * * * * * * *
2025-10-08 20:26:03,818 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 20:26:03,818 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 20:26:03,818 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 20:26:03,858 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_address
2025-10-08 20:26:03,868 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_login
2025-10-08 20:26:03,872 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_security
2025-10-08 20:26:03,877 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_service
2025-10-08 20:26:03,882 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_withdrawal
2025-10-08 20:26:03,891 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table purchase_payment
2025-10-08 20:26:03,900 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table `member` drop foreign key FK_MEMBER_MEMBER_STATUS
2025-10-08 20:26:03,916 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2025-10-08 20:26:03,920 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2025-10-08 20:26:03,926 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2025-10-08 20:26:03,930 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2025-10-08 20:26:03,937 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2025-10-08 20:26:03,943 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2025-10-08 20:26:03,948 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2025-10-08 20:26:03,954 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2025-10-08 20:26:03,958 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2025-10-08 20:26:03,968 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2025-10-08 20:26:03,975 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2025-10-08 20:26:03,983 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2025-10-08 20:26:03,988 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2025-10-08 20:26:03,996 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2025-10-08 20:26:04,003 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2025-10-08 20:26:04,011 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table `member`
2025-10-08 20:26:04,014 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_address
2025-10-08 20:26:04,016 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_login
2025-10-08 20:26:04,018 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_security
2025-10-08 20:26:04,021 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_service
2025-10-08 20:26:04,023 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_status
2025-10-08 20:26:04,025 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_withdrawal
2025-10-08 20:26:04,027 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table product
2025-10-08 20:26:04,030 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table product_category
2025-10-08 20:26:04,032 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table product_status
2025-10-08 20:26:04,034 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table purchase
2025-10-08 20:26:04,037 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table purchase_payment
2025-10-08 20:26:04,039 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table region
2025-10-08 20:26:04,041 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table service_rank
2025-10-08 20:26:04,044 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table withdrawal_reason
2025-10-08 20:26:04,057 [main] INFO  (DfCreateSchemaProcess#createSchema():293) - 
2025-10-08 20:26:04,057 [main] INFO  (DfCreateSchemaProcess#createSchema():294) - * * * * * * * * *
2025-10-08 20:26:04,057 [main] INFO  (DfCreateSchemaProcess#createSchema():295) - *               *
2025-10-08 20:26:04,057 [main] INFO  (DfCreateSchemaProcess#createSchema():296) - * Create Schema *
2025-10-08 20:26:04,057 [main] INFO  (DfCreateSchemaProcess#createSchema():297) - *               *
2025-10-08 20:26:04,058 [main] INFO  (DfCreateSchemaProcess#createSchema():298) - * * * * * * * * *
2025-10-08 20:26:04,059 [main] INFO  (DfSqlFileFireMan#fire():68) - ...Firing: replace-schema-00-system.sql
2025-10-08 20:26:04,061 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2025-10-08 20:26:04,061 [main] INFO  (DfCreateSchemaProcess$1#dispatch():325) - ...Creating a connection to system
2025-10-08 20:26:04,061 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():539) - ...Creating a connection for additional user: root
2025-10-08 20:26:04,079 [main] INFO  (DfCreateSchemaProcess$1#dispatch():351) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2025-10-08 20:26:04,079 [main] INFO  (DfCreateSchemaProcess$1#dispatch():353) -  -> Can't create database 'maihamadb'; database exists
2025-10-08 20:26:04,080 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():463) - ...Reviving the user 'system' until the end of this SQL file
2025-10-08 20:26:04,080 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
create user maihamadb@localhost identified by 'maihamadb'
2025-10-08 20:26:04,083 [main] INFO  (DfCreateSchemaProcess$1#dispatch():351) - ...Saying good-bye to the user 'system' because of checked: [mainUser, grant]
2025-10-08 20:26:04,083 [main] INFO  (DfCreateSchemaProcess$1#dispatch():353) -  -> Operation CREATE USER failed for 'maihamadb'@'localhost'
2025-10-08 20:26:04,083 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():463) - ...Reviving the user 'system' until the end of this SQL file
2025-10-08 20:26:04,083 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.* to maihamadb@localhost
2025-10-08 20:26:04,090 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2025-10-08 20:26:04,092 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2025-10-08 20:26:04,092 [main] INFO  (DfSqlFileFireMan#fire():68) - ...Firing: replace-schema-10-basic.sql
2025-10-08 20:26:04,092 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():400) - ...Saying good-bye to the user 'system' again
2025-10-08 20:26:04,092 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():404) - ...Clearing revived users
2025-10-08 20:26:04,092 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():411) - ...Coming back to the main user from the user 'system'
2025-10-08 20:26:04,095 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table `MEMBER`(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2025-10-08 20:26:04,102 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2025-10-08 20:26:04,106 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2025-10-08 20:26:04,110 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2025-10-08 20:26:04,116 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    AKIRAKANI_OKASHII_KARAMU_MEI INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2025-10-08 20:26:04,120 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2025-10-08 20:26:04,124 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2025-10-08 20:26:04,129 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2025-10-08 20:26:04,134 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2025-10-08 20:26:04,138 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2025-10-08 20:26:04,142 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2025-10-08 20:26:04,146 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2025-10-08 20:26:04,149 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2025-10-08 20:26:04,153 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2025-10-08 20:26:04,158 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2025-10-08 20:26:04,163 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table `MEMBER` add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2025-10-08 20:26:04,176 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-08 20:26:04,189 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2025-10-08 20:26:04,200 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2025-10-08 20:26:04,211 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-08 20:26:04,223 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-08 20:26:04,235 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2025-10-08 20:26:04,246 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-08 20:26:04,256 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-08 20:26:04,267 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2025-10-08 20:26:04,277 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-08 20:26:04,288 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2025-10-08 20:26:04,300 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2025-10-08 20:26:04,310 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2025-10-08 20:26:04,322 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2025-10-08 20:26:04,335 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2025-10-08 20:26:04,344 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on `MEMBER`(MEMBER_NAME)
2025-10-08 20:26:04,357 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on `MEMBER`(FORMALIZED_DATETIME)
2025-10-08 20:26:04,370 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2025-10-08 20:26:04,375 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(AKIRAKANI_OKASHII_KARAMU_MEI)
2025-10-08 20:26:04,379 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2025-10-08 20:26:04,386 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2025-10-08 20:26:04,393 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2025-10-08 20:26:04,399 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2025-10-08 20:26:04,405 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2025-10-08 20:26:04,413 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=40 failure=0
2025-10-08 20:26:04,413 [main] INFO  (DfSqlFileFireMan#fire():93) - Create Schema: success=42, failure=0 (in 2 files)
2025-10-08 20:26:04,413 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():594) - ...Closing connections to change-users: [system]
2025-10-08 20:26:04,428 [main] INFO  (DfLoadDataProcess#execute():133) - 
2025-10-08 20:26:04,429 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2025-10-08 20:26:04,429 [main] INFO  (DfLoadDataProcess#execute():135) - *                   *
2025-10-08 20:26:04,429 [main] INFO  (DfLoadDataProcess#execute():136) - * Load Data         *
2025-10-08 20:26:04,429 [main] INFO  (DfLoadDataProcess#execute():137) - *                   *
2025-10-08 20:26:04,429 [main] INFO  (DfLoadDataProcess#execute():138) - * * * * * * * * * * *
2025-10-08 20:26:04,437 [main] INFO  (DfDelimiterDataWriterImpl#writeData():97) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-10-08 20:26:04,437 [main] INFO  (DfDelimiterDataWriterImpl#writeData():98) - writeData(playsql/data/common/tsv/UTF-8/acyclic_01_01-MEMBER_STATUS.tsv)
2025-10-08 20:26:04,437 [main] INFO  (DfDelimiterDataWriterImpl#writeData():99) - = = = = = = =/
2025-10-08 20:26:04,438 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 20:26:04,438 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 20:26:04,438 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 20:26:04,448 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2025-10-08 20:26:04,462 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2025-10-08 20:26:04,462 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2025-10-08 20:26:04,465 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 3 rows are loaded to MEMBER_STATUS
2025-10-08 20:26:04,466 [main] INFO  (DfDelimiterDataWriterImpl#writeData():97) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-10-08 20:26:04,466 [main] INFO  (DfDelimiterDataWriterImpl#writeData():98) - writeData(playsql/data/common/tsv/UTF-8/acyclic_01_02-PRODUCT_CATEGORY.tsv)
2025-10-08 20:26:04,466 [main] INFO  (DfDelimiterDataWriterImpl#writeData():99) - = = = = = = =/
2025-10-08 20:26:04,466 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 20:26:04,466 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 20:26:04,466 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 20:26:04,470 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_CATEGORY:{FOD, 食品, null}
2025-10-08 20:26:04,470 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2025-10-08 20:26:04,470 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2025-10-08 20:26:04,471 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2025-10-08 20:26:04,471 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2025-10-08 20:26:04,472 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2025-10-08 20:26:04,473 [main] INFO  (DfDelimiterDataWriterImpl#writeData():97) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-10-08 20:26:04,473 [main] INFO  (DfDelimiterDataWriterImpl#writeData():98) - writeData(playsql/data/common/tsv/UTF-8/acyclic_01_03-PRODUCT_STATUS.tsv)
2025-10-08 20:26:04,473 [main] INFO  (DfDelimiterDataWriterImpl#writeData():99) - = = = = = = =/
2025-10-08 20:26:04,473 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 20:26:04,473 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 20:26:04,473 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 20:26:04,476 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_STATUS:{ONS, 生産販売可能}
2025-10-08 20:26:04,477 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_STATUS:{PST, 生産中止}
2025-10-08 20:26:04,477 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_STATUS:{SST, 販売中止}
2025-10-08 20:26:04,478 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 3 rows are loaded to PRODUCT_STATUS
2025-10-08 20:26:04,478 [main] INFO  (DfDelimiterDataWriterImpl#writeData():97) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-10-08 20:26:04,478 [main] INFO  (DfDelimiterDataWriterImpl#writeData():98) - writeData(playsql/data/common/tsv/UTF-8/acyclic_01_04-REGION.tsv)
2025-10-08 20:26:04,478 [main] INFO  (DfDelimiterDataWriterImpl#writeData():99) - = = = = = = =/
2025-10-08 20:26:04,478 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 20:26:04,478 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 20:26:04,478 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 20:26:04,482 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - REGION:{1, アメリカ}
2025-10-08 20:26:04,482 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - REGION:{2, カナダ}
2025-10-08 20:26:04,482 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - REGION:{3, 中国}
2025-10-08 20:26:04,482 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - REGION:{4, 千葉}
2025-10-08 20:26:04,484 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 4 rows are loaded to REGION
2025-10-08 20:26:04,484 [main] INFO  (DfDelimiterDataWriterImpl#writeData():97) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-10-08 20:26:04,484 [main] INFO  (DfDelimiterDataWriterImpl#writeData():98) - writeData(playsql/data/common/tsv/UTF-8/acyclic_01_05-SERVICE_RANK.tsv)
2025-10-08 20:26:04,484 [main] INFO  (DfDelimiterDataWriterImpl#writeData():99) - = = = = = = =/
2025-10-08 20:26:04,484 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 20:26:04,484 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 20:26:04,484 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 20:26:04,488 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - SERVICE_RANK:{BRZ, BRONZE, 2.000, 1, bronze rank, 4}
2025-10-08 20:26:04,489 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - SERVICE_RANK:{GLD, GOLD, 9.200, 1, gold rank, 2}
2025-10-08 20:26:04,489 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - SERVICE_RANK:{PLS, PLASTIC, 0.100, 0, plastic rank, 5}
2025-10-08 20:26:04,489 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - SERVICE_RANK:{PLT, PLATINUM, 12.300, 1, platinum rank, 1}
2025-10-08 20:26:04,489 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - SERVICE_RANK:{SIL, SILVER, 6.740, 1, silver rank, 3}
2025-10-08 20:26:04,492 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 5 rows are loaded to SERVICE_RANK
2025-10-08 20:26:04,493 [main] INFO  (DfDelimiterDataWriterImpl#writeData():97) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-10-08 20:26:04,493 [main] INFO  (DfDelimiterDataWriterImpl#writeData():98) - writeData(playsql/data/common/tsv/UTF-8/acyclic_01_06-WITHDRAWAL_REASON.tsv)
2025-10-08 20:26:04,493 [main] INFO  (DfDelimiterDataWriterImpl#writeData():99) - = = = = = = =/
2025-10-08 20:26:04,493 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 20:26:04,493 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 20:26:04,493 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 20:26:04,497 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2025-10-08 20:26:04,497 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2025-10-08 20:26:04,497 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2025-10-08 20:26:04,497 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2025-10-08 20:26:04,499 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2025-10-08 20:26:04,501 [main] INFO  (DfDelimiterDataWriterImpl#writeData():97) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-10-08 20:26:04,501 [main] INFO  (DfDelimiterDataWriterImpl#writeData():98) - writeData(playsql/data/ut/reversetsv/UTF-8/cyclic_01_01-PRODUCT.tsv)
2025-10-08 20:26:04,501 [main] INFO  (DfDelimiterDataWriterImpl#writeData():99) - = = = = = = =/
2025-10-08 20:26:04,501 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 20:26:04,501 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 20:26:04,501 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 20:26:04,505 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 0}
2025-10-08 20:26:04,505 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 0}
2025-10-08 20:26:04,505 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 0}
2025-10-08 20:26:04,505 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 0}
2025-10-08 20:26:04,507 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 0}
2025-10-08 20:26:04,507 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 0}
2025-10-08 20:26:04,507 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 0}
2025-10-08 20:26:04,507 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 0}
2025-10-08 20:26:04,507 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 0}
2025-10-08 20:26:04,507 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 0}
2025-10-08 20:26:04,507 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{11, River of Dreams, BILLYJOEL-11, MCD, ONS, 2100, 0}
2025-10-08 20:26:04,507 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{12, Grand Piano, PIANO-01, INS, ONS, 1400000, 0}
2025-10-08 20:26:04,508 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{13, Upright Piano, PIANO-02, INS, ONS, 1100000, 0}
2025-10-08 20:26:04,508 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{14, Low Price Flute, FLUTE-01, INS, ONS, 50000, 0}
2025-10-08 20:26:04,508 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{15, Silver Flute, FLUTE-02, INS, ONS, null, 0}
2025-10-08 20:26:04,508 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{16, Gold Flute, FLUTE-03, INS, ONS, null, 0}
2025-10-08 20:26:04,508 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{17, Rosemary (100g), HARB-100-01, HEB, ONS, 400, 0}
2025-10-08 20:26:04,508 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{18, Lemon Grass (100g), HARB-100-02, HEB, ONS, 380, 0}
2025-10-08 20:26:04,508 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{19, Camomile (100g), HARB-100-03, HEB, ONS, 380, 0}
2025-10-08 20:26:04,508 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{20, Hatomugi (100g), HARB-100-04, HEB, ONS, 340, 0}
2025-10-08 20:26:04,514 [main] INFO  (DfDelimiterDataWriterImpl#performNonBatchRetry():123) - ...Retrying as non-batch to derive target row
2025-10-08 20:26:04,515 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 0}
2025-10-08 20:26:04,516 [main] ERROR (DfDBFluteTaskUtil#logException():150) - Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Failed to execute DBFlute Task 'ReplaceSchema'.

[Advice]
Check the exception messages and the stack traces.

[Database Product]
MySQL 8.0.43

[JDBC Driver]
MySQL Connector Java mysql-connector-java-5.1.49 ( Revision: ad86f36e100e104cd926c6b81c8cab9565750116 ) for JDBC 4.0
* * * * * * * * * */
org.dbflute.exception.DfDelimiterDataRegistrationFailureException: Look! Read the message below.
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
Failed to register the table data.

[Advice]
Please confirm the SQLException message.
*And also check the insert values to not-null columns.

[Delimiter File]
playsql/data/ut/reversetsv/UTF-8/cyclic_01_01-PRODUCT.tsv

[Table]
PRODUCT

[SQLException]
org.dbflute.exception.DfJDBCException
JDBC said...
/- - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
[SQLException]
java.sql.BatchUpdateException
Field 'REGISTER_DATETIME' doesn't have a default value
- - - - - - - - - -/

[Target Row]
(derived from non-batch retry)
java.sql.SQLException
Field 'REGISTER_DATETIME' doesn't have a default value
/- - - - - - - - - - - - - - - - - - - -
Column Def: [PRODUCT_ID, PRODUCT_NAME, PRODUCT_HANDLE_CODE, PRODUCT_CATEGORY_CODE, PRODUCT_STATUS_CODE, REGULAR_PRICE, VERSION_NO]
Row Values: [1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 0]
Row Number: 1
- - - - - - - - - -/

[Executed SQL]
insert into PRODUCT (PRODUCT_ID, PRODUCT_NAME, PRODUCT_HANDLE_CODE, PRODUCT_CATEGORY_CODE, PRODUCT_STATUS_CODE, REGULAR_PRICE, VERSION_NO) values(?, ?, ?, ?, ?, ?, ?)

[Bind Type]
PRODUCT_ID = class java.lang.Integer
PRODUCT_NAME = class java.lang.String
PRODUCT_HANDLE_CODE = class java.lang.String
PRODUCT_CATEGORY_CODE = class java.lang.String
PRODUCT_STATUS_CODE = class java.lang.String
REGULAR_PRICE = class java.lang.Integer
VERSION_NO = class java.lang.Long

[String Processor]
PRODUCT_ID = NumberStringProcessor
PRODUCT_NAME = RealStringProcessor
PRODUCT_HANDLE_CODE = RealStringProcessor
PRODUCT_CATEGORY_CODE = RealStringProcessor
PRODUCT_STATUS_CODE = RealStringProcessor
REGULAR_PRICE = NumberStringProcessor
VERSION_NO = NumberStringProcessor
* * * * * * * * * */
	at org.dbflute.logic.replaceschema.loaddata.delimiter.DfDelimiterDataWriterImpl.doWriteData(DfDelimiterDataWriterImpl.java:359)
	at org.dbflute.logic.replaceschema.loaddata.delimiter.DfDelimiterDataWriterImpl.writeData(DfDelimiterDataWriterImpl.java:101)
	at org.dbflute.logic.replaceschema.loaddata.delimiter.DfDelimiterDataHandlerImpl.writeSeveralData(DfDelimiterDataHandlerImpl.java:127)
	at org.dbflute.logic.replaceschema.process.DfLoadDataProcess.writeDbFromDelimiterFile(DfLoadDataProcess.java:200)
	at org.dbflute.logic.replaceschema.process.DfLoadDataProcess.writeDbFromDelimiterFileAsLoadingTypeData(DfLoadDataProcess.java:190)
	at org.dbflute.logic.replaceschema.process.DfLoadDataProcess.execute(DfLoadDataProcess.java:161)
	at org.dbflute.task.DfReplaceSchemaTask.loadData(DfReplaceSchemaTask.java:361)
	at org.dbflute.task.DfReplaceSchemaTask.executeCoreProcess(DfReplaceSchemaTask.java:259)
	at org.dbflute.task.DfReplaceSchemaTask.processReplaceSchema(DfReplaceSchemaTask.java:240)
	at org.dbflute.task.DfReplaceSchemaTask.doExecute(DfReplaceSchemaTask.java:160)
	at org.dbflute.task.bs.DfAbstractTexenTask$1.callActualExecute(DfAbstractTexenTask.java:129)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.doExecute(DfTaskBasicController.java:192)
	at org.dbflute.task.bs.assistant.DfTaskBasicController.execute(DfTaskBasicController.java:78)
	at org.dbflute.task.bs.DfAbstractTexenTask.execute(DfAbstractTexenTask.java:151)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:288)
	at jdk.internal.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:105)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:357)
	at org.apache.tools.ant.Target.performTasks(Target.java:385)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1329)
	at org.apache.tools.ant.Project.executeTarget(Project.java:1298)
	at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)
	at org.apache.tools.ant.Project.executeTargets(Project.java:1181)
	at org.apache.tools.ant.Main.runBuild(Main.java:698)
	at org.apache.tools.ant.Main.startAnt(Main.java:199)
	at org.apache.tools.ant.launch.Launcher.run(Launcher.java:257)
	at org.apache.tools.ant.launch.Launcher.main(Launcher.java:104)
Caused by: java.sql.BatchUpdateException: Field 'REGISTER_DATETIME' doesn't have a default value
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500)
	at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:481)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:403)
	at com.mysql.jdbc.Util.getInstance(Util.java:386)
	at com.mysql.jdbc.SQLError.createBatchUpdateException(SQLError.java:1154)
	at com.mysql.jdbc.PreparedStatement.executeBatchSerially(PreparedStatement.java:1835)
	at com.mysql.jdbc.PreparedStatement.executeBatchInternal(PreparedStatement.java:1319)
	at com.mysql.jdbc.StatementImpl.executeBatch(StatementImpl.java:954)
	at org.dbflute.logic.replaceschema.loaddata.delimiter.DfDelimiterDataWriterImpl.doWriteData(DfDelimiterDataWriterImpl.java:346)
	... 29 more
Caused by: java.sql.SQLException: Field 'REGISTER_DATETIME' doesn't have a default value
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:965)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3933)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3869)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2524)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2675)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2465)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1915)
	at com.mysql.jdbc.PreparedStatement.executeUpdateInternal(PreparedStatement.java:2136)
	at com.mysql.jdbc.PreparedStatement.executeBatchSerially(PreparedStatement.java:1813)
	... 32 more
2025-10-08 20:26:04,519 [main] INFO  (DfDataSourceHandler#commit():94) - ...commit()
2025-10-08 20:26:04,519 [main] INFO  (DfDataSourceHandler#destroy():116) - ...rollback()
2025-10-08 20:26:04,519 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2025-10-08 20:26:04,521 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m02s369ms *Abort

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 8.0.43)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {password=, user=root}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 Create Schema: success=42, failure=0 (in 2 files) - 00m00s602ms
  (Initialize Schema) - 00m00s243ms
  (Create Schema) - 00m00s357ms
  o replace-schema-00-system.sql
  o replace-schema-10-basic.sql

 Load Data: common:{tsv=6} - 00m00s087ms
  <common>
  o acyclic_01_01-MEMBER_STATUS.tsv
  o acyclic_01_02-PRODUCT_CATEGORY.tsv
  o acyclic_01_03-PRODUCT_STATUS.tsv
  o acyclic_01_04-REGION.tsv
  o acyclic_01_05-SERVICE_RANK.tsv
  o acyclic_01_06-WITHDRAWAL_REASON.tsv
  x (failed: Look at the exception message)
    * * * * * *
    * Failure *
    * * * * * *
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
2025-10-08 20:32:52,355 [main] INFO  (DfReplaceSchemaTask#begin():94) - +------------------------------------------+
2025-10-08 20:32:52,356 [main] INFO  (DfReplaceSchemaTask#begin():95) - |                                          |
2025-10-08 20:32:52,356 [main] INFO  (DfReplaceSchemaTask#begin():96) - |              ReplaceSchema               |
2025-10-08 20:32:52,358 [main] INFO  (DfReplaceSchemaTask#begin():104) - |                                          |
2025-10-08 20:32:52,358 [main] INFO  (DfReplaceSchemaTask#begin():105) - +------------------------------------------+
2025-10-08 20:32:52,358 [main] INFO  (DfReplaceSchemaTask#waitBeforeReps():423) - ...Waiting for your GO SIGN from stdin before ReplaceSchema:
2025-10-08 20:32:53,726 [main] INFO  (DfDataSourceHandler#prepare():78) - ...Preparing data source:
2025-10-08 20:32:53,726 [main] INFO  (DfDataSourceHandler#prepare():79) -   driver = com.mysql.jdbc.Driver
2025-10-08 20:32:53,726 [main] INFO  (DfDataSourceHandler#prepare():80) -   url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
2025-10-08 20:32:53,726 [main] INFO  (DfDataSourceHandler#prepare():81) -   user   = maihamadb
2025-10-08 20:32:53,733 [main] INFO  (DfDataSourceHandler#createConnection():166) - ...Connecting to database by data source:
2025-10-08 20:32:54,035 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():233) -   product = MySQL 8.0.43
2025-10-08 20:32:54,036 [main] INFO  (DfDataSourceHandler#setupConnectionMetaInfo():234) -   driver  = MySQL Connector Java mysql-connector-java-5.1.49 ( Revision: ad86f36e100e104cd926c6b81c8cab9565750116 ) for JDBC 4.0
2025-10-08 20:32:54,041 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():253) - 
2025-10-08 20:32:54,042 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():254) - * * * * * * * * * * *
2025-10-08 20:32:54,042 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():255) - *                   *
2025-10-08 20:32:54,042 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():256) - * Initialize Schema *
2025-10-08 20:32:54,042 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():257) - *                   *
2025-10-08 20:32:54,042 [main] INFO  (DfCreateSchemaProcess#initializeSchemaMainDrop():258) - * * * * * * * * * * *
2025-10-08 20:32:54,046 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 20:32:54,046 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 20:32:54,046 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 20:32:54,088 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_address
2025-10-08 20:32:54,094 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_login
2025-10-08 20:32:54,098 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_security
2025-10-08 20:32:54,103 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_service
2025-10-08 20:32:54,108 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table member_withdrawal
2025-10-08 20:32:54,119 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - truncate table purchase_payment
2025-10-08 20:32:54,128 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table `member` drop foreign key FK_MEMBER_MEMBER_STATUS
2025-10-08 20:32:54,143 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_MEMBER
2025-10-08 20:32:54,148 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_address drop foreign key FK_MEMBER_ADDRESS_REGION
2025-10-08 20:32:54,154 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER_STATUS
2025-10-08 20:32:54,159 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_login drop foreign key FK_MEMBER_LOGIN_MEMBER
2025-10-08 20:32:54,165 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_security drop foreign key FK_MEMBER_SECURITY_MEMBER
2025-10-08 20:32:54,171 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_service drop foreign key FK_MEMBER_SERVICE_MEMBER
2025-10-08 20:32:54,176 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_service drop foreign key FK_MEMBER_SERVICE_SERVICE_RANK_CODE
2025-10-08 20:32:54,182 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_MEMBER
2025-10-08 20:32:54,187 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table member_withdrawal drop foreign key FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON
2025-10-08 20:32:54,194 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table product drop foreign key FK_PRODUCT_PRODUCT_CATEGORY
2025-10-08 20:32:54,202 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table product drop foreign key FK_PRODUCT_PRODUCT_STATUS
2025-10-08 20:32:54,209 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table product_category drop foreign key FK_PRODUCT_CATEGORY_PARENT
2025-10-08 20:32:54,214 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table purchase drop foreign key FK_PURCHASE_MEMBER
2025-10-08 20:32:54,221 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table purchase drop foreign key FK_PURCHASE_PRODUCT
2025-10-08 20:32:54,229 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - alter table purchase_payment drop foreign key FK_PURCHASE_PAYMENT_PURCHASE
2025-10-08 20:32:54,237 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table `member`
2025-10-08 20:32:54,240 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_address
2025-10-08 20:32:54,242 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_login
2025-10-08 20:32:54,244 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_security
2025-10-08 20:32:54,246 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_service
2025-10-08 20:32:54,249 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_status
2025-10-08 20:32:54,251 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table member_withdrawal
2025-10-08 20:32:54,253 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table product
2025-10-08 20:32:54,257 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table product_category
2025-10-08 20:32:54,259 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table product_status
2025-10-08 20:32:54,261 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table purchase
2025-10-08 20:32:54,263 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table purchase_payment
2025-10-08 20:32:54,266 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table region
2025-10-08 20:32:54,268 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table service_rank
2025-10-08 20:32:54,271 [main] INFO  (DfSchemaInitializerJdbc#logReplaceSql():639) - drop table withdrawal_reason
2025-10-08 20:32:54,285 [main] INFO  (DfCreateSchemaProcess#createSchema():293) - 
2025-10-08 20:32:54,285 [main] INFO  (DfCreateSchemaProcess#createSchema():294) - * * * * * * * * *
2025-10-08 20:32:54,285 [main] INFO  (DfCreateSchemaProcess#createSchema():295) - *               *
2025-10-08 20:32:54,285 [main] INFO  (DfCreateSchemaProcess#createSchema():296) - * Create Schema *
2025-10-08 20:32:54,285 [main] INFO  (DfCreateSchemaProcess#createSchema():297) - *               *
2025-10-08 20:32:54,285 [main] INFO  (DfCreateSchemaProcess#createSchema():298) - * * * * * * * * *
2025-10-08 20:32:54,286 [main] INFO  (DfSqlFileFireMan#fire():68) - ...Firing: replace-schema-00-system.sql
2025-10-08 20:32:54,287 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:changeUser(system)#
-- #df:checkUser(mainSchema)#
create database maihamadb
2025-10-08 20:32:54,287 [main] INFO  (DfCreateSchemaProcess$1#dispatch():325) - ...Creating a connection to system
2025-10-08 20:32:54,288 [main] INFO  (DfReplaceSchemaProperties#createAdditionalUserConnection():539) - ...Creating a connection for additional user: root
2025-10-08 20:32:54,307 [main] INFO  (DfCreateSchemaProcess$1#dispatch():351) - ...Saying good-bye to the user 'system' because of checked: [mainSchema]
2025-10-08 20:32:54,307 [main] INFO  (DfCreateSchemaProcess$1#dispatch():353) -  -> Can't create database 'maihamadb'; database exists
2025-10-08 20:32:54,308 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():463) - ...Reviving the user 'system' until the end of this SQL file
2025-10-08 20:32:54,308 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
create user maihamadb@localhost identified by 'maihamadb'
2025-10-08 20:32:54,311 [main] INFO  (DfCreateSchemaProcess$1#dispatch():351) - ...Saying good-bye to the user 'system' because of checked: [mainUser, grant]
2025-10-08 20:32:54,311 [main] INFO  (DfCreateSchemaProcess$1#dispatch():353) -  -> Operation CREATE USER failed for 'maihamadb'@'localhost'
2025-10-08 20:32:54,311 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#isTargetSql():463) - ...Reviving the user 'system' until the end of this SQL file
2025-10-08 20:32:54,311 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
-- #df:reviveUser()#
-- #df:checkUser(mainUser, grant)#
grant all privileges on maihamadb.* to maihamadb@localhost
2025-10-08 20:32:54,313 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - flush privileges
2025-10-08 20:32:54,314 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=2 failure=0
2025-10-08 20:32:54,315 [main] INFO  (DfSqlFileFireMan#fire():68) - ...Firing: replace-schema-10-basic.sql
2025-10-08 20:32:54,315 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():400) - ...Saying good-bye to the user 'system' again
2025-10-08 20:32:54,315 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreRevivedUser():404) - ...Clearing revived users
2025-10-08 20:32:54,315 [main] INFO  (DfCreateSchemaProcess$DfSqlFileRunnerExecuteCreateSchema#restoreCurrentUser():411) - ...Coming back to the main user from the user 'system'
2025-10-08 20:32:54,317 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table `MEMBER`(
    MEMBER_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員ID: 会員を識別するID。連番として基本的に自動採番される。
（会員IDだけに限らず）採番方法はDBMSによって変わる。',
    MEMBER_NAME VARCHAR(160) NOT NULL COMMENT '会員名称: 会員のフルネームの名称。',
    MEMBER_ACCOUNT VARCHAR(50) NOT NULL COMMENT '会員アカウント: 会員がログイン時に利用するアカウントNO。',
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード',
    FORMALIZED_DATETIME DATETIME COMMENT '正式会員日時: 会員が正式に確定した日時。一度確定したら更新されない。
仮会員のときはnull。',
    BIRTHDATE DATE COMMENT '生年月日: 必須項目ではないので、このデータがない会員もいる。',
    REGISTER_DATETIME DATETIME NOT NULL COMMENT '登録日時: レコードが登録された日時。共通カラムの一つ。',
    REGISTER_USER VARCHAR(200) NOT NULL COMMENT '登録ユーザ: レコードを登録したユーザ。共通カラムの一つ。',
    UPDATE_DATETIME DATETIME NOT NULL COMMENT '更新日時: レコードが（最後に）更新された日時。共通カラムの一つ。',
    UPDATE_USER VARCHAR(200) NOT NULL COMMENT '更新ユーザ: レコードを更新したユーザ。',
    VERSION_NO BIGINT NOT NULL COMMENT 'バージョンNO: レコードのバージョンを示すNO。
更新回数と等しく、主に排他制御のために利用される。',
    PRIMARY KEY (MEMBER_ID),
    UNIQUE (MEMBER_ACCOUNT)
) COMMENT='会員: 会員登録時にデータが登録される。
基本的に物理削除はなく、退会したらステータスが退会会員になる。'
2025-10-08 20:32:54,323 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_ADDRESS(
    MEMBER_ADDRESS_ID INTEGER AUTO_INCREMENT NOT NULL COMMENT '会員住所ID: 会員住所を識別するID。
履歴分も含むテーブルなので、これ自体はFKではない。',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
履歴分を含むため、これだけではユニークにはならない。',
    VALID_BEGIN_DATE DATE NOT NULL COMMENT '有効開始日: 一つの有効期間の開始を示す日付。
前の有効終了日の次の日の値が格納される。',
    VALID_END_DATE DATE NOT NULL COMMENT '有効終了日: 有効期間の終了日。
次の有効開始日の一日前の値が格納される。
ただし、次の有効期間がない場合は 9999/12/31 となる。',
    ADDRESS VARCHAR(200) NOT NULL COMMENT '住所: まるごと住所',
    REGION_ID INTEGER NOT NULL COMMENT '地域ID: 地域を参照するID。
ここでは特に住所の内容と連動しているわけではない。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ADDRESS_ID),
    UNIQUE (MEMBER_ID, VALID_BEGIN_DATE)
) COMMENT='会員住所情報: 会員の住所に関する情報。
同時に有効期間ごとに履歴管理されている。'
2025-10-08 20:32:54,328 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_LOGIN(
    MEMBER_LOGIN_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '会員ログインID',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID',
    LOGIN_DATETIME DATETIME NOT NULL COMMENT 'ログイン日時: ログインした瞬間の日時。',
    MOBILE_LOGIN_FLG INTEGER NOT NULL COMMENT 'モバイルログインフラグ: モバイル機器からのログインか否か。',
    LOGIN_MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT 'ログイン会員ステータスコード: ログイン時の会員ステータス',
    PRIMARY KEY (MEMBER_LOGIN_ID),
    UNIQUE (MEMBER_ID, LOGIN_DATETIME)
) COMMENT='会員ログイン情報: ログインするたびに登録されるログイン履歴。'
2025-10-08 20:32:54,333 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SECURITY(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: そのまま one-to-one を構成するためのFKとなる。',
    LOGIN_PASSWORD VARCHAR(50) NOT NULL COMMENT 'ログインパスワード: ログイン時に利用するパスワード。
本当は良くないが、Exampleなのでひとまず暗号化していない。',
    REMINDER_QUESTION VARCHAR(50) NOT NULL COMMENT 'リマインダ質問: パスワードを忘れた際のリマインダ機能における質問の内容。',
    REMINDER_ANSWER VARCHAR(50) NOT NULL COMMENT 'リマインダ回答: パスワードを忘れた際のリマインダ機能における質問の答え。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員セキュリティ情報: 会員とは one-to-one で、会員一人につき必ず一つのセキュリティ情報がある'
2025-10-08 20:32:54,337 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_SERVICE(
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。ユニークなので、会員とは one-to-one の関係に。',
    AKIRAKANI_OKASHII_KARAMU_MEI INTEGER NOT NULL COMMENT 'サービスポイント数: 会員が現在利用できるサービスポイントの数。
基本的に、購入時には増えてポイントを使ったら減る。',
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを参照するコード。
どんなランクがあるのかドキドキですね。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員サービス: 会員のサービス情報（ポイントサービスなど）。'
2025-10-08 20:32:54,342 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_WITHDRAWAL(
    MEMBER_ID INTEGER NOT NULL,
    WITHDRAWAL_REASON_CODE CHAR(3) COMMENT '退会理由コード: 退会した定型理由を参照するコード。
何も言わずに退会する会員もいるので必須項目ではない。',
    WITHDRAWAL_REASON_INPUT_TEXT TEXT COMMENT '退会理由入力テキスト: 会員がフリーテキストで入力できる退会理由。
もう言いたいこと言ってもらう感じ。',
    WITHDRAWAL_DATETIME DATETIME NOT NULL COMMENT '退会日時: 退会した瞬間の日時。
正式会員日時と違い、こっちはone-to-oneの別テーブルで。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (MEMBER_ID)
) COMMENT='会員退会情報: 退会会員の退会に関する詳細な情報。
退会会員のみデータが存在する。'
2025-10-08 20:32:54,346 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE(
    PURCHASE_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入ID: 連番',
    MEMBER_ID INTEGER NOT NULL COMMENT '会員ID: 会員を参照するID。
購入を識別する自然キー（複合ユニーク制約）の筆頭要素。',
    PRODUCT_ID INTEGER NOT NULL COMMENT '商品ID: 商品を参照するID。',
    PURCHASE_DATETIME DATETIME NOT NULL COMMENT '購入日時: 購入した瞬間の日時。',
    PURCHASE_COUNT INTEGER NOT NULL COMMENT '購入数量: 購入した商品の（一回の購入における）数量。',
    PURCHASE_PRICE INTEGER NOT NULL COMMENT '購入価格: 購入によって実際に会員が支払った（支払う予定の）価格。
基本は商品の定価に購入数量を掛けたものになるが、
ポイント利用や割引があったりと必ずしもそうはならない。',
    PAYMENT_COMPLETE_FLG INTEGER NOT NULL COMMENT '支払完了フラグ: この購入に関しての支払いが完了しているか否か。',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PURCHASE_ID),
    UNIQUE (MEMBER_ID, PRODUCT_ID, PURCHASE_DATETIME),
    KEY (MEMBER_ID),
    KEY (PRODUCT_ID)
) COMMENT='購入: 一つの商品に対する一回の購入を表現する。
一回の購入で一つの商品を複数個買うこともある。'
2025-10-08 20:32:54,351 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PURCHASE_PAYMENT(
    PURCHASE_PAYMENT_ID BIGINT AUTO_INCREMENT NOT NULL COMMENT '購入支払ID: 連番',
    PURCHASE_ID BIGINT NOT NULL COMMENT '購入ID: 支払い対象の購入へのID',
    PAYMENT_AMOUNT DECIMAL(10,2) NOT NULL COMMENT '支払金額: 支払った金額。さて、小数点なのはなぜでしょう？',
    PAYMENT_DATETIME DATETIME NOT NULL COMMENT '支払日時: 支払ったときの日時',
    PAYMENT_METHOD_CODE CHAR(3) NOT NULL COMMENT '支払方法コード: 手渡しや銀行振込など',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    PRIMARY KEY (PURCHASE_PAYMENT_ID)
) COMMENT='購入支払: 購入に対する支払。
分割払いもできるのでmanyとなり、会員からの孫テーブルのテストができてうれしい。'
2025-10-08 20:32:54,355 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT(
    PRODUCT_ID INTEGER AUTO_INCREMENT NOT NULL,
    PRODUCT_NAME VARCHAR(50) NOT NULL COMMENT '商品名称',
    PRODUCT_HANDLE_CODE VARCHAR(100) NOT NULL COMMENT '商品ハンドルコード: 商品を識別する業務上のコード。',
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL,
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL,
    REGULAR_PRICE INTEGER COMMENT '定価',
    REGISTER_DATETIME DATETIME NOT NULL,
    REGISTER_USER VARCHAR(200) NOT NULL,
    UPDATE_DATETIME DATETIME NOT NULL,
    UPDATE_USER VARCHAR(200) NOT NULL,
    VERSION_NO BIGINT NOT NULL,
    PRIMARY KEY (PRODUCT_ID),
    UNIQUE (PRODUCT_HANDLE_CODE)
) COMMENT='商品'
2025-10-08 20:32:54,359 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_CATEGORY(
    PRODUCT_CATEGORY_CODE CHAR(3) NOT NULL COMMENT '商品カテゴリコード',
    PRODUCT_CATEGORY_NAME VARCHAR(50) NOT NULL COMMENT '商品カテゴリ名称',
    PARENT_CATEGORY_CODE CHAR(3) COMMENT '親カテゴリコード: 最上位の場合はデータなし。',
    PRIMARY KEY (PRODUCT_CATEGORY_CODE)
) COMMENT='商品カテゴリ: 商品のカテゴリを表現するマスタ。
自己参照の階層になっている。'
2025-10-08 20:32:54,363 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table PRODUCT_STATUS(
    PRODUCT_STATUS_CODE CHAR(3) NOT NULL COMMENT '商品ステータスコード',
    PRODUCT_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '商品ステータス名称',
    PRIMARY KEY (PRODUCT_STATUS_CODE)
) COMMENT='商品ステータス'
2025-10-08 20:32:54,366 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table REGION(
    REGION_ID INTEGER NOT NULL COMMENT '地域ID',
    REGION_NAME VARCHAR(50) NOT NULL COMMENT '地域名称',
    PRIMARY KEY (REGION_ID)
) COMMENT='地域: 主に会員の住所に対応する地域。
かなりざっくりした感じではある。'
2025-10-08 20:32:54,369 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table SERVICE_RANK(
    SERVICE_RANK_CODE CHAR(3) NOT NULL COMMENT 'サービスランクコード: サービスランクを識別するコード。',
    SERVICE_RANK_NAME VARCHAR(50) NOT NULL COMMENT 'サービスランク名称: サービスランクの名称。
（ゴールドとかプラチナとか基本的には威厳のある名前）',
    SERVICE_POINT_INCIDENCE NUMERIC(5, 3) NOT NULL COMMENT 'サービスポイント発生率: 購入ごとのサービスポイントの発生率。
購入価格にこの値をかけた数が発生ポイント。',
    NEW_ACCEPTABLE_FLG INTEGER NOT NULL COMMENT '新規受け入れ可能フラグ: このランクへの新規受け入れができるかどうか。',
    DESCRIPTION VARCHAR(200) NOT NULL,
    DISPLAY_ORDER INTEGER NOT NULL,
    PRIMARY KEY (SERVICE_RANK_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='サービスランク: 会員のサービスレベルを表現するランク。
（ゴールドとかプラチナとか）'
2025-10-08 20:32:54,374 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table MEMBER_STATUS(
    MEMBER_STATUS_CODE CHAR(3) NOT NULL COMMENT '会員ステータスコード: 会員ステータスを識別するコード。',
    MEMBER_STATUS_NAME VARCHAR(50) NOT NULL COMMENT '会員ステータス名称',
    DESCRIPTION VARCHAR(200) NOT NULL COMMENT '説明: 会員ステータスそれぞれの説明。
気の利いた説明があるとディベロッパーがとても助かる。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順: UI上のステータスの表示順を示すNO。
並べるときは、このカラムに対して昇順のソート条件にする。',
    PRIMARY KEY (MEMBER_STATUS_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='会員ステータス'
2025-10-08 20:32:54,378 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
create table WITHDRAWAL_REASON(
    WITHDRAWAL_REASON_CODE CHAR(3) NOT NULL COMMENT '退会理由コード',
    WITHDRAWAL_REASON_TEXT TEXT NOT NULL COMMENT '退会理由テキスト: 退会理由の内容。テキスト形式なので目いっぱい書けるが、
そうするとUI側できれいに見せるのが大変でしょうね。',
    DISPLAY_ORDER INTEGER NOT NULL COMMENT '表示順',
    PRIMARY KEY (WITHDRAWAL_REASON_CODE),
    UNIQUE (DISPLAY_ORDER)
) COMMENT='退会理由: 会員に選ばせる定型的な退会理由のマスタ。'
2025-10-08 20:32:54,381 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table `MEMBER` add constraint FK_MEMBER_MEMBER_STATUS 
    foreign key (MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2025-10-08 20:32:54,392 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-08 20:32:54,402 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_ADDRESS add constraint FK_MEMBER_ADDRESS_REGION 
    foreign key (REGION_ID) references REGION (REGION_ID)
2025-10-08 20:32:54,412 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER_STATUS 
    foreign key (LOGIN_MEMBER_STATUS_CODE) references MEMBER_STATUS (MEMBER_STATUS_CODE)
2025-10-08 20:32:54,422 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_LOGIN add constraint FK_MEMBER_LOGIN_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-08 20:32:54,431 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-08 20:32:54,440 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SERVICE add constraint FK_MEMBER_SERVICE_SERVICE_RANK_CODE 
    foreign key (SERVICE_RANK_CODE) references SERVICE_RANK (SERVICE_RANK_CODE)
2025-10-08 20:32:54,452 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_SECURITY add constraint FK_MEMBER_SECURITY_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-08 20:32:54,461 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-08 20:32:54,470 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table MEMBER_WITHDRAWAL add constraint FK_MEMBER_WITHDRAWAL_WITHDRAWAL_REASON 
    foreign key (WITHDRAWAL_REASON_CODE) references WITHDRAWAL_REASON (WITHDRAWAL_REASON_CODE)
2025-10-08 20:32:54,480 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_MEMBER 
    foreign key (MEMBER_ID) references `MEMBER` (MEMBER_ID)
2025-10-08 20:32:54,491 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE add constraint FK_PURCHASE_PRODUCT 
    foreign key (PRODUCT_ID) references PRODUCT (PRODUCT_ID)
2025-10-08 20:32:54,502 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PURCHASE_PAYMENT add constraint FK_PURCHASE_PAYMENT_PURCHASE 
    foreign key (PURCHASE_ID) references PURCHASE (PURCHASE_ID)
2025-10-08 20:32:54,512 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_CATEGORY 
    foreign key (PRODUCT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2025-10-08 20:32:54,524 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT add constraint FK_PRODUCT_PRODUCT_STATUS 
    foreign key (PRODUCT_STATUS_CODE) references PRODUCT_STATUS (PRODUCT_STATUS_CODE)
2025-10-08 20:32:54,537 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - 
alter table PRODUCT_CATEGORY add constraint FK_PRODUCT_CATEGORY_PARENT 
    foreign key (PARENT_CATEGORY_CODE) references PRODUCT_CATEGORY (PRODUCT_CATEGORY_CODE)
2025-10-08 20:32:54,547 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_MEMBER_NAME on `MEMBER`(MEMBER_NAME)
2025-10-08 20:32:54,559 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_FORMALIZED_DATETIME on `MEMBER`(FORMALIZED_DATETIME)
2025-10-08 20:32:54,571 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_LOGIN_DATETIME on MEMBER_LOGIN(LOGIN_DATETIME)
2025-10-08 20:32:54,576 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_MEMBER_SERVICE_POINT_COUNT on MEMBER_SERVICE(AKIRAKANI_OKASHII_KARAMU_MEI)
2025-10-08 20:32:54,581 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRODUCT_DATETIME on PURCHASE(PRODUCT_ID, PURCHASE_DATETIME)
2025-10-08 20:32:54,588 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_DATETIME_MEMBER on PURCHASE(PURCHASE_DATETIME, MEMBER_ID)
2025-10-08 20:32:54,594 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PRICE on PURCHASE(PURCHASE_PRICE)
2025-10-08 20:32:54,601 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PURCHASE_PAYMENT_DATETIME on PURCHASE_PAYMENT(PAYMENT_DATETIME, PAYMENT_AMOUNT)
2025-10-08 20:32:54,606 [main] INFO  (DfSqlFileRunnerBase#traceSql():168) - create index IX_PRODUCT_PRODUCT_NAME on PRODUCT(PRODUCT_NAME)
2025-10-08 20:32:54,612 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=40 failure=0
2025-10-08 20:32:54,613 [main] INFO  (DfSqlFileFireMan#fire():93) - Create Schema: success=42, failure=0 (in 2 files)
2025-10-08 20:32:54,613 [main] INFO  (DfCreateSchemaProcess#destroyChangeUserConnection():594) - ...Closing connections to change-users: [system]
2025-10-08 20:32:54,628 [main] INFO  (DfLoadDataProcess#execute():133) - 
2025-10-08 20:32:54,628 [main] INFO  (DfLoadDataProcess#execute():134) - * * * * * * * * * * *
2025-10-08 20:32:54,628 [main] INFO  (DfLoadDataProcess#execute():135) - *                   *
2025-10-08 20:32:54,628 [main] INFO  (DfLoadDataProcess#execute():136) - * Load Data         *
2025-10-08 20:32:54,628 [main] INFO  (DfLoadDataProcess#execute():137) - *                   *
2025-10-08 20:32:54,628 [main] INFO  (DfLoadDataProcess#execute():138) - * * * * * * * * * * *
2025-10-08 20:32:54,636 [main] INFO  (DfDelimiterDataWriterImpl#writeData():97) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-10-08 20:32:54,636 [main] INFO  (DfDelimiterDataWriterImpl#writeData():98) - writeData(playsql/data/common/tsv/UTF-8/acyclic_01_01-MEMBER_STATUS.tsv)
2025-10-08 20:32:54,636 [main] INFO  (DfDelimiterDataWriterImpl#writeData():99) - = = = = = = =/
2025-10-08 20:32:54,637 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 20:32:54,637 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 20:32:54,637 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 20:32:54,646 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_STATUS:{FML, 正式会員, 正式な会員としてサイトサービスが利用可能, 1}
2025-10-08 20:32:54,660 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_STATUS:{PRV, 仮会員, 入会直後のステータスで一部のサイトサービスが利用可能, 3}
2025-10-08 20:32:54,660 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_STATUS:{WDL, 退会会員, 退会が確定した会員でサイトサービスはダメ, 2}
2025-10-08 20:32:54,663 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 3 rows are loaded to MEMBER_STATUS
2025-10-08 20:32:54,663 [main] INFO  (DfDelimiterDataWriterImpl#writeData():97) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-10-08 20:32:54,664 [main] INFO  (DfDelimiterDataWriterImpl#writeData():98) - writeData(playsql/data/common/tsv/UTF-8/acyclic_01_02-PRODUCT_CATEGORY.tsv)
2025-10-08 20:32:54,664 [main] INFO  (DfDelimiterDataWriterImpl#writeData():99) - = = = = = = =/
2025-10-08 20:32:54,664 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 20:32:54,664 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 20:32:54,664 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 20:32:54,667 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_CATEGORY:{FOD, 食品, null}
2025-10-08 20:32:54,667 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_CATEGORY:{MSC, 音楽, null}
2025-10-08 20:32:54,667 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_CATEGORY:{HEB, ハーブ, FOD}
2025-10-08 20:32:54,667 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_CATEGORY:{INS, 楽器, MSC}
2025-10-08 20:32:54,667 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_CATEGORY:{MCD, 音楽CD, MSC}
2025-10-08 20:32:54,669 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 5 rows are loaded to PRODUCT_CATEGORY
2025-10-08 20:32:54,669 [main] INFO  (DfDelimiterDataWriterImpl#writeData():97) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-10-08 20:32:54,669 [main] INFO  (DfDelimiterDataWriterImpl#writeData():98) - writeData(playsql/data/common/tsv/UTF-8/acyclic_01_03-PRODUCT_STATUS.tsv)
2025-10-08 20:32:54,669 [main] INFO  (DfDelimiterDataWriterImpl#writeData():99) - = = = = = = =/
2025-10-08 20:32:54,669 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 20:32:54,669 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 20:32:54,669 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 20:32:54,673 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_STATUS:{ONS, 生産販売可能}
2025-10-08 20:32:54,673 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_STATUS:{PST, 生産中止}
2025-10-08 20:32:54,673 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT_STATUS:{SST, 販売中止}
2025-10-08 20:32:54,675 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 3 rows are loaded to PRODUCT_STATUS
2025-10-08 20:32:54,676 [main] INFO  (DfDelimiterDataWriterImpl#writeData():97) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-10-08 20:32:54,676 [main] INFO  (DfDelimiterDataWriterImpl#writeData():98) - writeData(playsql/data/common/tsv/UTF-8/acyclic_01_04-REGION.tsv)
2025-10-08 20:32:54,676 [main] INFO  (DfDelimiterDataWriterImpl#writeData():99) - = = = = = = =/
2025-10-08 20:32:54,676 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 20:32:54,676 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 20:32:54,676 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 20:32:54,680 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - REGION:{1, アメリカ}
2025-10-08 20:32:54,680 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - REGION:{2, カナダ}
2025-10-08 20:32:54,680 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - REGION:{3, 中国}
2025-10-08 20:32:54,680 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - REGION:{4, 千葉}
2025-10-08 20:32:54,682 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 4 rows are loaded to REGION
2025-10-08 20:32:54,682 [main] INFO  (DfDelimiterDataWriterImpl#writeData():97) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-10-08 20:32:54,682 [main] INFO  (DfDelimiterDataWriterImpl#writeData():98) - writeData(playsql/data/common/tsv/UTF-8/acyclic_01_05-SERVICE_RANK.tsv)
2025-10-08 20:32:54,682 [main] INFO  (DfDelimiterDataWriterImpl#writeData():99) - = = = = = = =/
2025-10-08 20:32:54,682 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 20:32:54,682 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 20:32:54,682 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 20:32:54,686 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - SERVICE_RANK:{BRZ, BRONZE, 2.000, 1, bronze rank, 4}
2025-10-08 20:32:54,686 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - SERVICE_RANK:{GLD, GOLD, 9.200, 1, gold rank, 2}
2025-10-08 20:32:54,686 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - SERVICE_RANK:{PLS, PLASTIC, 0.100, 0, plastic rank, 5}
2025-10-08 20:32:54,686 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - SERVICE_RANK:{PLT, PLATINUM, 12.300, 1, platinum rank, 1}
2025-10-08 20:32:54,687 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - SERVICE_RANK:{SIL, SILVER, 6.740, 1, silver rank, 3}
2025-10-08 20:32:54,688 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 5 rows are loaded to SERVICE_RANK
2025-10-08 20:32:54,689 [main] INFO  (DfDelimiterDataWriterImpl#writeData():97) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-10-08 20:32:54,689 [main] INFO  (DfDelimiterDataWriterImpl#writeData():98) - writeData(playsql/data/common/tsv/UTF-8/acyclic_01_06-WITHDRAWAL_REASON.tsv)
2025-10-08 20:32:54,689 [main] INFO  (DfDelimiterDataWriterImpl#writeData():99) - = = = = = = =/
2025-10-08 20:32:54,689 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 20:32:54,689 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 20:32:54,689 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 20:32:54,695 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - WITHDRAWAL_REASON:{FRT, フリテンだから, 3}
2025-10-08 20:32:54,695 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - WITHDRAWAL_REASON:{OTH, その他理由, 4}
2025-10-08 20:32:54,696 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - WITHDRAWAL_REASON:{PRD, 商品に魅力がないから, 2}
2025-10-08 20:32:54,696 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - WITHDRAWAL_REASON:{SIT, サイトが使いにくいから, 1}
2025-10-08 20:32:54,697 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 4 rows are loaded to WITHDRAWAL_REASON
2025-10-08 20:32:54,699 [main] INFO  (DfDelimiterDataWriterImpl#writeData():97) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-10-08 20:32:54,699 [main] INFO  (DfDelimiterDataWriterImpl#writeData():98) - writeData(playsql/data/ut/reversetsv/UTF-8/cyclic_01_01-PRODUCT.tsv)
2025-10-08 20:32:54,699 [main] INFO  (DfDelimiterDataWriterImpl#writeData():99) - = = = = = = =/
2025-10-08 20:32:54,699 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 20:32:54,699 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 20:32:54,699 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 20:32:54,703 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{1, Cold Spring Harbor, BILLYJOEL-01, MCD, PST, 1100, 0, 2025-10-08 20:32:54.703, sea, 2025-10-08 20:32:54.703, land}
2025-10-08 20:32:54,709 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{2, Piano Man, BILLYJOEL-02, MCD, ONS, 1200, 0, 2025-10-08 20:32:54.709, sea, 2025-10-08 20:32:54.709, land}
2025-10-08 20:32:54,709 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{3, Streetlife Serenade, BILLYJOEL-03, MCD, ONS, 1300, 0, 2025-10-08 20:32:54.709, sea, 2025-10-08 20:32:54.709, land}
2025-10-08 20:32:54,709 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{4, Turnstiles, BILLYJOEL-04, MCD, ONS, 1400, 0, 2025-10-08 20:32:54.709, sea, 2025-10-08 20:32:54.709, land}
2025-10-08 20:32:54,709 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{5, The Stranger, BILLYJOEL-05, MCD, ONS, 1500, 0, 2025-10-08 20:32:54.709, sea, 2025-10-08 20:32:54.709, land}
2025-10-08 20:32:54,710 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{6, 52nd Street, BILLYJOEL-06, MCD, ONS, 1600, 0, 2025-10-08 20:32:54.71, sea, 2025-10-08 20:32:54.71, land}
2025-10-08 20:32:54,710 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{7, Glass House, BILLYJOEL-07, MCD, ONS, 1700, 0, 2025-10-08 20:32:54.71, sea, 2025-10-08 20:32:54.71, land}
2025-10-08 20:32:54,710 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{8, Nylon Curtain, BILLYJOEL-08, MCD, ONS, 1800, 0, 2025-10-08 20:32:54.71, sea, 2025-10-08 20:32:54.71, land}
2025-10-08 20:32:54,710 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{9, Bridge, BILLYJOEL-09, MCD, ONS, 1900, 0, 2025-10-08 20:32:54.71, sea, 2025-10-08 20:32:54.71, land}
2025-10-08 20:32:54,711 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{10, Storm Front, BILLYJOEL-10, MCD, ONS, 2000, 0, 2025-10-08 20:32:54.711, sea, 2025-10-08 20:32:54.711, land}
2025-10-08 20:32:54,711 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{11, River of Dreams, BILLYJOEL-11, MCD, ONS, 2100, 0, 2025-10-08 20:32:54.711, sea, 2025-10-08 20:32:54.711, land}
2025-10-08 20:32:54,711 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{12, Grand Piano, PIANO-01, INS, ONS, 1400000, 0, 2025-10-08 20:32:54.711, sea, 2025-10-08 20:32:54.711, land}
2025-10-08 20:32:54,711 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{13, Upright Piano, PIANO-02, INS, ONS, 1100000, 0, 2025-10-08 20:32:54.711, sea, 2025-10-08 20:32:54.711, land}
2025-10-08 20:32:54,711 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{14, Low Price Flute, FLUTE-01, INS, ONS, 50000, 0, 2025-10-08 20:32:54.711, sea, 2025-10-08 20:32:54.711, land}
2025-10-08 20:32:54,712 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{15, Silver Flute, FLUTE-02, INS, ONS, null, 0, 2025-10-08 20:32:54.712, sea, 2025-10-08 20:32:54.712, land}
2025-10-08 20:32:54,712 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{16, Gold Flute, FLUTE-03, INS, ONS, null, 0, 2025-10-08 20:32:54.712, sea, 2025-10-08 20:32:54.712, land}
2025-10-08 20:32:54,712 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{17, Rosemary (100g), HARB-100-01, HEB, ONS, 400, 0, 2025-10-08 20:32:54.712, sea, 2025-10-08 20:32:54.712, land}
2025-10-08 20:32:54,712 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{18, Lemon Grass (100g), HARB-100-02, HEB, ONS, 380, 0, 2025-10-08 20:32:54.712, sea, 2025-10-08 20:32:54.712, land}
2025-10-08 20:32:54,713 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{19, Camomile (100g), HARB-100-03, HEB, ONS, 380, 0, 2025-10-08 20:32:54.713, sea, 2025-10-08 20:32:54.713, land}
2025-10-08 20:32:54,713 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PRODUCT:{20, Hatomugi (100g), HARB-100-04, HEB, ONS, 340, 0, 2025-10-08 20:32:54.713, sea, 2025-10-08 20:32:54.713, land}
2025-10-08 20:32:54,720 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 20 rows are loaded to PRODUCT
2025-10-08 20:32:54,720 [main] INFO  (DfDelimiterDataWriterImpl#writeData():97) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-10-08 20:32:54,720 [main] INFO  (DfDelimiterDataWriterImpl#writeData():98) - writeData(playsql/data/ut/reversetsv/UTF-8/cyclic_02_01-MEMBER.tsv)
2025-10-08 20:32:54,720 [main] INFO  (DfDelimiterDataWriterImpl#writeData():99) - = = = = = = =/
2025-10-08 20:32:54,720 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 20:32:54,720 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 20:32:54,720 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 20:32:54,724 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{1, Stojkovic, Pixy, FML, 2007-12-01 11:01:10.000, 1965-03-03 00:00:00, 0, 2025-10-08 20:32:54.724, sea, 2025-10-08 20:32:54.724, land}
2025-10-08 20:32:54,725 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{2, Savicevic, Genius, PRV, null, 1966-09-15 00:00:00, 0, 2025-10-08 20:32:54.725, sea, 2025-10-08 20:32:54.725, land}
2025-10-08 20:32:54,725 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{3, Mijatovic, Mijato, WDL, 2005-10-03 13:03:30.000, null, 0, 2025-10-08 20:32:54.725, sea, 2025-10-08 20:32:54.725, land}
2025-10-08 20:32:54,725 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{4, Stankovic, Stanko, FML, 2006-09-04 14:04:40.000, 1978-09-11 00:00:00, 0, 2025-10-08 20:32:54.725, sea, 2025-10-08 20:32:54.725, land}
2025-10-08 20:32:54,726 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{5, Milosevic, Milose, FML, 2007-08-05 15:05:50.000, null, 0, 2025-10-08 20:32:54.726, sea, 2025-10-08 20:32:54.726, land}
2025-10-08 20:32:54,726 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{6, Mihajlovic, FreeKick, WDL, 2006-07-06 16:06:40.000, 1969-02-20 00:00:00, 0, 2025-10-08 20:32:54.726, sea, 2025-10-08 20:32:54.726, land}
2025-10-08 20:32:54,727 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{7, アカギ, Akagi, FML, 2005-06-07 17:07:30.000, null, 0, 2025-10-08 20:32:54.727, sea, 2025-10-08 20:32:54.727, land}
2025-10-08 20:32:54,727 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{8, Kezman, RedCard, FML, 2006-05-08 18:08:20.000, null, 0, 2025-10-08 20:32:54.727, sea, 2025-10-08 20:32:54.727, land}
2025-10-08 20:32:54,728 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{9, Maslovar, JEFUnited, FML, 2007-12-31 00:00:00.000, 1967-02-20 00:00:00, 0, 2025-10-08 20:32:54.727, sea, 2025-10-08 20:32:54.727, land}
2025-10-08 20:32:54,729 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{10, 諸葛亮孔明, ShokatsuGoGo, PRV, null, null, 0, 2025-10-08 20:32:54.729, sea, 2025-10-08 20:32:54.729, land}
2025-10-08 20:32:54,730 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{11, Boban, Boban, FML, 2007-12-01 11:01:10.000, 1968-10-08 00:00:00, 0, 2025-10-08 20:32:54.73, sea, 2025-10-08 20:32:54.73, land}
2025-10-08 20:32:54,730 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{12, Suker, Suker, PRV, null, 1968-01-01 00:00:00, 0, 2025-10-08 20:32:54.73, sea, 2025-10-08 20:32:54.73, land}
2025-10-08 20:32:54,730 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{13, Jarni, Jarni, WDL, 2005-10-03 13:03:30.000, 1968-10-26 00:00:00, 0, 2025-10-08 20:32:54.73, sea, 2025-10-08 20:32:54.73, land}
2025-10-08 20:32:54,731 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{14, Boksic, Boksic, FML, 2006-09-04 14:04:40.000, 1970-01-21 00:00:00, 0, 2025-10-08 20:32:54.731, sea, 2025-10-08 20:32:54.731, land}
2025-10-08 20:32:54,732 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{15, Prosinecki, Prosinecki, FML, 2004-08-05 15:05:50.000, 1969-01-12 00:00:00, 0, 2025-10-08 20:32:54.732, sea, 2025-10-08 20:32:54.732, land}
2025-10-08 20:32:54,732 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{16, RobeltKovac, RobeltKovac, WDL, 2006-07-06 16:06:40.000, null, 0, 2025-10-08 20:32:54.732, sea, 2025-10-08 20:32:54.732, land}
2025-10-08 20:32:54,732 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{17, NikoKovac, NikoKovac, FML, 2005-06-07 17:07:30.000, null, 0, 2025-10-08 20:32:54.732, sea, 2025-10-08 20:32:54.732, land}
2025-10-08 20:32:54,733 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{18, Jovanovic, Jovano, FML, 2006-05-08 18:08:20.000, 1981-04-18 00:00:00, 0, 2025-10-08 20:32:54.733, sea, 2025-10-08 20:32:54.733, land}
2025-10-08 20:32:54,733 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{19, Milko, Milko, FML, 2005-12-31 12:34:56.000, 1974-09-10 00:00:00, 0, 2025-10-08 20:32:54.733, sea, 2025-10-08 20:32:54.733, land}
2025-10-08 20:32:54,734 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER:{20, 諸葛瑾子瑜, ShokatsuKinKin, FML, 2001-12-31 23:59:59.000, null, 0, 2025-10-08 20:32:54.734, sea, 2025-10-08 20:32:54.734, land}
2025-10-08 20:32:54,738 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 20 rows are loaded to MEMBER
2025-10-08 20:32:54,739 [main] INFO  (DfDelimiterDataWriterImpl#writeData():97) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-10-08 20:32:54,739 [main] INFO  (DfDelimiterDataWriterImpl#writeData():98) - writeData(playsql/data/ut/reversetsv/UTF-8/cyclic_02_02-MEMBER_ADDRESS.tsv)
2025-10-08 20:32:54,739 [main] INFO  (DfDelimiterDataWriterImpl#writeData():99) - = = = = = = =/
2025-10-08 20:32:54,739 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 20:32:54,739 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 20:32:54,739 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 20:32:54,744 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{1, 1, 2007-03-24 00:00:00, 2015-12-31 00:00:00, Nagara, 4, 0, 2025-10-08 20:32:54.744, sea, 2025-10-08 20:32:54.744, land}
2025-10-08 20:32:54,745 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{2, 1, 1949-01-01 00:00:00, 1997-03-31 00:00:00, New York, 1, 0, 2025-10-08 20:32:54.745, sea, 2025-10-08 20:32:54.745, land}
2025-10-08 20:32:54,745 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{3, 1, 1997-04-01 00:00:00, 2000-09-30 00:00:00, Los Angels, 1, 0, 2025-10-08 20:32:54.745, sea, 2025-10-08 20:32:54.745, land}
2025-10-08 20:32:54,746 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{4, 1, 2000-10-01 00:00:00, 2003-08-31 00:00:00, New York, 1, 0, 2025-10-08 20:32:54.746, sea, 2025-10-08 20:32:54.746, land}
2025-10-08 20:32:54,746 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{5, 1, 2003-09-01 00:00:00, 2004-12-22 00:00:00, San Francisco Powell, 1, 0, 2025-10-08 20:32:54.746, sea, 2025-10-08 20:32:54.746, land}
2025-10-08 20:32:54,747 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{6, 1, 2004-12-23 00:00:00, 2006-03-23 00:00:00, San Francisco Daly City, 1, 0, 2025-10-08 20:32:54.747, sea, 2025-10-08 20:32:54.747, land}
2025-10-08 20:32:54,747 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{7, 1, 2016-01-01 00:00:00, 9999-12-31 00:00:00, Victoria, 2, 0, 2025-10-08 20:32:54.747, sea, 2025-10-08 20:32:54.747, land}
2025-10-08 20:32:54,748 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{8, 2, 2004-12-24 00:00:00, 9999-12-31 00:00:00, Ichihara, 4, 0, 2025-10-08 20:32:54.748, sea, 2025-10-08 20:32:54.748, land}
2025-10-08 20:32:54,748 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{9, 3, 2004-12-24 00:00:00, 2007-03-23 00:00:00, Mobara, 4, 0, 2025-10-08 20:32:54.748, sea, 2025-10-08 20:32:54.748, land}
2025-10-08 20:32:54,748 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{10, 4, 2002-11-01 00:00:00, 9999-12-31 00:00:00, Sousa, 4, 0, 2025-10-08 20:32:54.748, sea, 2025-10-08 20:32:54.748, land}
2025-10-08 20:32:54,749 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{11, 6, 2002-11-01 00:00:00, 9999-12-31 00:00:00, Yokoshiba, 4, 0, 2025-10-08 20:32:54.749, sea, 2025-10-08 20:32:54.749, land}
2025-10-08 20:32:54,749 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{12, 9, 2010-11-01 00:00:00, 9999-12-31 00:00:00, Tateyama, 4, 0, 2025-10-08 20:32:54.749, sea, 2025-10-08 20:32:54.749, land}
2025-10-08 20:32:54,749 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{13, 10, 1970-01-01 00:00:00, 9999-12-31 00:00:00, Shoku, 3, 0, 2025-10-08 20:32:54.749, sea, 2025-10-08 20:32:54.749, land}
2025-10-08 20:32:54,750 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{14, 12, 2000-11-01 00:00:00, 2001-11-01 00:00:00, Oohara, 4, 0, 2025-10-08 20:32:54.75, sea, 2025-10-08 20:32:54.75, land}
2025-10-08 20:32:54,750 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{15, 15, 2002-11-01 00:00:00, 2006-10-30 00:00:00, MinamiBousou, 4, 0, 2025-10-08 20:32:54.75, sea, 2025-10-08 20:32:54.75, land}
2025-10-08 20:32:54,751 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{16, 15, 2007-11-01 00:00:00, 9999-12-31 00:00:00, Tomisato, 4, 0, 2025-10-08 20:32:54.751, sea, 2025-10-08 20:32:54.751, land}
2025-10-08 20:32:54,752 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{17, 18, 2001-03-21 00:00:00, 2007-11-21 00:00:00, Katsuura, 4, 0, 2025-10-08 20:32:54.752, sea, 2025-10-08 20:32:54.752, land}
2025-10-08 20:32:54,753 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{18, 18, 2007-11-22 00:00:00, 9999-12-31 00:00:00, Kamogawa, 4, 0, 2025-10-08 20:32:54.753, sea, 2025-10-08 20:32:54.753, land}
2025-10-08 20:32:54,753 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{19, 19, 2000-11-01 00:00:00, 9999-12-31 00:00:00, Yotsukaido, 4, 0, 2025-10-08 20:32:54.753, sea, 2025-10-08 20:32:54.753, land}
2025-10-08 20:32:54,753 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_ADDRESS:{20, 20, 1970-01-01 00:00:00, 9999-12-31 00:00:00, Go, 3, 0, 2025-10-08 20:32:54.753, sea, 2025-10-08 20:32:54.753, land}
2025-10-08 20:32:54,758 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 20 rows are loaded to MEMBER_ADDRESS
2025-10-08 20:32:54,759 [main] INFO  (DfDelimiterDataWriterImpl#writeData():97) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-10-08 20:32:54,759 [main] INFO  (DfDelimiterDataWriterImpl#writeData():98) - writeData(playsql/data/ut/reversetsv/UTF-8/cyclic_02_03-MEMBER_LOGIN.tsv)
2025-10-08 20:32:54,759 [main] INFO  (DfDelimiterDataWriterImpl#writeData():99) - = = = = = = =/
2025-10-08 20:32:54,759 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 20:32:54,759 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 20:32:54,759 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 20:32:54,764 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{1, 3, 2006-12-24 23:59:59.000, 0, FML}
2025-10-08 20:32:54,764 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{2, 6, 2007-11-11 16:16:16.000, 0, FML}
2025-10-08 20:32:54,765 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{3, 1, 2006-12-23 22:56:29.000, 0, FML}
2025-10-08 20:32:54,765 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{4, 6, 2007-11-01 02:13:00.000, 0, FML}
2025-10-08 20:32:54,765 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{5, 7, 2006-05-24 23:12:59.000, 0, FML}
2025-10-08 20:32:54,766 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{6, 6, 2005-11-11 16:32:01.000, 0, PRV}
2025-10-08 20:32:54,766 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{7, 6, 2006-01-28 23:59:59.000, 1, FML}
2025-10-08 20:32:54,766 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{8, 6, 2007-11-09 16:23:00.000, 0, FML}
2025-10-08 20:32:54,766 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{9, 8, 2006-12-22 23:59:59.000, 0, FML}
2025-10-08 20:32:54,766 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{10, 6, 2007-11-11 09:01:00.000, 0, FML}
2025-10-08 20:32:54,766 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{11, 1, 2006-12-23 23:59:59.000, 0, FML}
2025-10-08 20:32:54,767 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{12, 9, 2007-11-15 12:43:00.000, 0, FML}
2025-10-08 20:32:54,767 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{13, 10, 2006-12-24 23:59:59.000, 0, FML}
2025-10-08 20:32:54,767 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{14, 6, 2007-04-01 16:23:01.000, 0, FML}
2025-10-08 20:32:54,767 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{15, 7, 2006-12-24 23:59:20.000, 1, FML}
2025-10-08 20:32:54,767 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{16, 6, 2007-05-01 12:23:02.000, 0, FML}
2025-10-08 20:32:54,768 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{17, 7, 2006-12-24 23:59:21.000, 0, FML}
2025-10-08 20:32:54,768 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{18, 6, 2007-06-11 17:23:03.000, 0, FML}
2025-10-08 20:32:54,768 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{19, 4, 2006-12-24 23:59:22.000, 0, FML}
2025-10-08 20:32:54,768 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{20, 3, 2007-11-01 16:12:04.000, 0, FML}
2025-10-08 20:32:54,768 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{21, 11, 2006-12-24 23:59:23.000, 0, FML}
2025-10-08 20:32:54,768 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{22, 1, 2007-11-01 16:23:05.000, 0, PRV}
2025-10-08 20:32:54,769 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{23, 9, 2006-12-24 23:59:24.000, 1, FML}
2025-10-08 20:32:54,769 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{24, 8, 2007-11-01 16:23:06.000, 0, FML}
2025-10-08 20:32:54,769 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{25, 7, 2007-12-24 11:59:25.000, 1, FML}
2025-10-08 20:32:54,769 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{26, 6, 2007-06-21 01:23:57.000, 0, FML}
2025-10-08 20:32:54,769 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{27, 5, 2006-12-24 23:59:26.000, 0, FML}
2025-10-08 20:32:54,769 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{28, 3, 2007-11-01 16:23:08.000, 0, FML}
2025-10-08 20:32:54,770 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{29, 3, 2006-12-24 23:59:27.000, 0, FML}
2025-10-08 20:32:54,770 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{30, 10, 2007-11-01 16:23:09.000, 0, FML}
2025-10-08 20:32:54,770 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{31, 15, 2006-07-24 23:59:28.000, 0, FML}
2025-10-08 20:32:54,770 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{32, 14, 2007-11-01 17:23:10.000, 0, FML}
2025-10-08 20:32:54,774 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{33, 15, 2007-11-01 16:23:10.000, 0, FML}
2025-10-08 20:32:54,775 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{34, 18, 2006-07-24 23:59:29.000, 0, FML}
2025-10-08 20:32:54,775 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{35, 3, 2007-11-01 17:23:11.000, 0, PRV}
2025-10-08 20:32:54,775 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{36, 5, 2007-11-01 16:23:11.000, 1, FML}
2025-10-08 20:32:54,775 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{37, 11, 2006-07-24 23:59:30.000, 0, FML}
2025-10-08 20:32:54,775 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{38, 20, 2007-11-01 17:23:12.000, 1, FML}
2025-10-08 20:32:54,776 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{39, 19, 2007-11-01 16:23:12.000, 0, FML}
2025-10-08 20:32:54,776 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{40, 4, 2006-07-24 23:59:31.000, 0, FML}
2025-10-08 20:32:54,776 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{41, 4, 2007-11-01 17:23:13.000, 0, FML}
2025-10-08 20:32:54,776 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{42, 4, 2007-11-01 16:23:13.000, 0, FML}
2025-10-08 20:32:54,776 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{43, 4, 2006-07-24 23:52:32.000, 0, FML}
2025-10-08 20:32:54,776 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{44, 4, 2007-11-01 11:23:14.000, 0, FML}
2025-10-08 20:32:54,776 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{45, 4, 2007-11-21 06:23:14.000, 0, FML}
2025-10-08 20:32:54,777 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{46, 12, 2006-07-24 23:52:33.000, 0, PRV}
2025-10-08 20:32:54,777 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{47, 13, 2007-11-01 11:23:15.000, 1, FML}
2025-10-08 20:32:54,778 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{48, 14, 2007-11-21 06:23:15.000, 0, FML}
2025-10-08 20:32:54,778 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{49, 17, 2006-07-24 23:52:34.000, 1, FML}
2025-10-08 20:32:54,778 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{50, 18, 2007-11-01 11:23:16.000, 0, FML}
2025-10-08 20:32:54,778 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{51, 16, 2007-11-21 06:23:16.000, 0, FML}
2025-10-08 20:32:54,779 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{52, 4, 2006-07-24 23:52:35.000, 0, FML}
2025-10-08 20:32:54,779 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{53, 5, 2007-11-01 11:23:17.000, 0, FML}
2025-10-08 20:32:54,779 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{54, 5, 2007-11-21 06:23:17.000, 0, FML}
2025-10-08 20:32:54,779 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{55, 11, 2006-07-24 23:52:36.000, 0, FML}
2025-10-08 20:32:54,779 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_LOGIN:{56, 12, 2007-11-01 11:23:18.000, 0, FML}
2025-10-08 20:32:54,792 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 56 rows are loaded to MEMBER_LOGIN
2025-10-08 20:32:54,793 [main] INFO  (DfDelimiterDataWriterImpl#writeData():97) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-10-08 20:32:54,793 [main] INFO  (DfDelimiterDataWriterImpl#writeData():98) - writeData(playsql/data/ut/reversetsv/UTF-8/cyclic_02_04-MEMBER_SECURITY.tsv)
2025-10-08 20:32:54,793 [main] INFO  (DfDelimiterDataWriterImpl#writeData():99) - = = = = = = =/
2025-10-08 20:32:54,793 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 20:32:54,793 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 20:32:54,793 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 20:32:54,797 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{1, aaa, 30符3飜は？, 自分で数えろ, 0, 2025-10-08 20:32:54.797, sea, 2025-10-08 20:32:54.797, land}
2025-10-08 20:32:54,797 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{2, bbb, 50符2飜は？, 自分で数えろ, 0, 2025-10-08 20:32:54.797, sea, 2025-10-08 20:32:54.797, land}
2025-10-08 20:32:54,798 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{3, ccc, 110符2飜は？, 自分で数えろ, 0, 2025-10-08 20:32:54.798, sea, 2025-10-08 20:32:54.798, land}
2025-10-08 20:32:54,798 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{4, ddd, タンヤオ？, そう, 0, 2025-10-08 20:32:54.798, sea, 2025-10-08 20:32:54.798, land}
2025-10-08 20:32:54,798 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{5, eee2, ピンフ？, そう, 0, 2025-10-08 20:32:54.798, sea, 2025-10-08 20:32:54.798, land}
2025-10-08 20:32:54,798 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{6, fff, サンアンコウ？, そう, 0, 2025-10-08 20:32:54.798, sea, 2025-10-08 20:32:54.798, land}
2025-10-08 20:32:54,799 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{7, ggg3, イーペーコウ？, そう, 0, 2025-10-08 20:32:54.799, sea, 2025-10-08 20:32:54.799, land}
2025-10-08 20:32:54,799 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{8, hhh555, リャンペーコウ？, そう, 0, 2025-10-08 20:32:54.799, sea, 2025-10-08 20:32:54.799, land}
2025-10-08 20:32:54,799 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{9, iii, サンペーコウはないよね？, 当たり前だ, 0, 2025-10-08 20:32:54.799, sea, 2025-10-08 20:32:54.799, land}
2025-10-08 20:32:54,799 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{10, jjj, 私はイカサマしません, 実はする, 0, 2025-10-08 20:32:54.799, sea, 2025-10-08 20:32:54.799, land}
2025-10-08 20:32:54,799 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{11, qwe, 70符3飜は？, 自分で数えろ, 0, 2025-10-08 20:32:54.799, sea, 2025-10-08 20:32:54.799, land}
2025-10-08 20:32:54,799 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{12, sdf, 20符4飜は？, 自分で数えろ, 0, 2025-10-08 20:32:54.799, sea, 2025-10-08 20:32:54.799, land}
2025-10-08 20:32:54,799 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{13, dfgsf, 大三元は？, 役満だよ, 0, 2025-10-08 20:32:54.799, sea, 2025-10-08 20:32:54.799, land}
2025-10-08 20:32:54,800 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{14, ert, タンヤオ？, そう, 0, 2025-10-08 20:32:54.8, sea, 2025-10-08 20:32:54.8, land}
2025-10-08 20:32:54,800 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{15, fhgf, ピンフ？, そう, 0, 2025-10-08 20:32:54.8, sea, 2025-10-08 20:32:54.8, land}
2025-10-08 20:32:54,800 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{16, ghj, サンアンコウ？, そう, 0, 2025-10-08 20:32:54.8, sea, 2025-10-08 20:32:54.8, land}
2025-10-08 20:32:54,800 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{17, tyuffff, サンレンコウ？, そう, 0, 2025-10-08 20:32:54.8, sea, 2025-10-08 20:32:54.8, land}
2025-10-08 20:32:54,800 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{18, jkl, イーペーコウ？, そう, 0, 2025-10-08 20:32:54.8, sea, 2025-10-08 20:32:54.8, land}
2025-10-08 20:32:54,800 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{19, ghjfff, 左ハイは？, 痛い, 0, 2025-10-08 20:32:54.8, sea, 2025-10-08 20:32:54.8, land}
2025-10-08 20:32:54,800 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SECURITY:{20, cvb, 孫権は？, 呉, 0, 2025-10-08 20:32:54.8, sea, 2025-10-08 20:32:54.8, land}
2025-10-08 20:32:54,804 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 20 rows are loaded to MEMBER_SECURITY
2025-10-08 20:32:54,804 [main] INFO  (DfDelimiterDataWriterImpl#writeData():97) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-10-08 20:32:54,804 [main] INFO  (DfDelimiterDataWriterImpl#writeData():98) - writeData(playsql/data/ut/reversetsv/UTF-8/cyclic_02_05-MEMBER_SERVICE.tsv)
2025-10-08 20:32:54,804 [main] INFO  (DfDelimiterDataWriterImpl#writeData():99) - = = = = = = =/
2025-10-08 20:32:54,805 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 20:32:54,805 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 20:32:54,805 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 20:32:54,808 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{1, 1234, PLT, 0, 2025-10-08 20:32:54.808, sea, 2025-10-08 20:32:54.808, land}
2025-10-08 20:32:54,808 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{2, 2345, GLD, 0, 2025-10-08 20:32:54.808, sea, 2025-10-08 20:32:54.808, land}
2025-10-08 20:32:54,808 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{3, 3456, GLD, 0, 2025-10-08 20:32:54.808, sea, 2025-10-08 20:32:54.808, land}
2025-10-08 20:32:54,808 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{4, 875, BRZ, 0, 2025-10-08 20:32:54.808, sea, 2025-10-08 20:32:54.808, land}
2025-10-08 20:32:54,809 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{5, 1111, BRZ, 0, 2025-10-08 20:32:54.809, sea, 2025-10-08 20:32:54.809, land}
2025-10-08 20:32:54,809 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{6, 5422, SIL, 0, 2025-10-08 20:32:54.809, sea, 2025-10-08 20:32:54.809, land}
2025-10-08 20:32:54,809 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{7, 24678, SIL, 0, 2025-10-08 20:32:54.809, sea, 2025-10-08 20:32:54.809, land}
2025-10-08 20:32:54,809 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{8, 234, SIL, 0, 2025-10-08 20:32:54.809, sea, 2025-10-08 20:32:54.809, land}
2025-10-08 20:32:54,809 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{9, 3, SIL, 0, 2025-10-08 20:32:54.809, sea, 2025-10-08 20:32:54.809, land}
2025-10-08 20:32:54,809 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{10, 98765, PLT, 0, 2025-10-08 20:32:54.809, sea, 2025-10-08 20:32:54.809, land}
2025-10-08 20:32:54,809 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{11, 34, GLD, 0, 2025-10-08 20:32:54.809, sea, 2025-10-08 20:32:54.809, land}
2025-10-08 20:32:54,810 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{12, 532, PLT, 0, 2025-10-08 20:32:54.809, sea, 2025-10-08 20:32:54.809, land}
2025-10-08 20:32:54,810 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{13, 23678, GLD, 0, 2025-10-08 20:32:54.81, sea, 2025-10-08 20:32:54.81, land}
2025-10-08 20:32:54,810 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{14, 432, GLD, 0, 2025-10-08 20:32:54.81, sea, 2025-10-08 20:32:54.81, land}
2025-10-08 20:32:54,810 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{15, 543, BRZ, 0, 2025-10-08 20:32:54.81, sea, 2025-10-08 20:32:54.81, land}
2025-10-08 20:32:54,810 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{16, 23545, PLT, 0, 2025-10-08 20:32:54.81, sea, 2025-10-08 20:32:54.81, land}
2025-10-08 20:32:54,810 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{17, 2345, GLD, 0, 2025-10-08 20:32:54.81, sea, 2025-10-08 20:32:54.81, land}
2025-10-08 20:32:54,810 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{18, 8763, SIL, 0, 2025-10-08 20:32:54.81, sea, 2025-10-08 20:32:54.81, land}
2025-10-08 20:32:54,810 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{19, 34567, SIL, 0, 2025-10-08 20:32:54.81, sea, 2025-10-08 20:32:54.81, land}
2025-10-08 20:32:54,810 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_SERVICE:{20, 43, GLD, 0, 2025-10-08 20:32:54.81, sea, 2025-10-08 20:32:54.81, land}
2025-10-08 20:32:54,814 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 20 rows are loaded to MEMBER_SERVICE
2025-10-08 20:32:54,814 [main] INFO  (DfDelimiterDataWriterImpl#writeData():97) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-10-08 20:32:54,814 [main] INFO  (DfDelimiterDataWriterImpl#writeData():98) - writeData(playsql/data/ut/reversetsv/UTF-8/cyclic_02_06-MEMBER_WITHDRAWAL.tsv)
2025-10-08 20:32:54,814 [main] INFO  (DfDelimiterDataWriterImpl#writeData():99) - = = = = = = =/
2025-10-08 20:32:54,814 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 20:32:54,814 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 20:32:54,814 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 20:32:54,818 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_WITHDRAWAL:{3, null, 俺はワールドカップでPK外した…, 2006-12-24 23:59:59.000, 2025-10-08 20:32:54.818, sea, 2025-10-08 20:32:54.818, land}
2025-10-08 20:32:54,819 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_WITHDRAWAL:{6, SIT, null, 2007-11-11 16:00:00.000, 2025-10-08 20:32:54.819, sea, 2025-10-08 20:32:54.819, land}
2025-10-08 20:32:54,819 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_WITHDRAWAL:{13, PRD, 左サイドで走りすぎて疲れた, 2006-12-24 05:52:30.000, 2025-10-08 20:32:54.819, sea, 2025-10-08 20:32:54.819, land}
2025-10-08 20:32:54,820 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - MEMBER_WITHDRAWAL:{16, SIT, コバチが２人いるため, 2007-11-13 16:00:00.000, 2025-10-08 20:32:54.82, sea, 2025-10-08 20:32:54.82, land}
2025-10-08 20:32:54,821 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 4 rows are loaded to MEMBER_WITHDRAWAL
2025-10-08 20:32:54,822 [main] INFO  (DfDelimiterDataWriterImpl#writeData():97) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-10-08 20:32:54,822 [main] INFO  (DfDelimiterDataWriterImpl#writeData():98) - writeData(playsql/data/ut/reversetsv/UTF-8/cyclic_03_01-PURCHASE.tsv)
2025-10-08 20:32:54,822 [main] INFO  (DfDelimiterDataWriterImpl#writeData():99) - = = = = = = =/
2025-10-08 20:32:54,822 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 20:32:54,822 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 20:32:54,822 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 20:32:54,826 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{1, 5, 3, 2006-12-24 23:59:59.000, 1, 1800, 1, 0, 2025-10-08 20:32:54.826, sea, 2025-10-08 20:32:54.826, land}
2025-10-08 20:32:54,826 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{2, 15, 7, 2007-11-11 16:16:16.000, 1, 1700, 1, 0, 2025-10-08 20:32:54.826, sea, 2025-10-08 20:32:54.826, land}
2025-10-08 20:32:54,827 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{3, 13, 3, 2006-12-23 22:56:29.000, 1, 1800, 1, 0, 2025-10-08 20:32:54.827, sea, 2025-10-08 20:32:54.827, land}
2025-10-08 20:32:54,827 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{4, 2, 5, 2007-11-01 02:13:00.000, 2, 1700, 1, 0, 2025-10-08 20:32:54.827, sea, 2025-10-08 20:32:54.827, land}
2025-10-08 20:32:54,827 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{5, 9, 11, 2008-01-04 23:12:59.000, 5, 1800, 1, 0, 2025-10-08 20:32:54.827, sea, 2025-10-08 20:32:54.827, land}
2025-10-08 20:32:54,828 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{6, 20, 2, 2002-01-01 16:32:01.000, 1, 2000, 1, 0, 2025-10-08 20:32:54.828, sea, 2025-10-08 20:32:54.828, land}
2025-10-08 20:32:54,828 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{7, 19, 9, 2006-01-29 00:00:00.000, 1, 1000, 0, 0, 2025-10-08 20:32:54.828, sea, 2025-10-08 20:32:54.828, land}
2025-10-08 20:32:54,828 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{8, 4, 7, 2007-11-09 16:23:00.000, 1, 1535, 1, 0, 2025-10-08 20:32:54.828, sea, 2025-10-08 20:32:54.828, land}
2025-10-08 20:32:54,829 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{9, 4, 10, 2006-12-22 23:59:59.000, 20, 1700, 1, 0, 2025-10-08 20:32:54.829, sea, 2025-10-08 20:32:54.829, land}
2025-10-08 20:32:54,829 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{10, 2, 10, 2007-11-01 02:13:00.000, 1, 1700, 0, 0, 2025-10-08 20:32:54.829, sea, 2025-10-08 20:32:54.829, land}
2025-10-08 20:32:54,829 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{11, 5, 2, 2007-11-09 16:23:01.000, 1, 1800, 1, 0, 2025-10-08 20:32:54.829, sea, 2025-10-08 20:32:54.829, land}
2025-10-08 20:32:54,829 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{12, 15, 2, 2006-12-22 23:59:12.000, 1, 1700, 1, 0, 2025-10-08 20:32:54.829, sea, 2025-10-08 20:32:54.829, land}
2025-10-08 20:32:54,829 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{13, 13, 8, 2007-11-01 02:13:00.000, 1, 1800, 1, 0, 2025-10-08 20:32:54.829, sea, 2025-10-08 20:32:54.829, land}
2025-10-08 20:32:54,829 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{14, 2, 4, 2007-11-09 16:23:02.000, 2, 1700, 1, 0, 2025-10-08 20:32:54.829, sea, 2025-10-08 20:32:54.829, land}
2025-10-08 20:32:54,830 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{15, 9, 11, 2006-12-22 23:59:32.000, 5, 1800, 1, 0, 2025-10-08 20:32:54.83, sea, 2025-10-08 20:32:54.83, land}
2025-10-08 20:32:54,830 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{16, 20, 1, 2007-11-01 02:13:00.000, 1, 2000, 1, 0, 2025-10-08 20:32:54.83, sea, 2025-10-08 20:32:54.83, land}
2025-10-08 20:32:54,830 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{17, 19, 11, 2006-12-22 23:59:33.000, 2, 1000, 0, 0, 2025-10-08 20:32:54.83, sea, 2025-10-08 20:32:54.83, land}
2025-10-08 20:32:54,830 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{18, 4, 10, 2007-11-01 02:13:00.000, 1, 1535, 1, 0, 2025-10-08 20:32:54.83, sea, 2025-10-08 20:32:54.83, land}
2025-10-08 20:32:54,830 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{19, 4, 11, 2007-11-01 02:13:00.000, 4, 1700, 1, 0, 2025-10-08 20:32:54.83, sea, 2025-10-08 20:32:54.83, land}
2025-10-08 20:32:54,831 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{20, 2, 11, 2006-12-22 23:59:35.000, 1, 1700, 0, 0, 2025-10-08 20:32:54.831, sea, 2025-10-08 20:32:54.831, land}
2025-10-08 20:32:54,831 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{21, 2, 15, 2006-12-22 23:59:35.000, 1, 400000, 0, 0, 2025-10-08 20:32:54.831, sea, 2025-10-08 20:32:54.831, land}
2025-10-08 20:32:54,831 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{22, 3, 6, 2007-11-01 02:13:00.000, 4, 1800, 1, 0, 2025-10-08 20:32:54.831, sea, 2025-10-08 20:32:54.831, land}
2025-10-08 20:32:54,831 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{23, 15, 7, 2006-12-22 23:59:36.000, 1, 1700, 1, 0, 2025-10-08 20:32:54.831, sea, 2025-10-08 20:32:54.831, land}
2025-10-08 20:32:54,831 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{24, 13, 3, 2007-09-11 12:13:00.000, 1, 1800, 1, 0, 2025-10-08 20:32:54.831, sea, 2025-10-08 20:32:54.831, land}
2025-10-08 20:32:54,831 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{25, 16, 2, 2006-12-22 23:59:37.000, 2, 1700, 1, 0, 2025-10-08 20:32:54.831, sea, 2025-10-08 20:32:54.831, land}
2025-10-08 20:32:54,832 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{26, 3, 4, 2005-12-21 12:13:00.000, 1, 1800, 1, 0, 2025-10-08 20:32:54.832, sea, 2025-10-08 20:32:54.832, land}
2025-10-08 20:32:54,832 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{27, 2, 8, 2006-12-22 23:59:38.000, 1, 2000, 1, 0, 2025-10-08 20:32:54.832, sea, 2025-10-08 20:32:54.832, land}
2025-10-08 20:32:54,832 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{28, 6, 17, 2007-11-01 02:13:00.000, 2, 600, 0, 0, 2025-10-08 20:32:54.832, sea, 2025-10-08 20:32:54.832, land}
2025-10-08 20:32:54,832 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{29, 4, 4, 2006-12-22 23:59:39.000, 1, 1535, 1, 0, 2025-10-08 20:32:54.832, sea, 2025-10-08 20:32:54.832, land}
2025-10-08 20:32:54,832 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{30, 4, 3, 2007-11-01 02:13:00.000, 4, 1700, 1, 0, 2025-10-08 20:32:54.832, sea, 2025-10-08 20:32:54.832, land}
2025-10-08 20:32:54,833 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{31, 4, 10, 2006-12-22 23:59:40.000, 1, 1700, 0, 0, 2025-10-08 20:32:54.833, sea, 2025-10-08 20:32:54.833, land}
2025-10-08 20:32:54,834 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{32, 13, 3, 2006-12-28 12:13:10.000, 1, 1800, 1, 0, 2025-10-08 20:32:54.834, sea, 2025-10-08 20:32:54.834, land}
2025-10-08 20:32:54,834 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{33, 16, 2, 2006-12-22 23:59:41.000, 2, 1700, 1, 0, 2025-10-08 20:32:54.834, sea, 2025-10-08 20:32:54.834, land}
2025-10-08 20:32:54,834 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{34, 3, 4, 2007-05-21 12:13:00.000, 1, 1800, 1, 0, 2025-10-08 20:32:54.834, sea, 2025-10-08 20:32:54.834, land}
2025-10-08 20:32:54,834 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{35, 2, 8, 2006-12-12 23:59:42.000, 1, 2000, 1, 0, 2025-10-08 20:32:54.834, sea, 2025-10-08 20:32:54.834, land}
2025-10-08 20:32:54,834 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{36, 6, 3, 2007-05-01 02:13:00.000, 2, 1000, 0, 0, 2025-10-08 20:32:54.834, sea, 2025-10-08 20:32:54.834, land}
2025-10-08 20:32:54,835 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{37, 4, 4, 2006-12-12 23:59:43.000, 1, 1535, 1, 0, 2025-10-08 20:32:54.835, sea, 2025-10-08 20:32:54.835, land}
2025-10-08 20:32:54,835 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{38, 4, 3, 2007-05-01 02:03:00.000, 4, 1700, 1, 0, 2025-10-08 20:32:54.835, sea, 2025-10-08 20:32:54.835, land}
2025-10-08 20:32:54,835 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{39, 4, 10, 2006-12-12 23:59:44.000, 1, 1700, 0, 0, 2025-10-08 20:32:54.835, sea, 2025-10-08 20:32:54.835, land}
2025-10-08 20:32:54,835 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{40, 4, 10, 2007-05-01 12:13:00.000, 1, 1700, 0, 0, 2025-10-08 20:32:54.835, sea, 2025-10-08 20:32:54.835, land}
2025-10-08 20:32:54,835 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{41, 4, 11, 2007-11-01 02:13:01.000, 4, 1700, 1, 0, 2025-10-08 20:32:54.835, sea, 2025-10-08 20:32:54.835, land}
2025-10-08 20:32:54,836 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{42, 10, 16, 2006-12-22 23:59:40.000, 1, 2800000, 1, 0, 2025-10-08 20:32:54.835, sea, 2025-10-08 20:32:54.835, land}
2025-10-08 20:32:54,836 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{43, 13, 17, 2006-12-28 12:13:10.000, 1, 1800, 1, 0, 2025-10-08 20:32:54.836, sea, 2025-10-08 20:32:54.836, land}
2025-10-08 20:32:54,836 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{44, 16, 14, 2006-12-22 23:59:41.000, 2, 1700, 1, 0, 2025-10-08 20:32:54.836, sea, 2025-10-08 20:32:54.836, land}
2025-10-08 20:32:54,836 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{45, 3, 18, 2007-05-21 12:13:00.000, 1, 1800, 1, 0, 2025-10-08 20:32:54.836, sea, 2025-10-08 20:32:54.836, land}
2025-10-08 20:32:54,836 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{46, 2, 7, 2006-12-12 23:59:42.000, 1, 2000, 1, 0, 2025-10-08 20:32:54.836, sea, 2025-10-08 20:32:54.836, land}
2025-10-08 20:32:54,836 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{47, 6, 14, 2007-05-01 02:13:00.000, 2, 1000, 0, 0, 2025-10-08 20:32:54.836, sea, 2025-10-08 20:32:54.836, land}
2025-10-08 20:32:54,836 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{48, 16, 12, 2006-12-12 23:59:43.000, 1, 100000, 1, 0, 2025-10-08 20:32:54.836, sea, 2025-10-08 20:32:54.836, land}
2025-10-08 20:32:54,837 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{49, 4, 20, 2007-05-01 02:03:00.000, 4, 1700, 1, 0, 2025-10-08 20:32:54.837, sea, 2025-10-08 20:32:54.837, land}
2025-10-08 20:32:54,837 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{50, 4, 19, 2006-12-12 23:59:44.000, 1, 1700, 0, 0, 2025-10-08 20:32:54.837, sea, 2025-10-08 20:32:54.837, land}
2025-10-08 20:32:54,837 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{51, 4, 11, 2007-11-21 02:13:00.000, 4, 1700, 1, 0, 2025-10-08 20:32:54.837, sea, 2025-10-08 20:32:54.837, land}
2025-10-08 20:32:54,837 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{52, 20, 17, 2006-12-23 23:59:40.000, 1, 400, 0, 0, 2025-10-08 20:32:54.837, sea, 2025-10-08 20:32:54.837, land}
2025-10-08 20:32:54,837 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{53, 13, 16, 2007-12-28 12:13:10.000, 1, 600000, 1, 0, 2025-10-08 20:32:54.837, sea, 2025-10-08 20:32:54.837, land}
2025-10-08 20:32:54,838 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{54, 16, 14, 2006-02-22 23:59:41.000, 2, 1700, 1, 0, 2025-10-08 20:32:54.838, sea, 2025-10-08 20:32:54.838, land}
2025-10-08 20:32:54,838 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{55, 3, 3, 2007-07-21 12:13:00.000, 1, 1800, 1, 0, 2025-10-08 20:32:54.838, sea, 2025-10-08 20:32:54.838, land}
2025-10-08 20:32:54,838 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{56, 2, 8, 2006-12-22 23:59:42.000, 1, 2000, 1, 0, 2025-10-08 20:32:54.838, sea, 2025-10-08 20:32:54.838, land}
2025-10-08 20:32:54,838 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{57, 6, 19, 2007-02-01 02:13:00.000, 2, 1000, 0, 0, 2025-10-08 20:32:54.838, sea, 2025-10-08 20:32:54.838, land}
2025-10-08 20:32:54,838 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{58, 2, 12, 2006-12-12 23:59:43.000, 1, 4000000, 1, 0, 2025-10-08 20:32:54.838, sea, 2025-10-08 20:32:54.838, land}
2025-10-08 20:32:54,839 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{59, 4, 18, 2007-05-01 02:03:00.000, 1, 380, 1, 0, 2025-10-08 20:32:54.839, sea, 2025-10-08 20:32:54.839, land}
2025-10-08 20:32:54,839 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{60, 4, 20, 2006-12-12 23:59:44.000, 2, 680, 0, 0, 2025-10-08 20:32:54.839, sea, 2025-10-08 20:32:54.839, land}
2025-10-08 20:32:54,839 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{61, 1, 16, 2008-03-03 06:34:56.000, 3, 12000000, 1, 0, 2025-10-08 20:32:54.839, sea, 2025-10-08 20:32:54.839, land}
2025-10-08 20:32:54,840 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{62, 1, 2, 2009-06-04 06:34:56.000, 12, 20000, 1, 0, 2025-10-08 20:32:54.84, sea, 2025-10-08 20:32:54.84, land}
2025-10-08 20:32:54,840 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{63, 1, 6, 2010-09-26 06:34:56.000, 2, 2000, 1, 0, 2025-10-08 20:32:54.84, sea, 2025-10-08 20:32:54.84, land}
2025-10-08 20:32:54,840 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{64, 1, 8, 2011-03-03 09:45:29.000, 1, 50, 1, 0, 2025-10-08 20:32:54.84, sea, 2025-10-08 20:32:54.84, land}
2025-10-08 20:32:54,840 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{65, 1, 13, 2012-06-04 09:45:29.000, 1, 1000000, 1, 0, 2025-10-08 20:32:54.84, sea, 2025-10-08 20:32:54.84, land}
2025-10-08 20:32:54,840 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{66, 1, 13, 2013-09-26 09:45:29.000, 1, 900000, 1, 0, 2025-10-08 20:32:54.84, sea, 2025-10-08 20:32:54.84, land}
2025-10-08 20:32:54,841 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{67, 1, 5, 2014-03-03 21:02:12.000, 2, 3000, 1, 0, 2025-10-08 20:32:54.841, sea, 2025-10-08 20:32:54.841, land}
2025-10-08 20:32:54,841 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{68, 1, 17, 2015-06-04 21:02:12.000, 30, 3000, 1, 0, 2025-10-08 20:32:54.841, sea, 2025-10-08 20:32:54.841, land}
2025-10-08 20:32:54,841 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{69, 1, 17, 2016-09-26 21:02:12.000, 1, 1000, 1, 0, 2025-10-08 20:32:54.841, sea, 2025-10-08 20:32:54.841, land}
2025-10-08 20:32:54,841 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE:{70, 1, 17, 2017-03-03 01:11:00.000, 1, 1200, 1, 0, 2025-10-08 20:32:54.841, sea, 2025-10-08 20:32:54.841, land}
2025-10-08 20:32:54,856 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 70 rows are loaded to PURCHASE
2025-10-08 20:32:54,857 [main] INFO  (DfDelimiterDataWriterImpl#writeData():97) - /= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = 
2025-10-08 20:32:54,857 [main] INFO  (DfDelimiterDataWriterImpl#writeData():98) - writeData(playsql/data/ut/reversetsv/UTF-8/cyclic_03_02-PURCHASE_PAYMENT.tsv)
2025-10-08 20:32:54,857 [main] INFO  (DfDelimiterDataWriterImpl#writeData():99) - = = = = = = =/
2025-10-08 20:32:54,857 [main] INFO  (DfTableExtractor#doGetTableList():66) - ...Getting tables:
2025-10-08 20:32:54,857 [main] INFO  (DfTableExtractor#doGetTableList():67) -   schema = {maihamadb.$$NoNameSchema$$ as main}
2025-10-08 20:32:54,857 [main] INFO  (DfTableExtractor#doGetTableList():68) -   types  = [TABLE, VIEW]
2025-10-08 20:32:54,860 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{1, 1, 1800.00, 2006-12-25 23:59:59.000, BAK, 2025-10-08 20:32:54.86, sea, 2025-10-08 20:32:54.86, land}
2025-10-08 20:32:54,860 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{2, 2, 1700.00, 2007-11-13 16:16:16.000, BAK, 2025-10-08 20:32:54.86, sea, 2025-10-08 20:32:54.86, land}
2025-10-08 20:32:54,861 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{3, 3, 900.00, 2006-12-23 23:56:29.000, CRC, 2025-10-08 20:32:54.861, sea, 2025-10-08 20:32:54.861, land}
2025-10-08 20:32:54,861 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{4, 3, 900.00, 2006-12-23 23:56:30.000, HAN, 2025-10-08 20:32:54.861, sea, 2025-10-08 20:32:54.861, land}
2025-10-08 20:32:54,861 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{5, 4, 1700.00, 2007-12-01 02:13:00.000, HAN, 2025-10-08 20:32:54.861, sea, 2025-10-08 20:32:54.861, land}
2025-10-08 20:32:54,861 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{6, 5, 800.20, 2008-04-04 23:12:59.000, HAN, 2025-10-08 20:32:54.861, sea, 2025-10-08 20:32:54.861, land}
2025-10-08 20:32:54,864 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{7, 5, 1000.90, 2008-05-04 23:12:59.000, CRC, 2025-10-08 20:32:54.863, sea, 2025-10-08 20:32:54.863, land}
2025-10-08 20:32:54,864 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{8, 6, 1000.00, 2002-01-01 16:32:01.000, CRC, 2025-10-08 20:32:54.864, sea, 2025-10-08 20:32:54.864, land}
2025-10-08 20:32:54,864 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{9, 6, 400.80, 2002-01-01 16:32:01.000, CRC, 2025-10-08 20:32:54.864, sea, 2025-10-08 20:32:54.864, land}
2025-10-08 20:32:54,864 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{10, 6, 599.20, 2002-01-01 16:32:01.000, HAN, 2025-10-08 20:32:54.864, sea, 2025-10-08 20:32:54.864, land}
2025-10-08 20:32:54,864 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{11, 7, 300.00, 2006-01-28 23:59:59.000, CRC, 2025-10-08 20:32:54.864, sea, 2025-10-08 20:32:54.864, land}
2025-10-08 20:32:54,865 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{12, 8, 535.50, 2007-11-09 16:23:00.000, BAK, 2025-10-08 20:32:54.865, sea, 2025-10-08 20:32:54.865, land}
2025-10-08 20:32:54,865 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{13, 8, 999.50, 2014-11-09 16:23:05.000, BAK, 2025-10-08 20:32:54.865, sea, 2025-10-08 20:32:54.865, land}
2025-10-08 20:32:54,865 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{14, 9, 1700.00, 2006-12-22 23:59:59.000, BAK, 2025-10-08 20:32:54.865, sea, 2025-10-08 20:32:54.865, land}
2025-10-08 20:32:54,865 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{15, 11, 1799.20, 2014-11-09 16:23:01.000, CRC, 2025-10-08 20:32:54.865, sea, 2025-10-08 20:32:54.865, land}
2025-10-08 20:32:54,866 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{16, 11, 0.80, 2014-11-09 16:23:01.000, HAN, 2025-10-08 20:32:54.866, sea, 2025-10-08 20:32:54.866, land}
2025-10-08 20:32:54,866 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{17, 12, 1690.00, 2011-12-22 23:59:12.000, HAN, 2025-10-08 20:32:54.866, sea, 2025-10-08 20:32:54.866, land}
2025-10-08 20:32:54,866 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{18, 12, 10.00, 2011-12-22 23:59:12.000, CRC, 2025-10-08 20:32:54.866, sea, 2025-10-08 20:32:54.866, land}
2025-10-08 20:32:54,866 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{19, 13, 1800.70, 2007-11-01 02:13:00.000, CRC, 2025-10-08 20:32:54.866, sea, 2025-10-08 20:32:54.866, land}
2025-10-08 20:32:54,866 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{20, 14, 1700.00, 2008-11-09 16:23:02.000, BAK, 2025-10-08 20:32:54.866, sea, 2025-10-08 20:32:54.866, land}
2025-10-08 20:32:54,866 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{21, 15, 300.00, 2006-12-22 23:59:32.000, HAN, 2025-10-08 20:32:54.866, sea, 2025-10-08 20:32:54.866, land}
2025-10-08 20:32:54,867 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{22, 15, 600.00, 2007-12-22 23:59:32.000, BAK, 2025-10-08 20:32:54.867, sea, 2025-10-08 20:32:54.867, land}
2025-10-08 20:32:54,867 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{23, 15, 900.00, 2008-12-22 23:59:32.000, HAN, 2025-10-08 20:32:54.867, sea, 2025-10-08 20:32:54.867, land}
2025-10-08 20:32:54,870 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{24, 16, 2000.00, 2012-11-01 02:13:00.000, BAK, 2025-10-08 20:32:54.87, sea, 2025-10-08 20:32:54.87, land}
2025-10-08 20:32:54,871 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{25, 18, 1535.00, 2013-11-01 02:13:00.000, HAN, 2025-10-08 20:32:54.871, sea, 2025-10-08 20:32:54.871, land}
2025-10-08 20:32:54,871 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{26, 19, 1700.00, 2007-11-01 02:13:00.000, HAN, 2025-10-08 20:32:54.871, sea, 2025-10-08 20:32:54.871, land}
2025-10-08 20:32:54,871 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{27, 20, 5.00, 2006-12-22 23:59:35.000, HAN, 2025-10-08 20:32:54.871, sea, 2025-10-08 20:32:54.871, land}
2025-10-08 20:32:54,871 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{28, 21, 399999.00, 2006-12-22 23:59:35.000, BAK, 2025-10-08 20:32:54.871, sea, 2025-10-08 20:32:54.871, land}
2025-10-08 20:32:54,871 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{29, 22, 1800.00, 2007-11-01 02:13:00.000, BAK, 2025-10-08 20:32:54.871, sea, 2025-10-08 20:32:54.871, land}
2025-10-08 20:32:54,872 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{30, 23, 1700.00, 2006-12-22 23:59:36.000, HAN, 2025-10-08 20:32:54.872, sea, 2025-10-08 20:32:54.872, land}
2025-10-08 20:32:54,872 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{31, 23, 1700.00, 2006-12-22 23:59:36.000, HAN, 2025-10-08 20:32:54.872, sea, 2025-10-08 20:32:54.872, land}
2025-10-08 20:32:54,872 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{32, 23, 1700.00, 2006-12-22 23:59:36.000, HAN, 2025-10-08 20:32:54.872, sea, 2025-10-08 20:32:54.872, land}
2025-10-08 20:32:54,872 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{33, 24, 1000.00, 2012-09-11 12:13:00.000, BAK, 2025-10-08 20:32:54.872, sea, 2025-10-08 20:32:54.872, land}
2025-10-08 20:32:54,872 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{34, 24, 800.00, 2015-09-11 12:13:00.000, BAK, 2025-10-08 20:32:54.872, sea, 2025-10-08 20:32:54.872, land}
2025-10-08 20:32:54,872 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{35, 25, 1700.00, 2013-12-22 23:59:37.000, BAK, 2025-10-08 20:32:54.872, sea, 2025-10-08 20:32:54.872, land}
2025-10-08 20:32:54,872 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{36, 26, 1800.00, 2005-12-21 12:13:00.000, BAK, 2025-10-08 20:32:54.872, sea, 2025-10-08 20:32:54.872, land}
2025-10-08 20:32:54,872 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{37, 27, 2000.00, 2006-12-22 23:59:38.000, HAN, 2025-10-08 20:32:54.872, sea, 2025-10-08 20:32:54.872, land}
2025-10-08 20:32:54,873 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{38, 28, 600.00, 2007-11-01 02:13:00.000, BAK, 2025-10-08 20:32:54.873, sea, 2025-10-08 20:32:54.873, land}
2025-10-08 20:32:54,873 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{39, 29, 1535.00, 2006-12-22 23:59:39.000, BAK, 2025-10-08 20:32:54.873, sea, 2025-10-08 20:32:54.873, land}
2025-10-08 20:32:54,873 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{40, 30, 100.00, 2010-09-01 02:13:00.000, HAN, 2025-10-08 20:32:54.873, sea, 2025-10-08 20:32:54.873, land}
2025-10-08 20:32:54,873 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{41, 30, 200.00, 2011-10-31 02:13:00.000, CRC, 2025-10-08 20:32:54.873, sea, 2025-10-08 20:32:54.873, land}
2025-10-08 20:32:54,873 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{42, 30, 300.75, 2012-11-01 02:13:00.000, CRC, 2025-10-08 20:32:54.873, sea, 2025-10-08 20:32:54.873, land}
2025-10-08 20:32:54,873 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{43, 30, 400.25, 2013-12-01 02:13:00.000, HAN, 2025-10-08 20:32:54.873, sea, 2025-10-08 20:32:54.873, land}
2025-10-08 20:32:54,873 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{44, 30, 300.00, 2014-09-01 02:13:00.000, HAN, 2025-10-08 20:32:54.873, sea, 2025-10-08 20:32:54.873, land}
2025-10-08 20:32:54,874 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{45, 30, 700.00, 2014-10-01 02:13:00.000, HAN, 2025-10-08 20:32:54.874, sea, 2025-10-08 20:32:54.874, land}
2025-10-08 20:32:54,874 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{46, 31, 1700.85, 2006-12-22 23:59:40.000, HAN, 2025-10-08 20:32:54.874, sea, 2025-10-08 20:32:54.874, land}
2025-10-08 20:32:54,874 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{47, 32, 1800.00, 2009-12-28 12:13:10.000, HAN, 2025-10-08 20:32:54.874, sea, 2025-10-08 20:32:54.874, land}
2025-10-08 20:32:54,874 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{48, 33, 1700.00, 2006-12-22 23:59:41.000, CRC, 2025-10-08 20:32:54.874, sea, 2025-10-08 20:32:54.874, land}
2025-10-08 20:32:54,874 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{49, 34, 1800.00, 2007-05-21 12:13:00.000, BAK, 2025-10-08 20:32:54.874, sea, 2025-10-08 20:32:54.874, land}
2025-10-08 20:32:54,875 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{50, 35, 2000.00, 2006-12-12 23:59:42.000, CRC, 2025-10-08 20:32:54.875, sea, 2025-10-08 20:32:54.875, land}
2025-10-08 20:32:54,875 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{51, 36, 300.10, 2012-05-01 02:13:00.000, CRC, 2025-10-08 20:32:54.875, sea, 2025-10-08 20:32:54.875, land}
2025-10-08 20:32:54,875 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{52, 36, 300.80, 2013-05-01 02:13:00.000, HAN, 2025-10-08 20:32:54.875, sea, 2025-10-08 20:32:54.875, land}
2025-10-08 20:32:54,875 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{53, 36, 300.25, 2014-05-01 02:13:00.000, HAN, 2025-10-08 20:32:54.875, sea, 2025-10-08 20:32:54.875, land}
2025-10-08 20:32:54,875 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{54, 37, 1535.00, 2006-12-12 23:59:43.000, HAN, 2025-10-08 20:32:54.875, sea, 2025-10-08 20:32:54.875, land}
2025-10-08 20:32:54,875 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{55, 38, 1700.00, 2007-05-01 02:03:00.000, HAN, 2025-10-08 20:32:54.875, sea, 2025-10-08 20:32:54.875, land}
2025-10-08 20:32:54,876 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{56, 40, 128.00, 2007-05-01 12:13:00.000, BAK, 2025-10-08 20:32:54.876, sea, 2025-10-08 20:32:54.876, land}
2025-10-08 20:32:54,876 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{57, 40, 256.00, 2013-05-01 12:13:00.000, BAK, 2025-10-08 20:32:54.876, sea, 2025-10-08 20:32:54.876, land}
2025-10-08 20:32:54,876 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{58, 40, 512.00, 2009-05-01 12:13:00.000, CRC, 2025-10-08 20:32:54.876, sea, 2025-10-08 20:32:54.876, land}
2025-10-08 20:32:54,876 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{59, 41, 1700.00, 2007-11-01 02:13:00.000, HAN, 2025-10-08 20:32:54.876, sea, 2025-10-08 20:32:54.876, land}
2025-10-08 20:32:54,876 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{60, 42, 30000000.00, 2014-03-22 21:59:40.000, HAN, 2025-10-08 20:32:54.876, sea, 2025-10-08 20:32:54.876, land}
2025-10-08 20:32:54,876 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{61, 43, 1800.00, 2006-12-28 12:13:10.000, BAK, 2025-10-08 20:32:54.876, sea, 2025-10-08 20:32:54.876, land}
2025-10-08 20:32:54,876 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{62, 44, 1700.00, 2006-12-22 23:59:41.000, BAK, 2025-10-08 20:32:54.876, sea, 2025-10-08 20:32:54.876, land}
2025-10-08 20:32:54,876 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{63, 45, 1800.00, 2007-05-21 12:13:00.000, CRC, 2025-10-08 20:32:54.876, sea, 2025-10-08 20:32:54.876, land}
2025-10-08 20:32:54,877 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{64, 46, 2000.00, 2010-12-12 23:59:42.000, BAK, 2025-10-08 20:32:54.877, sea, 2025-10-08 20:32:54.877, land}
2025-10-08 20:32:54,877 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{65, 48, 90000.00, 2006-12-12 23:59:43.000, HAN, 2025-10-08 20:32:54.877, sea, 2025-10-08 20:32:54.877, land}
2025-10-08 20:32:54,877 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{66, 48, 10000.00, 2006-12-12 23:59:43.000, BAK, 2025-10-08 20:32:54.877, sea, 2025-10-08 20:32:54.877, land}
2025-10-08 20:32:54,877 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{67, 49, 1700.66, 2007-05-01 02:03:00.000, HAN, 2025-10-08 20:32:54.877, sea, 2025-10-08 20:32:54.877, land}
2025-10-08 20:32:54,877 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{68, 51, 1700.00, 2007-11-21 02:13:00.000, BAK, 2025-10-08 20:32:54.877, sea, 2025-10-08 20:32:54.877, land}
2025-10-08 20:32:54,877 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{69, 52, 100.00, 2006-12-23 23:59:40.000, BAK, 2025-10-08 20:32:54.877, sea, 2025-10-08 20:32:54.877, land}
2025-10-08 20:32:54,877 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{70, 52, 40.00, 2007-12-23 23:59:40.000, HAN, 2025-10-08 20:32:54.877, sea, 2025-10-08 20:32:54.877, land}
2025-10-08 20:32:54,877 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{71, 52, 40.00, 2008-12-23 23:59:40.000, HAN, 2025-10-08 20:32:54.877, sea, 2025-10-08 20:32:54.877, land}
2025-10-08 20:32:54,878 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{72, 52, 40.00, 2009-12-23 23:59:40.000, HAN, 2025-10-08 20:32:54.878, sea, 2025-10-08 20:32:54.878, land}
2025-10-08 20:32:54,878 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{73, 52, 40.00, 2010-12-23 23:59:40.000, BAK, 2025-10-08 20:32:54.878, sea, 2025-10-08 20:32:54.878, land}
2025-10-08 20:32:54,878 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{74, 52, 40.00, 2011-12-23 23:59:40.000, CRC, 2025-10-08 20:32:54.878, sea, 2025-10-08 20:32:54.878, land}
2025-10-08 20:32:54,878 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{75, 52, 40.00, 2012-12-23 23:59:40.000, BAK, 2025-10-08 20:32:54.878, sea, 2025-10-08 20:32:54.878, land}
2025-10-08 20:32:54,878 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{76, 52, 40.00, 2013-12-23 23:59:40.000, HAN, 2025-10-08 20:32:54.878, sea, 2025-10-08 20:32:54.878, land}
2025-10-08 20:32:54,878 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{77, 52, 40.00, 2014-12-23 23:59:40.000, HAN, 2025-10-08 20:32:54.878, sea, 2025-10-08 20:32:54.878, land}
2025-10-08 20:32:54,878 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{78, 52, 40.00, 2015-12-23 23:59:40.000, HAN, 2025-10-08 20:32:54.878, sea, 2025-10-08 20:32:54.878, land}
2025-10-08 20:32:54,878 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{79, 53, 600000.00, 2007-12-28 12:13:10.000, BAK, 2025-10-08 20:32:54.878, sea, 2025-10-08 20:32:54.878, land}
2025-10-08 20:32:54,879 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{80, 54, 1700.42, 2008-02-22 23:59:41.000, CRC, 2025-10-08 20:32:54.879, sea, 2025-10-08 20:32:54.879, land}
2025-10-08 20:32:54,879 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{81, 55, 1600.00, 2012-07-21 12:13:00.000, HAN, 2025-10-08 20:32:54.879, sea, 2025-10-08 20:32:54.879, land}
2025-10-08 20:32:54,879 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{82, 55, 200.00, 2008-07-21 12:13:00.000, CRC, 2025-10-08 20:32:54.879, sea, 2025-10-08 20:32:54.879, land}
2025-10-08 20:32:54,879 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{83, 56, 2000.00, 2009-12-22 23:59:42.000, HAN, 2025-10-08 20:32:54.879, sea, 2025-10-08 20:32:54.879, land}
2025-10-08 20:32:54,879 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{84, 56, 2000.00, 2009-12-22 23:59:42.000, HAN, 2025-10-08 20:32:54.879, sea, 2025-10-08 20:32:54.879, land}
2025-10-08 20:32:54,879 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{85, 56, 2000.00, 2009-12-22 23:59:42.000, HAN, 2025-10-08 20:32:54.879, sea, 2025-10-08 20:32:54.879, land}
2025-10-08 20:32:54,879 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{86, 56, 2000.00, 2009-12-22 23:59:42.000, HAN, 2025-10-08 20:32:54.879, sea, 2025-10-08 20:32:54.879, land}
2025-10-08 20:32:54,879 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{87, 57, 999.00, 2014-02-01 02:13:00.000, HAN, 2025-10-08 20:32:54.879, sea, 2025-10-08 20:32:54.879, land}
2025-10-08 20:32:54,879 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{88, 58, 4000000.00, 2006-12-12 23:59:43.000, HAN, 2025-10-08 20:32:54.879, sea, 2025-10-08 20:32:54.879, land}
2025-10-08 20:32:54,880 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{89, 59, 380.77, 2013-05-01 02:03:00.000, CRC, 2025-10-08 20:32:54.88, sea, 2025-10-08 20:32:54.88, land}
2025-10-08 20:32:54,880 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{90, 60, 675.88, 2006-12-12 23:59:44.000, BAK, 2025-10-08 20:32:54.88, sea, 2025-10-08 20:32:54.88, land}
2025-10-08 20:32:54,880 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{91, 61, 12000000.00, 2008-03-03 06:34:56.000, HAN, 2025-10-08 20:32:54.88, sea, 2025-10-08 20:32:54.88, land}
2025-10-08 20:32:54,880 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{92, 62, 20000.00, 2009-06-04 06:34:56.000, HAN, 2025-10-08 20:32:54.88, sea, 2025-10-08 20:32:54.88, land}
2025-10-08 20:32:54,880 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{93, 63, 2000.00, 2010-09-26 06:34:56.000, HAN, 2025-10-08 20:32:54.88, sea, 2025-10-08 20:32:54.88, land}
2025-10-08 20:32:54,881 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{94, 64, 50.00, 2011-03-03 09:45:29.000, BAK, 2025-10-08 20:32:54.881, sea, 2025-10-08 20:32:54.881, land}
2025-10-08 20:32:54,881 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{95, 65, 1000000.00, 2012-06-04 09:45:29.000, BAK, 2025-10-08 20:32:54.881, sea, 2025-10-08 20:32:54.881, land}
2025-10-08 20:32:54,881 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{96, 66, 900000.00, 2013-09-26 09:45:29.000, BAK, 2025-10-08 20:32:54.881, sea, 2025-10-08 20:32:54.881, land}
2025-10-08 20:32:54,881 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{97, 67, 3000.00, 2014-03-03 21:02:12.000, CRC, 2025-10-08 20:32:54.881, sea, 2025-10-08 20:32:54.881, land}
2025-10-08 20:32:54,881 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{98, 68, 3000.00, 2015-06-04 21:02:12.000, CRC, 2025-10-08 20:32:54.881, sea, 2025-10-08 20:32:54.881, land}
2025-10-08 20:32:54,881 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{99, 69, 1000.00, 2016-09-26 21:02:12.000, CRC, 2025-10-08 20:32:54.881, sea, 2025-10-08 20:32:54.881, land}
2025-10-08 20:32:54,881 [main] INFO  (DfAbsractDataWriter#handleLoggingInsert():1090) - PURCHASE_PAYMENT:{100, 70, 1200.00, 2017-03-03 01:11:00.000, HAN, 2025-10-08 20:32:54.881, sea, 2025-10-08 20:32:54.881, land}
2025-10-08 20:32:54,894 [main] INFO  (DfAbsractDataWriter#noticeLoadedRowSize():1106) -  -> 100 rows are loaded to PURCHASE_PAYMENT
2025-10-08 20:32:54,895 [main] INFO  (DfLoadDataProcess#lazyCheckLoadedClassifiaction():387) - ...Checking implicit set of classification
2025-10-08 20:32:54,899 [main] INFO  (DfTakeFinallyProcess#takeFinally():244) - 
2025-10-08 20:32:54,899 [main] INFO  (DfTakeFinallyProcess#takeFinally():245) - * * * * * * * **
2025-10-08 20:32:54,899 [main] INFO  (DfTakeFinallyProcess#takeFinally():246) - *              *
2025-10-08 20:32:54,899 [main] INFO  (DfTakeFinallyProcess#takeFinally():247) - * Take Finally *
2025-10-08 20:32:54,900 [main] INFO  (DfTakeFinallyProcess#takeFinally():248) - *              *
2025-10-08 20:32:54,900 [main] INFO  (DfTakeFinallyProcess#takeFinally():249) - * * * * * * * **
2025-10-08 20:32:54,901 [main] INFO  (DfSqlFileFireMan#fire():68) - ...Firing: take-finally.sql
2025-10-08 20:32:54,902 [main] INFO  (DfSqlFileRunnerBase#traceResult():172) -  -> success=0 failure=0
2025-10-08 20:32:54,902 [main] INFO  (DfSqlFileFireMan#fire():93) - Take Finally: success=0, failure=0 (in 1 files)
2025-10-08 20:32:54,902 [main] INFO  (DfDataSourceHandler#destroy():120) - ...closeReally()
2025-10-08 20:32:54,903 [main] INFO  (DfDBFluteTaskUtil#logFinalMessage():139) - 
_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
[Final Message]: 00m02s555ms

  DBFLUTE_CLIENT: {maihamadb}
    database  = mysql (MySQL 8.0.43)
    language  = java
    container = lasta_di
    package   = org.docksidestage.handson.dbflute

  DBFLUTE_ENVIRONMENT_TYPE: {}
    driver = com.mysql.jdbc.Driver
    url    = jdbc:mysql://localhost:43376/maihamadb?allowPublicKeyRetrieval=true&sslMode=DISABLED
    schema = {maihamadb.$$NoNameSchema$$ as main}
    user   = maihamadb
    props  = {password=, user=root}
    additionalSchema = 
    repsEnvType      = ut
    refreshProject   = $$AutoDetect$$

 Create Schema: success=42, failure=0 (in 2 files) - 00m00s574ms
  (Initialize Schema) - 00m00s243ms
  (Create Schema) - 00m00s330ms
  o replace-schema-00-system.sql
  o replace-schema-10-basic.sql

 Load Data: common:{tsv=6}, ut:{tsv=9} - 00m00s271ms
  <common>
  o acyclic_01_01-MEMBER_STATUS.tsv
  o acyclic_01_02-PRODUCT_CATEGORY.tsv
  o acyclic_01_03-PRODUCT_STATUS.tsv
  o acyclic_01_04-REGION.tsv
  o acyclic_01_05-SERVICE_RANK.tsv
  o acyclic_01_06-WITHDRAWAL_REASON.tsv
  <ut>
  o cyclic_01_01-PRODUCT.tsv
  o cyclic_02_01-MEMBER.tsv
  o cyclic_02_02-MEMBER_ADDRESS.tsv
  o cyclic_02_03-MEMBER_LOGIN.tsv
  o cyclic_02_04-MEMBER_SECURITY.tsv
  o cyclic_02_05-MEMBER_SERVICE.tsv
  o cyclic_02_06-MEMBER_WITHDRAWAL.tsv
  o cyclic_03_01-PURCHASE.tsv
  o cyclic_03_02-PURCHASE_PAYMENT.tsv

 Take Finally: success=0, failure=0 (in 1 files) - 00m00s003ms
  o take-finally.sql
_/_/_/_/_/_/_/_/_/_/ {ReplaceSchema}
